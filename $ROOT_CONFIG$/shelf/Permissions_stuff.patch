Index: app/Controller/Component/AccountComponent.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/Controller/Component/AccountComponent.php	(date 1425427504000)
+++ app/Controller/Component/AccountComponent.php	(revision )
@@ -3,6 +3,8 @@
 
 /**
  * Class AccountComponent
+ *
+ * @property \AppController Controller
  */
 	class AccountComponent extends Component
 	{
@@ -15,8 +17,10 @@
 			$upgrade = array();
 			$active_chart_categories = array();
 
-			if (count($account['UpgradeableChartCategory'])>0) { // the account paying their subscription today does have upgradable charts
-				foreach ($account['UpgradeableChartCategory'] as $upgradable_chart_category) { // how many of them are active?
+			if (count($account['UpgradeableChartCategory'])>0) {
+				// the account paying their subscription today does have upgradable charts
+				foreach ($account['UpgradeableChartCategory'] as $upgradable_chart_category) {
+					// how many of them are active?
 					if (empty($upgradable_chart_category['turn_off_date'])) {
 						$active_chart_categories[] = $upgradable_chart_category;
 					}
@@ -24,6 +28,7 @@
 
 				if (count($active_chart_categories)>0) {
 					// First let's check if the current account has (any) upgrades active coupon code
+					$active_coupon = false;
 					if ($account['Coupon']) {
 						foreach ($account['Coupon'] as $coupon) {
 							if ((!$coupon['start_date'] || strtotime($coupon['start_date'])<time()) &&
@@ -61,7 +66,7 @@
 
 						// Next let's check if there is any active upgrades coupon code
 						// to apply to the current upgrade
-						if (@$active_coupon) {
+						if ($active_coupon) {
 
 							if ($active_coupon['amount_type']==1) {
 								// Fixed amount
@@ -278,7 +283,7 @@
 	     *
 	     * */
 	    public function isAdmin() {
-	        $is_admin = (($this->Controller->current_account_creator['User']['id']==$this->Controller->Auth->user('id')) || $this->Controller->is_support || $this->Controller->is_super_admin);
+	        $is_admin = (($this->Controller->current_account_creator['User']['id']==$this->Controller->Auth->user('id')) || $this->Controller->is_super_admin);
 	        
 			if (!$is_admin && $this->Controller->current_account['InvitedUsers']) {
 	            foreach ($this->Controller->current_account['InvitedUsers'] as $invited) {
Index: app/Controller/AppController.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/Controller/AppController.php	(date 1425427504000)
+++ app/Controller/AppController.php	(revision )
@@ -20,6 +20,7 @@
  * @since         CakePHP(tm) v 0.2.9
  * @license       http://www.opensource.org/licenses/mit-license.php MIT License
  */
+
 App::uses('Controller', 'Controller');
 
 /**
@@ -28,311 +29,376 @@
  * Add your application-wide methods in the class below, your controllers
  * will inherit them.
  *
- * @package		app.Controller
+ * @package        app.Controller
- * @link		http://book.cakephp.org/2.0/en/controllers.html#the-app-controller
+ * @link           http://book.cakephp.org/2.0/en/controllers.html#the-app-controller
  *
- * @property \Account Account
+ * @property \Account               Account
- * @property \AppModel AppModel
+ * @property \AppModel              AppModel
- * @property \Coupon Coupon
+ * @property \Coupon                Coupon
- * @property \EmailNotification EmailNotification
+ * @property \EmailNotification     EmailNotification
- * @property \Plugin Plugin
+ * @property \Plugin                Plugin
- * @property \Region Region
+ * @property \Region                Region
+ * @property \Site                  Site
- * @property \TrackingUrl TrackingUrl
+ * @property \TrackingUrl           TrackingUrl
- * @property \User User
+ * @property \User                  User
- * @property \UsersBranding UsersBranding
+ * @property \UsersBranding         UsersBranding
+ * @property \AuthComponent         Auth
+ * @property \CookieComponent       Cookie
+ * @property \SessionComponent      Session
+ * @property \UserAccountComponent  UserAccount
  */
-class AppController extends Controller {
+class AppController extends Controller
+{
 
 	public $referrer_id;
 
 	public $account_id;
 	public $current_account;
+	public $current_account_creator;
 	public $account_warnings;
-	
+
-	public $is_support;
 	public $is_super_admin;
 	public $current_user;
 	public $custom_css;
 	public $wiki_custom_css;
 	public $custom_user_id;
 
-	var $theme = 'Default';
-	var $account_menu_items = array();
-	var $uses = array('AppModel', 'User', 'Account', 'Plugin', 'Referrer', 'Region', 'UsersBranding', 'Site', 'EmailNotification', 'TrackingUrl');
+	public $theme = 'Default';
 
-	public $helpers = array('AccountMenus', 'CamelCase', 'AssetCompress.AssetCompress');
+	public $account_menu_items = array();
+
+	public $uses = array(
+		'Account',
+		'AppModel',
+		'EmailNotification',
+		'Plugin',
+		'Referrer',
+		'Region',
+		'Site',
+		'TrackingUrl',
+		'User',
+		'UsersBranding'
+	);
+
+	public $helpers = array(
+		'AccountMenus',
+		'AssetCompress.AssetCompress',
+		'CamelCase'
+	);
+
-    public $components = array(
+	public $components = array(
-        'Session',
-        'Cookie',
-        'Auth' => array(
+		'Auth' => array(
-            'loginRedirect' => array('controller' => 'users', 'action' => 'checkAccounts'),
+			'loginRedirect'  => array('controller' => 'users', 'action' => 'checkAccounts'),
-            'logoutRedirect' => array('controller' => 'users', 'action' => 'login'),
+			'logoutRedirect' => array('controller' => 'users', 'action' => 'login'),
-            'authorize' => array('Controller'),
+			'authorize'      => array('Controller'),
-            'authError' => '<div class="alert-box alert radius">Your session has expired. Please log in.</div>',
+			'authError'      => '<div class="alert-box alert radius">Your session has expired. Please log in.</div>',
-            'authenticate' => array(
+			'authenticate'   => array(
-                'Form' => array(
-                    'fields' => array('username' => 'email')
-                )
-            )
-        ),
+				'Form' => array(
+					'fields' => array('username' => 'email')
+				)
+			)
+		),
-        'UserAccount'
+		'Cookie',
+		'Session',
+		'UserAccount',
-    );
+	);
 
-    public function beforeFilter() {
+	public function beforeFilter()
+	{
+		App::import('Model', 'Account');
+
-        $this->setReferrer();
+		$this->setReferrer();
-		if (file_exists(ROOT_PATH . 'app/webroot/css/whitelabel/' . $this->Auth->user('id') . '.css') && $this->custom_css == '') { // check for custom CSS for current user if account level css hasn't already been set
+		if (file_exists(ROOT_PATH . 'app/webroot/css/whitelabel/' . $this->Auth->user('id') . '.css') &&
+		    $this->custom_css == ''
+		) {
+			// check for custom CSS for current user if account level css hasn't already been set
-			$this->custom_css = 'whitelabel/' . $this->Auth->user('id') . '.css';
+			$this->custom_css      = 'whitelabel/' . $this->Auth->user('id') . '.css';
 			$this->wiki_custom_css = 'whitelabel/' . $this->Auth->user('id') . '-wiki.css';
-			$this->custom_user_id = $this->Auth->user('id');
+			$this->custom_user_id  = $this->Auth->user('id');
 		}
 
-        // Require a login on each page, except the ones listed below
-        $this->Auth->allow(array('controller' => 'users', 'action' => 'login'));
-        $this->Auth->allow(array('controller' => 'users', 'action' => 'confirm'));
-        $this->Auth->allow(array('controller' => 'users', 'action' => 'reset'));
-        $this->Auth->allow(array('controller' => 'users', 'action' => 'resend'));
-        $this->Auth->allow(array('controller' => 'pages', 'action' => 'display'));
+		// Require a login on each page, except the ones listed below
+		$this->Auth->allow(array('controller' => 'users', 'action' => 'login'));
+		$this->Auth->allow(array('controller' => 'users', 'action' => 'confirm'));
+		$this->Auth->allow(array('controller' => 'users', 'action' => 'reset'));
+		$this->Auth->allow(array('controller' => 'users', 'action' => 'resend'));
+		$this->Auth->allow(array('controller' => 'pages', 'action' => 'display'));
 
-		//if ($this->Auth->user('id')) {
-	        $user_id = $this->Auth->user('id'); // need to get the current user
-		    $this->current_user = $this->User->read(null, $user_id);	     // get the current user info. Does this return roles on various accounts too?
-		    $this->is_support = in_array($this->Auth->user('id'), json_decode(SUPPORT_USER_ID, true));
-		    $this->set('is_support', $this->is_support);
+		// need to get the current user
+		$user_id = $this->Auth->user('id');
+
+		// get the current user info. Does this return roles on various accounts too?
+		$this->current_user = $this->User->read(null, $user_id);
+
-		    $this->is_super_admin = !empty($this->current_user['Admin']['id']);
-		    $this->set('is_super_admin', $this->is_super_admin);
-		    
+		$this->is_super_admin = !empty($this->current_user['Admin']['id']);
+		$this->set('is_super_admin', $this->is_super_admin);
+
-		    
-			(!empty($this->current_user['Admin']['id']) ? $this->is_super_admin = true : $this->is_super_admin = false);
-
-	        // Get accounts for the current user (including the ones he/she was invited to)
-	        $conditions = array(
+		// Get accounts for the current user (including the ones he/she was invited to)
+		$conditions = array(
-				'Account.account_state NOT' => array('C'/*, 'P'*/)
+			'Account.account_state NOT' => array(Account::CANCELLED)
-			);
+		);
-			if (!$this->is_support && !$this->is_super_admin) {
-				$conditions = array_merge(array(
+		if (!$this->is_super_admin) {
+			$conditions = array_merge(
+				array(
-						'AccountsUser.user_id' => $user_id
+					'AccountsUser.user_id' => $user_id
-					), $conditions);
+				),
+				$conditions
+			);
-			}
-	        
+		}
+
-		    $user_accounts_array = $this->Account->find('all', array(
+		$user_accounts_array = $this->Account->find(
+			'all',
+			array(
-	    			'conditions'	=> $conditions,
+				'conditions' => $conditions,
-	    			'fields'     	=> array(
+				'fields'     => array(
-						'Account.id',
-						'Account.company_name',
-						'Account.account_state',
-						'Subscription.subscription_type'
-	    			),
+					'Account.id',
+					'Account.company_name',
+					'Account.account_state',
+					'Subscription.subscription_type'
+				),
-	    			'joins'			=> array(
+				'joins'      => array(
-		                array(
+					array(
-		                    'table' => 'subscriptions',
+						'table'      => 'subscriptions',
-		                    'type' 	=> 'INNER',
+						'type'       => 'INNER',
-		                    'alias' => 'Subscription',
+						'alias'      => 'Subscription',
-		                    'conditions' => array(
-		                        'Subscription.id = Account.subscription_id'
-		                    )
-		                ), 
-		                array(
+						'conditions' => array(
+							'Subscription.id = Account.subscription_id'
+						)
+					),
+					array(
-		                    'table' => 'accounts_users',
+						'table'      => 'accounts_users',
-		                    'type' 	=> 'INNER',
+						'type'       => 'INNER',
-		                    'alias' => 'AccountsUser',
+						'alias'      => 'AccountsUser',
-		                    'conditions' => array(
-		                        'AccountsUser.account_id = Account.id', 
+						'conditions' => array(
+							'AccountsUser.account_id = Account.id',
-		                        'AccountsUser.account_permission_id = 2' // Creator
+							//'AccountsUser.account_permission_id = 2' // Creator
-		                    )
-		                )
-					),
+						)
+					)
+				),
-	                'order'			=> array('Account.company_name ASC'),
+				'order'      => array('Account.company_name ASC'),
-	    			'recursive' 	=> -1
+				'recursive'  => -1
-	    		));
+			)
+		);
-			
-		    $user_accounts = array();
-	        foreach ($user_accounts_array as $ua) {
+
+		$user_accounts = array();
+		foreach ($user_accounts_array as $ua) {
-	        	$user_accounts[][] = array_merge($ua['Account'], $ua['Subscription']);
+			$user_accounts[] = array_merge($ua['Account'], $ua['Subscription']);
-	        }
+		}
 
-			if ($this->params['plugin'] == 'accounts' && $this->params['controller'] == 'accounts' && in_array($this->params['action'], array('view'))) { // check to get the current account id
-				if ($this->Session->read('User.Account') != $this->params['pass'][0]) {
+		// check to get the current account id
+		if ($this->request['plugin'] == 'accounts' &&
+		    $this->request['controller'] == 'accounts' &&
+		    in_array($this->request['action'], array('view'))
+		) {
+			if ($this->Session->read('User.Account') != $this->request->params['pass'][0]) {
-					$this->Session->delete('Account.CurrentCampaign');
-					$this->Session->delete('Account.CurrentSite');
-					$this->Session->delete('Account.Campaigns');
-					$this->Session->delete('Account.Sites');
-				}
+				$this->Session->delete('Account.CurrentCampaign');
+				$this->Session->delete('Account.CurrentSite');
+				$this->Session->delete('Account.Campaigns');
+				$this->Session->delete('Account.Sites');
+			}
 
-				$this->Session->write('User.Account', $this->params['pass'][0]);
+			$this->Session->write('User.Account', $this->request->params['pass'][0]);
 
-
-			}
+		}
 
-	        $account_id = $this->Session->read('User.Account');
+		$account_id = $this->Session->read('User.Account');
-	        if (is_numeric($account_id)) { // No point in displaying a menu, unless the user is logged in, right?
-	            foreach($user_accounts as $account) { // probably a better way to handle this than a loop, but wanted to utilize the existing database call above
-	                if ($account[0]['id'] == $account_id) { // Now let's get the current account's full details
+		if (is_numeric($account_id)) {
+			// No point in displaying a menu, unless the user is logged in, right?
+			foreach ($user_accounts as $account) {
+				// probably a better way to handle this than a loop, but wanted to utilize the existing database call above
+				if ($account['id'] == $account_id) {
+					// Now let's get the current account's full details
-	                    $this->current_account = $this->Account->read(null, $account_id);
+					$this->current_account         = $this->Account->read(null, $account_id);
-	                    $this->current_account_creator = $this->Account->getCreator($this->current_account);
+					$this->current_account_creator = $this->Account->getCreator($this->current_account);
 
-	                    /*
+					/*
 
-	                    	Right now we have simple admin vs viewer permissions, only checked on the accounts controller and a few other places.
-	                    	Because of the addition of a ton more roles and the addition of other plugins, need to add some global user roles. Then per plugin,
-	                    	Roles are assigned actions they have access to. In Controller's before filter, comparison of user role and attempted action is made.
+						Right now we have simple admin vs viewer permissions, only checked on the accounts controller and a few other places.
+						Because of the addition of a ton more roles and the addition of other plugins, need to add some global user roles. Then per plugin,
+						Roles are assigned actions they have access to. In Controller's before filter, comparison of user role and attempted action is made.
 
-	                    */
+					*/
 
-
-	                    // get region data for this account
+					// get region data for this account
-	                    $region = $this->Region->find('first', array(
+					$region = $this->Region->find(
+						'first',
+						array(
-	                            'conditions' => array(
-	                                'code' => $this->current_account['Account']['region_code']
-	                            )
+							'conditions' => array(
+								'code' => $this->current_account['Account']['region_code']
+							)
-	                        ));
+						)
+					);
-	                    $this->Session->write('Account.Region', $region['Region']);
+					$this->Session->write('Account.Region', $region['Region']);
-	                    $region = $this->Session->read('Account.Region'); // Take out the ['Region'] bit from the original value
 
-	            		// build account menu
-	                    $this->account_menu_items = array();
+					// build account menu
+					$this->account_menu_items = array();
-	                    $plugins = $this->Plugin->getPluginsByAccountId($account_id);
+					$plugins                  = $this->Plugin->getPluginsByAccountId($account_id);
-	                    foreach($plugins as $plugin) {
+					foreach ($plugins as $plugin) {
-	                        if(@isset($plugin['Plugin']['order_number'])){
+						if (@isset($plugin['Plugin']['order_number'])) {
-	                            $this->account_menu_items[$plugin['Plugin']['order_number']] = $menu_items = array(
+							$this->account_menu_items[$plugin['Plugin']['order_number']] = $menu_items = array(
-	                                'action'        => $plugin['Plugin']['action'],
+								'action'     => $plugin['Plugin']['action'],
-	                                'controller'    => $plugin['Plugin']['controller'],
+								'controller' => $plugin['Plugin']['controller'],
-	                                'plugin'        => $plugin['Plugin']['plugin'],
+								'plugin'     => $plugin['Plugin']['plugin'],
-	                                'text'          => $plugin['Plugin']['name'],
+								'text'       => $plugin['Plugin']['name'],
-	                                'sub_nav'       => $plugin['Plugin']['sub_nav'],
+								'sub_nav'    => $plugin['Plugin']['sub_nav'],
-	                            );
-	                        }
-	                    }
-	                    ksort($this->account_menu_items);
+							);
+						}
+					}
+					ksort($this->account_menu_items);
 
-						//$this->account_warnings = $this->accountStatusCheck($this->current_account);
-	                    if (file_exists(ROOT_PATH . 'app/webroot/css/whitelabel/' . $this->current_account_creator['User']['id'] . '.css')) {
-							$this->custom_css = 'whitelabel/' . $this->current_account_creator['User']['id'] . '.css'; // account level will always override user level
+					$creatorId = $this->current_account_creator['User']['id'];
+					if (file_exists(ROOT_PATH . 'app/webroot/css/whitelabel/' . $creatorId . '.css')) {
+						// account level will always override user level
+						$this->custom_css      = 'whitelabel/' . $this->current_account_creator['User']['id'] . '.css';
-							$this->wiki_custom_css = 'whitelabel/' . $this->current_account_creator['User']['id'] . '-wiki.css';
+						$this->wiki_custom_css = 'whitelabel/' . $this->current_account_creator['User']['id'] . '-wiki.css';
-							$this->custom_user_id = $this->current_account_creator['User']['id'];
+						$this->custom_user_id  = $this->current_account_creator['User']['id'];
-						} else {
+					} else {
-							$this->custom_css = '';
+						$this->custom_css      = '';
-							$this->wiki_custom_css = '';
-						}
-	                }
-	            }
-	        }
+						$this->wiki_custom_css = '';
+					}
+				}
+			}
+		}
 
-
-            // Tracking page URL
+		// Tracking page URL
-            if (isset($user_id) && is_numeric($account_id)
-            	&& isset($this->current_account['Account']['account_state']) && $this->current_account['Account']['account_state'] != 'P'
+		if (isset($user_id) &&
+		    is_numeric($account_id) &&
+		    isset($this->current_account['Account']['account_state']) &&
+		    $this->current_account['Account']['account_state'] != Account::PAUSED
-            ) {
-            	// First let's check if the current URL should be tracked or skipped
+		) {
+			// First let's check if the current URL should be tracked or skipped
-            	$controller = str_replace(' ', '', ucwords(implode(' ', explode('_', $this->params->params['controller']))));
-
-            	if ($this->params->params['plugin']) {
-            		$plugin = str_replace(' ', '', ucwords(implode(' ', explode('_', $this->params->params['plugin']))));
+			$controller = Inflector::camelize($this->request->param('controller'));
+			$plugin     = $this->request->param('plugin');
+			if ($plugin) {
+				$plugin = Inflector::camelize($plugin);
-            		CakePlugin::load($plugin);
+				CakePlugin::load($plugin);
-
-            		App::uses($controller, $plugin . '.Controller');
-            	} else {
-            		App::uses($controller, 'Controller');
-            	}
+				App::uses($controller, $plugin . '.Controller');
+			} else {
+				App::uses($controller, 'Controller');
+			}
 
-            	$reflector = new ReflectionClass($controller . 'Controller');
+			$reflector  = new ReflectionClass($controller . 'Controller');
-            	$properties = $reflector->getProperties(ReflectionProperty::IS_PUBLIC);
+			$properties = $reflector->getProperties(ReflectionProperty::IS_PUBLIC);
 
-				$skipTrackingController = false;
+			$skipTrackingController = false;
-            	$skipTracking = array();
+			$skipTracking           = array();
-				foreach ($properties as $property) {
-	            	if ($property->name == 'skipTracking') {
-	            		$skipTracking = $reflector->getStaticPropertyValue('skipTracking');
-	            		break;
-	            	} elseif ($property->name == 'skipTrackingController') {
-		            	$skipTrackingController = $reflector->getStaticPropertyValue('skipTrackingController');
-	            	}
-	            }
+			foreach ($properties as $property) {
+				if ($property->name == 'skipTracking') {
+					$skipTracking = $reflector->getStaticPropertyValue('skipTracking');
+					break;
+				} elseif ($property->name == 'skipTrackingController') {
+					$skipTrackingController = $reflector->getStaticPropertyValue('skipTrackingController');
+				}
+			}
 
-            	if (!$skipTrackingController && !in_array($this->params->params['action'], $skipTracking)) {
+			if (!$skipTrackingController && !in_array($this->request->params['action'], $skipTracking)) {
-            		// It can be tracked, so let's
+				// It can be tracked, so let's
-	                $url = $this->params->url;
+				$url = $this->request->url;
 
-					if ($url && !strstr($url, 'users/login') && !strstr($url, 'users/logout')) {
-	                	// Seems like a valid URL to return to,
-	                	// so let's save it
+				if ($url && !strstr($url, 'users/login') && !strstr($url, 'users/logout')) {
+					// Seems like a valid URL to return to,
+					// so let's save it
-	                    $tracking_list = $this->TrackingUrl->find('first', array(
+					$tracking_list = $this->TrackingUrl->find(
+						'first',
+						array(
-		                        'conditions' => array(
-									'user_id = ' . $user_id
-								)
+							'conditions' => array(
+								'user_id = ' . $user_id
+							)
-		                    ));
+						)
+					);
 
-						if ($tracking_list) {
-	                    	// There's already an URL saved for the current user, so
-							// let's just update its account, URL and timestamp values
-	                        $tracking_list['TrackingUrl']['account_id'] = $account_id;
+					if ($tracking_list) {
+						// There's already an URL saved for the current user, so
+						// let's just update its account, URL and timestamp values
+						$tracking_list['TrackingUrl']['account_id'] = $account_id;
-	                        $tracking_list['TrackingUrl']['url'] = $url;
+						$tracking_list['TrackingUrl']['url']        = $url;
-	                        $tracking_list['TrackingUrl']['timestamp'] = date('Y-m-d H:i:s');
+						$tracking_list['TrackingUrl']['timestamp']  = date('Y-m-d H:i:s');
 
-	                        $this->TrackingUrl->save($tracking_list);
+						$this->TrackingUrl->save($tracking_list);
 
-	                    } else {
-	                    	// New, first URL for this user
-	                        $tracking_info = array();
+					} else {
+						// New, first URL for this user
+						$tracking_info = array();
 
-	                        $tracking_info['TrackingUrl']['user_id'] = $user_id;
+						$tracking_info['TrackingUrl']['user_id']    = $user_id;
-	                        $tracking_info['TrackingUrl']['account_id'] = $account_id;
+						$tracking_info['TrackingUrl']['account_id'] = $account_id;
-	                        $tracking_info['TrackingUrl']['url'] = $url;
+						$tracking_info['TrackingUrl']['url']        = $url;
-	                        $tracking_info['TrackingUrl']['timestamp'] = date('Y-m-d H:i:s');
+						$tracking_info['TrackingUrl']['timestamp']  = date('Y-m-d H:i:s');
 
-	                        $this->TrackingUrl->save($tracking_info);
-	                    }
-	                }
-       			}
-            }
+						$this->TrackingUrl->save($tracking_info);
+					}
+				}
+			}
+		}
 
-
+		//debug($this->Auth->user('first_name')); die();
-			// set variables for navigation display
+		// set variables for navigation display
-			$account_id = (!empty($this->current_account) ? $this->current_account['Account']['id']: '');
+		$account_id = (!empty($this->current_account) ? $this->current_account['Account']['id'] : '');
 
-			$this->set('user_name', $this->Auth->user('first_name'));
-	        $this->set('user_id', $user_id);
-	        $this->set('user_accounts', $user_accounts);
+		$this->set('user_name', $this->Auth->user('first_name'));
+		$this->set('user_id', $user_id);
+		$this->set('user_accounts', $user_accounts);
-	        $this->set('account_name', (!empty($this->current_account) ? $this->current_account['Account']['company_name'] : ''));
+		$this->set(
+			'account_name',
+			!empty($this->current_account)
+				? $this->current_account['Account']['company_name']
+				: ''
+		);
-	        $this->set('account_id', $account_id);
-	        $this->set('is_account_white_labeled', $this->UserAccount->isAccountWhiteLabeled($account_id));
+		$this->set('account_id', $account_id);
+		$this->set('is_account_white_labeled', $this->UserAccount->isAccountWhiteLabeled($account_id));
-			$this->set('account_disabled', (!empty($this->current_account) && in_array($this->current_account['Account']['account_state'], array('I', 'C', 'P')) ? true : false));
+		$this->set(
+			'account_disabled',
+			!empty($this->current_account)
+			&& in_array(
+				$this->current_account['Account']['account_state'],
+				array(Account::CANCELLED, Account::INACTIVE, Account::PAUSED)
+			)
+		);
-			$this->set('account_status',(isset($this->account_warnings) ? $this->account_warnings : ''));
+		$this->set('account_status', (isset($this->account_warnings) ? $this->account_warnings : ''));
-			$this->set('watched_tutorial', ($this->current_user ? !empty($this->current_user['User']['watched_tutorial']) : false));
+		$this->set(
+			'watched_tutorial',
+			($this->current_user ? !empty($this->current_user['User']['watched_tutorial']) : false)
+		);
-			$this->set('is_super_admin', $this->is_super_admin);
+		$this->set('is_super_admin', $this->is_super_admin);
 
 		User::store($this->Auth->user());
-    }
+	}
 
-
-    function beforeRender() { // customize the display with white labeling and account specific menu items
-
+	function beforeRender()
+	{
+		// customize the display with white labeling and account specific menu items
-    	if (@file_exists(ROOT_PATH . 'app/webroot/css/whitelabel/' . $this->Session->read('User.ucb') . '.css')) {
+		if (@file_exists(ROOT_PATH . 'app/webroot/css/whitelabel/' . $this->Session->read('User.ucb') . '.css')) {
-			$this->custom_css = 'whitelabel/' . $this->Session->read('User.ucb') . '.css'; // we want to override based on a url parameter
+			// we want to override based on a url parameter
+			$this->custom_css      = 'whitelabel/' . $this->Session->read('User.ucb') . '.css';
 			$this->wiki_custom_css = 'whitelabel/' . $this->Session->read('User.ucb') . '-wiki.css';
-			$this->custom_user_id = $this->Session->read('User.ucb');
+			$this->custom_user_id  = $this->Session->read('User.ucb');
 		}
 		if (isset($_GET['ucb']) && file_exists(ROOT_PATH . 'app/webroot/css/whitelabel/' . $_GET['ucb'] . '.css')) {
-			$this->custom_css = 'whitelabel/' . $_GET['ucb'] . '.css'; // we want to override based on a url parameter
+			// we want to override based on a url parameter
+			$this->custom_css      = 'whitelabel/' . $_GET['ucb'] . '.css';
 			$this->wiki_custom_css = 'whitelabel/' . $_GET['ucb'] . '-wiki.css';
-			$this->custom_user_id = $_GET['ucb'];
+			$this->custom_user_id  = $_GET['ucb'];
 			// set this as a session variable to be used if they come back......
-			$this->Session->write('User.ucb', $custom_user_id);
+			$this->Session->write('User.ucb', $this->custom_user_id);
 		}
 		if (isset($this->custom_user_id)) {
-			$prior_settings = $this->UsersBranding->find('first',array(
+			$prior_settings = $this->UsersBranding->find(
+				'first',
+				array(
 					'conditions' => array(
 						'user_id' => $this->custom_user_id
 					)
-				));
+				)
+			);
 
 			if ($prior_settings && $prior_settings['UsersBranding']['title_bar'] != '') {
-				$cakeDescription= __d('cake_dev', $prior_settings['UsersBranding']['title_bar']);
+				$cakeDescription = __d('cake_dev', $prior_settings['UsersBranding']['title_bar']);
 			} else {
-				$cakeDescription= __d('cake_dev', 'Choozle: The SIMPLE Programmatic Marketing Platform');
+				$cakeDescription = __d('cake_dev', 'Choozle: The SIMPLE Programmatic Marketing Platform');
 			}
 
 		} else {
-			$cakeDescription= __d('cake_dev', 'Choozle: The SIMPLE Programmatic Marketing Platform');
+			$cakeDescription = __d('cake_dev', 'Choozle: The SIMPLE Programmatic Marketing Platform');
 		}
 
 		// set variables for white labeling
@@ -340,148 +406,193 @@
 		$this->set('wiki_custom_css', $this->wiki_custom_css);
 		$this->set('cakeDescription', $cakeDescription);
 		$this->set('account_menu_items', $this->account_menu_items);
-    }
+	}
 
-    public function setReferrer() {
+	public function setReferrer()
+	{
-        $referrer_cookie = $this->Cookie->read('Referrer.id');
+		$referrer_cookie = $this->Cookie->read('Referrer.id');
-        if(!empty($referrer_cookie)) {
+		if (!empty($referrer_cookie)) {
-            $this->referrer_id = $referrer_cookie;
+			$this->referrer_id = $referrer_cookie;
 		} else {
-			$this->referrer_id = 1;	     // DEFAULT TO THE FIRST REFERRER
+			// DEFAULT TO THE FIRST REFERRER
+			$this->referrer_id = 1;
 		}
 		$this->set('referrer', $this->referrer_id);
-    }
+	}
 
-    public function isAuthorized($user) {
+	/**
+	 * @param array $user
+	 * @return bool
+	 */
+	public function isAuthorized($user)
+	{
-        return true;
-    }
+		return true;
+	}
 
-    public function accountStatusCheck($account) {
+	public function accountStatusCheck($account)
+	{
-    	$errors = array();
+		$errors = array();
 
-    	if ($account['Account']['account_state'] == 'I') {
+		if ($account['Account']['account_state'] == 'I') {
-    		if ($account['Account']['subscription_id'] == 1) { // incomplete account setup. count sites and count CC profiles. return appropriate errors
+			if ($account['Account']['subscription_id'] ==
+			    1
+			) { // incomplete account setup. count sites and count CC profiles. return appropriate errors
 				if (isset($account['AccountsPaymentProfile'])) {
 					if (count($account['AccountsPaymentProfile']) < 1) {
-						$errors['setup'][] = 'You have not added a credit card on your account yet. <a href="'.SITE_URL.'accounts/view/'.$account['Account']['id'].'?redirect=add">Click here</a> to add.';
+						$errors['setup'][] =
+							'You have not added a credit card on your account yet. <a href="' .
+							SITE_URL .
+							'accounts/view/' .
+							$account['Account']['id'] .
+							'?redirect=add">Click here</a> to add.';
 					}
 
 				} else {
-					$errors['setup'][] = 'You have not added a credit card on your account yet. <a href="'.SITE_URL.'accounts/view/'.$account['Account']['id'].'?redirect=add">Click here</a> to add.';
+					$errors['setup'][] =
+						'You have not added a credit card on your account yet. <a href="' .
+						SITE_URL .
+						'accounts/view/' .
+						$account['Account']['id'] .
+						'?redirect=add">Click here</a> to add.';
 				}
 
-    		} else { // if subscription level is > 1 or 0, which is a whole different issue....
+			} else {
+				// if subscription level is > 1 or 0, which is a whole different issue....
-    			// basically the only reason you get locked at this point is for an invalid CC charge. we're removing the web events issue
+				// basically the only reason you get locked at this point is for an invalid CC charge. we're removing the web events issue
-    			$errors['paused'][] = 'There was an error charging the credit card on your account. <a href="'.SITE_URL.'accounts/view/'.$account['Account']['id'].'?redirect=add">Click here</a> to update your card.';
+				$errors['paused'][] =
+					'There was an error charging the credit card on your account. <a href="' .
+					SITE_URL .
+					'accounts/view/' .
+					$account['Account']['id'] .
+					'?redirect=add">Click here</a> to update your card.';
-    		}
+			}
 		} elseif ($account['Account']['account_state'] == 'P') {
 			// Account is paused.
 			$errors['paused'][] = 'This account is paused.';
 		}
 
-    	return $errors;
-    }
+		return $errors;
+	}
 
-    /**
-     * Send various emails to users
-     *
+	/**
+	 * Send various emails to users
+	 *
-     **/
-    public function sendEmail($data){
+	 * @param array $data
+	 * @return bool
+	 */
+	public function sendEmail($data)
+	{
-        if (!SENDGRID_USER || !SENDGRID_PASS) {
-            // So emails are no longer sent to real, functional addresses, unless intended
-            return false;
-        }
+		if (!SENDGRID_USER || !SENDGRID_PASS) {
+			// So emails are no longer sent to real, functional addresses, unless intended
+			return false;
+		}
 
-        $senders = explode(',', CONTACT_EMAIL_ADDRESS);
-        // before we do ANYTHING, lets check the users current email settings
-        // if the settings are not RT (Real Time), we're going to store this email for sending later via cron.
-       	// we need a way to override this since I'm sure the cron will use this same function
+		$senders = explode(',', CONTACT_EMAIL_ADDRESS);
+		// before we do ANYTHING, lets check the users current email settings
+		// if the settings are not RT (Real Time), we're going to store this email for sending later via cron.
+		// we need a way to override this since I'm sure the cron will use this same function
 
-        // If the settings ARE RT, continue as usual.
+		// If the settings ARE RT, continue as usual.
 
-        // has the user opted out of this email?
-        $Email = new CakeEmail();
+		// has the user opted out of this email?
+		$Email = new CakeEmail();
-        $Email->config(array(
+		$Email->config(
+			array(
-                'host'      => 'smtp.sendgrid.net',
+				'host'      => 'smtp.sendgrid.net',
-                'port'		=> 587,
+				'port'      => 587,
-                'username'  => SENDGRID_USER,
-                'password'  => SENDGRID_PASS,
-                'client'    => 'http://www.choozle.com/',
-                'transport' => 'Smtp'
+				'username'  => SENDGRID_USER,
+				'password'  => SENDGRID_PASS,
+				'client'    => 'http://www.choozle.com/',
+				'transport' => 'Smtp'
-            ));
+			)
+		);
 		if (empty($data['category'])) {
-			$Email->addHeaders(array(
-					'X-SMTPAPI' => json_encode(array(
+			$Email->addHeaders(
+				array(
+					'X-SMTPAPI' => json_encode(
+						array(
 							'category' => $data['subject']
-						))
-				));
+						)
+					)
+				)
+			);
 		} else {
-		$Email->addHeaders(array(
-				'X-SMTPAPI' => json_encode(array(
+			$Email->addHeaders(
+				array(
+					'X-SMTPAPI' => json_encode(
+						array(
-						'category' => $data['category']
+							'category' => $data['category']
-					))
-			));
+						)
+					)
+				)
+			);
 		}
-        if (!empty($data['vars'])) {
-          $Email->viewVars($data['vars']);
-        }
-        if (isset($data['attachments']) && is_array($data['attachments'])) {
-        	$Email->attachments($data['attachments']);
-        }
-        if (!empty($data['bcc'])) {
-        	$bcc = explode(',', $data['bcc']);
-        	$Email->bcc($bcc);
-        }
-        $Email->from(SUPPORT_EMAIL_ADDRESS, 'Choozle');
+		if (!empty($data['vars'])) {
+			$Email->viewVars($data['vars']);
+		}
+		if (isset($data['attachments']) && is_array($data['attachments'])) {
+			$Email->attachments($data['attachments']);
+		}
+		if (!empty($data['bcc'])) {
+			$bcc = explode(',', $data['bcc']);
+			$Email->bcc($bcc);
+		}
+		$Email->from(SUPPORT_EMAIL_ADDRESS, 'Choozle');
-        if(is_array($data['email'])) {
+		if (is_array($data['email'])) {
-        	$Email->to($data['email']);
-        } else {
-        	$Email->to($data['email'], $data['name']);
-        }
-        $Email->subject($data['subject']);
-        $Email->emailFormat('both');
-        $Email->template($data['template'])->send();
+			$Email->to($data['email']);
+		} else {
+			$Email->to($data['email'], $data['name']);
+		}
+		$Email->subject($data['subject']);
+		$Email->emailFormat('both');
+		$Email->template($data['template'])->send();
+		return true;
-    }
+	}
 
-    public function getAllValidationErrors($errors) {
+	public function getAllValidationErrors($errors)
+	{
-    	$error_message = '';
+		$error_message = '';
-		foreach($errors as $error => $value) {
+		foreach ($errors as $error => $value) {
-	    	if (is_array($value)) {
+			if (is_array($value)) {
-	    		foreach($value as $field => $message) {
+				foreach ($value as $field => $message) {
-	    			$error_message .= $message.'<br />';
+					$error_message .= $message . '<br />';
-	    		}
-	    	} else {
+				}
+			} else {
-	    		$error_message .= $value.'<br />';
+				$error_message .= $value . '<br />';
-	    	}
-	    }
-	    return $error_message;
-    }
+			}
+		}
+		return $error_message;
+	}
 
-	public function checkForSubscriptionUpgrade($site_views = null) {
+	public function checkForSubscriptionUpgrade($site_views = null)
+	{
-		if ($this->current_account['Subscription']['subscription_type']!='R'
+		if ($this->current_account['Subscription']['subscription_type'] != 'R'
-			|| !empty($this->current_account['Account']['web_events'])
+		    || !empty($this->current_account['Account']['web_events'])
 		) {
 			// We only need upgrades for R(egular) subscriptions, 
 			// and for accounts without custom-defined web_events values
 			return false;
 		}
 
-		$sites = $this->Site->find('all', array(
+		$sites = $this->Site->find(
+			'all',
+			array(
 				'conditions' => array(
 					'Site.account_id' => $this->current_account['Account']['id'],
 				)
-			));
+			)
+		);
 
-		$pageviews = 0;
+		$pageViews = 0;
-		foreach($sites as $site) {
+		foreach ($sites as $site) {
-			$pageviews += $site['Site']['monthly_pageviews'];
+			$pageViews += $site['Site']['monthly_pageviews'];
 		}
 
 		if ($site_views > 0) {
-			$pageviews += $site_views;
+			$pageViews += $site_views;
 		}
 
-		return ($pageviews > $this->current_account['Subscription']['web_events_limit']);
+		return ($pageViews > $this->current_account['Subscription']['web_events_limit']);
 	}
 
 }
Index: app/View/Elements/loggedInNavigation.ctp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/View/Elements/loggedInNavigation.ctp	(date 1425427504000)
+++ app/View/Elements/loggedInNavigation.ctp	(revision )
@@ -27,17 +27,17 @@
 								<?php foreach ($user_accounts as $account): ?>
 									<?php
 									$active = FALSE;
-									if (!empty($account_id) && !empty($account[0]['id']) && $account_id == $account[0]['id']) {
+									if (!empty($account_id) && !empty($account['id']) && $account_id == $account['id']) {
 										$active = TRUE;
 									}
 									?>
 									<li <?php if($active) { echo 'class="active"'; } ?>>
 										
 										<?php
-										if (empty($account[0]['permission']) || $account[0]['permission']=='A') {
+										if (empty($account['permission']) || $account['permission']=='A') {
 	
 											$display_string = ''; // build the display string based on account status
-											if (in_array($account[0]['account_state'], array('I', 'P'))) {
+											if (in_array($account['account_state'], array('I', 'P'))) {
 												$display_string .= '<span class="icon-warning warning-text"></span>';
 											} else {
 												$display_string .= '<span class="icon-cog settings-link"></span>';
@@ -49,7 +49,7 @@
 													'plugin' => 'accounts',
 													'controller' => 'accounts',
 													'action' => 'view',
-													$account[0]['id'],
+													$account['id'],
 													'?' => array('redirect' => 'add')
 												),
 												array(
@@ -61,13 +61,13 @@
 											);
 										}
 										
-										if ($account[0]['subscription_type'] == 'RTB') {
+										if ($account['subscription_type'] == 'RTB') {
 											$redir_destination = 'campaigns';
 										} else {
 											$redir_destination = 'insights';
 										}
 										
-										echo $this->Html->link($account[0]['company_name'], array('plugin' => 'accounts', 'controller' => 'accounts', 'action' => 'view', $account[0]['id'], '?' => array('redirect' => $redir_destination)));
+										echo $this->Html->link($account['company_name'], array('plugin' => 'accounts', 'controller' => 'accounts', 'action' => 'view', $account['id'], '?' => array('redirect' => $redir_destination)));
 										?>
 										
 									</li>
@@ -109,4 +109,4 @@
 
 		</section>
 	</nav>
-</div>
\ No newline at end of file
+</div>
Index: app/Controller/Component/AuthorizeNetComponent.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/Controller/Component/AuthorizeNetComponent.php	(date 1425427504000)
+++ app/Controller/Component/AuthorizeNetComponent.php	(revision )
@@ -14,8 +14,8 @@
 	 * payment profile record
 	 */
 	public function getDefaultPaymentProfile($account) {
-		$this->autoRender = false;
-		$this->layout = false;
+		//$this->autoRender = false;
+		//$this->layout = false;
 		
 		if (gettype($account) == 'string') {
 			// In case this method is called from another controller
@@ -31,7 +31,7 @@
 			}
 		}
 		
-		if (!$defaultPaymentProfile) {
+		if (!$defaultPaymentProfile && isset($account['AccountsPaymentProfile'][0])) {
 			// Somehow there's no default payment profile, so we'll use the 1st one available
 			$defaultPaymentProfile = $account['AccountsPaymentProfile'][0];
 		}
Index: app/Plugin/Accounts/Controller/AccountsController.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/Plugin/Accounts/Controller/AccountsController.php	(date 1425427504000)
+++ app/Plugin/Accounts/Controller/AccountsController.php	(revision )
@@ -1,1816 +1,1717 @@
 <?php
-	class AccountsController extends AccountsAppController {
 
+App::import('Model', 'AccountPermission');
+
+/**
+ * Class AccountsController
+ *
+ * @author Alex <alex@choozle.com>
+ * @property \Account                  Account
+ * @property \Model                    AccountsExternalProviders
+ * @property \Model                    AccountsPlugins
+ * @property \Model                    AccountsUpgradedChart
+ * @property \Campaign                 Campaign
+ * @property \Channel                  Channel
+ * @property \CMSPage                  CMSPage
+ * @property \Coupon                   Coupon
+ * @property \Creative                 Creative
+ * @property \EmailNotification        EmailNotification
+ * @property \ExcelReport              ExcelReport
+ * @property \ExternalProvider         ExternalProvider
+ * @property \IBehaviorDatasource      IBehaviorDatasource
+ * @property \Payment                  Payment
+ * @property \Plugin                   Plugin
+ * @property \SimilarWeb               SimilarWeb
+ * @property \Site                     Site
+ * @property \Subscription             Subscription
+ * @property \TagQueue                 TagQueue
+ * @property \TradeDeskAccount         TradeDeskAccount
+ * @property \UpgradeableChartCategory UpgradeableChartCategory
+ * @property \User                     User
+ * @property \AccountComponent         AccountComponent
+ * @property \AuthorizeNetComponent    AuthorizeNet
+ * @property \HighchartsComponent      Highcharts
+ * @property \IBehaviorComponent       IBehavior
+ * @property \PaginatorComponent       Paginator
+ * @property \PdfComponent             Pdf
+ * @property \SendgridComponent        Sendgrid
+ * @property \TradeDeskComponent       TradeDesk
+ * @property \UserAccountComponent     UserAccount
+ */
+class AccountsController extends AccountsAppController
+{
+
-		var $uses = array(
+	var    $uses       = array(
-			'Account',
-			'AccountsExternalProviders',
-			'AccountsPlugins',
-			'AccountsUpgradedChart',
-			'Campaign',
-			'Channel',
-			'CMSPage',
-			'Coupon',
-			'Creative',
-			'EmailNotification',
-			'ExcelReport',
-			'ExternalProvider',
-			'IBehaviorDatasource',
-			'Payment',
-			'Plugin',
-			'SimilarWeb',
-			'Site',
-			'Subscription',
-			'TagQueue',
-			'TradeDeskAccount',
-			'UpgradeableChartCategory',
-			'User'
-		);
+		'Account',
+		'AccountsExternalProviders',
+		'AccountsPlugins',
+		'AccountsUpgradedChart',
+		'Campaign',
+		'Channel',
+		'CMSPage',
+		'Coupon',
+		'Creative',
+		'EmailNotification',
+		'ExcelReport',
+		'ExternalProvider',
+		'IBehaviorDatasource',
+		'Payment',
+		'Plugin',
+		'SimilarWeb',
+		'Site',
+		'Subscription',
+		'TagQueue',
+		'TradeDeskAccount',
+		'UpgradeableChartCategory',
+		'User'
+	);
-		public $components = array('AccountComponent' => array('className' => 'Account'), 'IBehavior', 'TradeDesk', 'AuthorizeNet', 'Sendgrid', 'Paginator', 'UserAccount', 'Highcharts', 'Pdf');
+	public $components = array(
+		'AccountComponent' => array('className' => 'Account'),
+		'AuthorizeNet',
+		'Highcharts',
+		'IBehavior',
+		'Paginator',
+		'Pdf',
+		'Sendgrid',
+		'TradeDesk',
+		'UserAccount'
+	);
-		
+
-		var $account;
-		//var $TradeDeskComponent;
-		var $isAdmin;
-		var $TDCredentials;
+	public $account;
+	public $isAdmin;
+	public $TDCredentials;
-		
+
-		public static $skipTracking = array('subscription_notification_list', 'get_sub_industries', 'get_coupon_details', 'payments_pdf', 'email_payments'); // Store which methods should be skipped by the URL tracking functionality
+	/**
+	 * Store which methods should be skipped by the URL tracking functionality
+	 *
+	 * @var array skipTracking
+	 */
+	public static $skipTracking = array(
+		'email_payments',
+		'get_coupon_details',
+		'get_sub_industries',
+		'payments_pdf',
+		'subscription_notification_list'
+	);
-		
+
-		function beforeFilter() {
+	public function beforeFilter()
+	{
-			parent::beforeFilter();
-			$this->Auth->allow('get_sub_industries');
+		parent::beforeFilter();
+		$this->Auth->allow('get_sub_industries');
 
-	        $account_pages = array(/*'apps','manage_permission','revoke_permission','providers',*/'upgrade', 'download_reports','payments', 'payments_pdf'); // all the ones that require an account id
-	        //$no_account_pages = array('activate_app','disconnect_app','view','index'); // the ones that pass something other than the account id
+		// all the ones that require an account id
+		$account_pages = array(
+			'download_reports',
+			'payments',
+			'payments_pdf',
+			'upgrade'
+		);
+		// the ones that pass something other than the account id
+		//$no_account_pages = array('activate_app','disconnect_app','view','index');
 
-
-	        if (isset($_GET['static']) && $_GET['static'] == 'true') {
-	        	// Don't do anything, this is just so that the AJAX methods
-	        	// would run freely
+		if (isset($_GET['static']) && $_GET['static'] == 'true') {
+			// Don't do anything, this is just so that the AJAX methods
+			// would run freely
-
-	       	} else if (isset($_GET['create']) && $_GET['create'] == 'true') { // we want to create a new account
+		} elseif (isset($_GET['create']) && $_GET['create'] == 'true') { // we want to create a new account
-				// Remove / unset the potentially set current account value
-		        $this->Session->delete('User.Account');
-		        $this->set('account_id', null);
-		        unset($this->account_menu_items);
-		        // reload current page to be absolutely sure the session is now clear
-		        if (!empty($this->current_account)) {
+			// Remove / unset the potentially set current account value
+			$this->Session->delete('User.Account');
+			$this->set('account_id', null);
+			unset($this->account_menu_items);
+			// reload current page to be absolutely sure the session is now clear
+			if (!empty($this->current_account)) {
-		        	return $this->redirect(array('plugin' => 'accounts', 'controller' => 'accounts', 'action' => 'add', '?' => array('create' => 'true')));
+				$this->redirect(
+					array(
+						'plugin'     => 'accounts',
+						'controller' => 'accounts',
+						'action'     => 'add',
+						'?'          => array('create' => 'true')
+					)
+				);
+				return;
-		        }
+			}
+		} elseif ($this->params['action'] != 'index') {
+			// we're not creating an account, lets get the account info, etc
+			// current account as defined by the app controller
+			$this->Account->id = $this->current_account['Account']['id'];
 
-			} else if($this->params['action'] != 'index') { // we're not creating an account, lets get the account info, etc
-				$this->Account->id = $this->current_account['Account']['id']; // current account as defined by the app controller
-		        
-		        if (!$this->Account->exists() && !isset($_GET['create']) && $this->Auth->loggedIn()) {
-		        	// User is trying to access an invalid account.
-		        	// Do not show this to logged-out users -- they should be sent back to login page, not shown a 404.
-		            throw new NotFoundException(__('Invalid account'));
+			if (!$this->Account->exists() && !isset($_GET['create']) && $this->Auth->loggedIn()) {
+				// User is trying to access an invalid account.
+				// Do not show this to logged-out users -- they should be sent back to login page, not shown a 404.
+				throw new NotFoundException(__('Invalid account'));
-		            return $this->redirect(array('action' => 'view', $this->Account->id));
-		        }
-	        	$this->account = $this->current_account;
-	        	
-				if (isset($this->account) && !empty($this->account)) {
-		        	$this->isAdmin = $this->AccountComponent->isAdmin();
-			        $this->set('is_admin', $this->isAdmin);
-					
-			        $this->account_warnings = $this->accountStatusCheck($this->account);
-		        	$this->set('warnings', $this->account_warnings);
-					
-		            // first, is the current account cancelled?
+			}
+			$this->account = $this->current_account;
+
+			if (isset($this->account) && !empty($this->account)) {
+				$this->isAdmin = $this->AccountComponent->isAdmin();
+				$this->set('is_admin', $this->isAdmin);
+
+				$this->account_warnings = $this->accountStatusCheck($this->account);
+				$this->set('warnings', $this->account_warnings);
+
+				// first, is the current account cancelled?
-		        	if ($this->account['Account']['account_state']=='C' && $this->request->params['action']!='index') {
-						$this->Session->setFlash('The account you\'ve just accessed has been ' . ($this->account['Account']['account_state']=='C' ? 'cancelled' : 'paused') . '. If you continue to receive this error, please visit our <a href="' . FRESHDESK_BASE_URL . '" target="_blank">Support Center</a>.', 'flash_alert');
-			        	return $this->redirect(array('action' => 'index'));
-			        	
-					} else if ($this->account['Account']['account_state']=='P' && !$this->is_super_admin && $this->request->params['action']!='index') {
-						return $this->redirect(array(
+				if ($this->account['Account']['account_state'] == Account::CANCELLED && $this->request->params['action'] != 'index') {
+					$this->Session->setFlash(
+						'The account you\'ve just accessed has been ' . ($this->account['Account']['account_state'] == Account::CANCELLED ? 'cancelled' : 'paused') . '. If you continue to receive this error, please visit our <a href="' . FRESHDESK_BASE_URL . '" target="_blank">Support Center</a>.',
+						'flash_alert'
+					);
+					$this->redirect(array('action' => 'index'));
+					return;
+				} elseif ($this->account['Account']['account_state'] == 'P' &&
+				          !$this->is_super_admin &&
+				          $this->request->params['action'] != 'index'
+				) {
+					$this->redirect(
+						array(
-								'plugin'		=> false, 
+							'plugin'     => false,
-								'controller'	=> 'pages', 
+							'controller' => 'pages',
-								'action' 		=> 'paused_account'
+							'action'     => 'paused_account'
-							));
+						)
+					);
+					return;
-					}
-					
-					// second, does the user have permissions to be here?
-			        $account_pages[] = 'add';
+				}
+
+				// second, does the user have permissions to be here?
+				$account_pages[] = 'add';
-			        if (in_array($this->params['action'], $account_pages) && !$this->isAdmin) { // make sure user has permissions
-			        	$this->Session->setFlash('You do not have permissions to view this page. If you continue to receive this error, please visit our <a href="' . FRESHDESK_BASE_URL . '" target="_blank">Support Center</a>.', 'flash_alert');
-			        	return $this->redirect(array('action' => 'view', $this->Account->id));
+				if (in_array($this->params['action'], $account_pages) &&
+				    !$this->isAdmin
+				) { // make sure user has permissions
+					$this->Session->setFlash(
+						'You do not have permissions to view this page. If you continue to receive this error, please visit our <a href="' .
+						FRESHDESK_BASE_URL .
+						'" target="_blank">Support Center</a>.',
+						'flash_alert'
+					);
+					$this->redirect(array('action' => 'view', $this->Account->id));
+					return;
-					}
-					
-					// third, has the account been inactivated? (and why?) if they've got a subscription set, we need to adjust criteria
-					if (empty($this->account_warnings) && $this->account['Account']['account_state'] == 'I'/*&& 
+				}
+
+				// third, has the account been inactivated? (and why?) if they've got a subscription set, we need to adjust criteria
+				if (empty($this->account_warnings) && $this->account['Account']['account_state'] == 'I'/*&&
-						$this->account['Account']['custom_billing'] == 'N'*/) { // check for account warnings
+						$this->account['Account']['custom_billing'] == 'N'*/
+				) { // check for account warnings
-						$this->Account->saveField('account_state', 'A');
-			        	$this->set('account_disabled', false);
-			        }
+					$this->Account->saveField('account_state', 'A');
+					$this->set('account_disabled', false);
+				}
 
-		        	// passed all of the above tests, set this account id to their session
-		        	$this->Session->write('User.Account', $this->Account->id);
-		        	$this->set('new_account_id', $this->account['Account']['id']); //$account_id
-		        	
-		        } elseif ($this->Auth->loggedIn()) {
-		        	
-		        	// User is logged in but doesn't have an account selected.
-		        	$this->Session->setFlash('Please select an account.', 'flash_alert');
+				// passed all of the above tests, set this account id to their session
+				$this->Session->write('User.Account', $this->Account->id);
+				$this->set('new_account_id', $this->account['Account']['id']); //$account_id
+
+			} elseif ($this->Auth->loggedIn()) {
+
+				// User is logged in but doesn't have an account selected.
+				$this->Session->setFlash('Please select an account.', 'flash_alert');
-		            return $this->redirect(array('action' => 'index'));
+				$this->redirect(array('action' => 'index'));
+				return;
-		        }
-	        }
-	    }
-		
+			}
+		}
+	}
+
-		
-	    public function index() {
+	public function index()
+	{
-	    	/*
-	    	if (isset($_GET['test_highcharts'])) {
-	    		// Simple test for the new highcharts component's output
-		    	$data = array(
-					array("06.17.2014",121), 
-					array("06.18.2014",107), 
-					array("06.19.2014",135), 
-					array("06.20.2014",103), 
-					array("06.21.2014",65), 
-					array("06.22.2014",46), 
-					array("06.23.2014",109), 
-					array("06.24.2014",119), 
-					array("06.25.2014",127), 
-					array("06.26.2014",108), 
-					array("06.27.2014",88), 
-					array("06.28.2014",49), 
-					array("06.29.2014",57), 
-					array("06.30.2014",124), 
-					array("07.01.2014",90), 
-					array("07.02.2014",94), 
-					array("07.03.2014",98), 
-					array("07.04.2014",43), 
-					array("07.05.2014",47), 
-					array("07.06.2014",53), 
-					array("07.07.2014",97), 
-					array("07.08.2014",101), 
-					array("07.09.2014",132), 
-					array("07.10.2014",123), 
-					array("07.11.2014",107), 
-					array("07.12.2014",43), 
-					array("07.13.2014",45), 
-					array("07.14.2014",97), 
-					array("07.15.2014",92), 
-					array("07.16.2014",99), 
-					array("07.17.2014",0)
-				);
-		    	
-				$chart = $this->Highcharts->generateChart($data, 'area');
-				if ($chart) {
-					echo '<img src="data:image/png;base64,', base64_encode($chart), '" />';
-				}
-				die();
-	    	}
-	    	*/
-	    	
+		/*
+		if (isset($_GET['test_highcharts'])) {
+			// Simple test for the new highcharts component's output
+			$data = array(
+				array("06.17.2014",121),
+				array("06.18.2014",107),
+				array("06.19.2014",135),
+				array("06.20.2014",103),
+				array("06.21.2014",65),
+				array("06.22.2014",46),
+				array("06.23.2014",109),
+				array("06.24.2014",119),
+				array("06.25.2014",127),
+				array("06.26.2014",108),
+				array("06.27.2014",88),
+				array("06.28.2014",49),
+				array("06.29.2014",57),
+				array("06.30.2014",124),
+				array("07.01.2014",90),
+				array("07.02.2014",94),
+				array("07.03.2014",98),
+				array("07.04.2014",43),
+				array("07.05.2014",47),
+				array("07.06.2014",53),
+				array("07.07.2014",97),
+				array("07.08.2014",101),
+				array("07.09.2014",132),
+				array("07.10.2014",123),
+				array("07.11.2014",107),
+				array("07.12.2014",43),
+				array("07.13.2014",45),
+				array("07.14.2014",97),
+				array("07.15.2014",92),
+				array("07.16.2014",99),
+				array("07.17.2014",0)
+			);
+
+			$chart = $this->Highcharts->generateChart($data, 'area');
+			if ($chart) {
+				echo '<img src="data:image/png;base64,', base64_encode($chart), '" />';
+			}
+			die();
+		}
+		*/
+
-	    	
-	    	// Remove / unset the potentially set current account value
-	        $this->Session->delete('User.Account');
-	        $this->set('account_id', null);
-	        unset($this->account_menu_items);
-			
+		// Remove / unset the potentially set current account value
+		$this->Session->delete('User.Account');
+		$this->set('account_id', null);
+		unset($this->account_menu_items);
+
-			
-	        // Setting the default sort rules for the custom audiences list
-	        if (!@$_GET['sort']) {
-	        	$_GET['sort'] = 'company_name';
-	        }
-	        if (!@$_GET['direction']) {
-	        	$_GET['direction'] = 'asc';
-	        }
-			
+		// Setting the default sort rules for the custom audiences list
+		if (!@$_GET['sort']) {
+			$_GET['sort'] = 'company_name';
+		}
+		if (!@$_GET['direction']) {
+			$_GET['direction'] = 'asc';
+		}
+
-			
-			$conditions = ($this->is_support || $this->is_super_admin ? array() : array(
+		$conditions = ($this->is_super_admin
+			? array()
+			: array(
-	                'AccountsUser.user_id'	=> $this->Auth->user('id')
+				'AccountsUser.user_id' => $this->Auth->user('id')
-	            ));
-   			
-            if (!empty($_GET['filter'])) {
-                $filter = $_GET['filter'];
-                $this->set('filter', $filter);
-				
+			));
+
+		if (!empty($_GET['filter'])) {
+			$filter = $_GET['filter'];
+			$this->set('filter', $filter);
+
-				$filter_array = array('OR' => array(
+			$filter_array = array(
+				'OR' => array(
-	                    'Account.company_name LIKE'	=> '%' . $filter . '%', 
+					'Account.company_name LIKE' => '%' . $filter . '%',
-	                    'Account.address_1 LIKE' 	=> '%' . $filter . '%', 
+					'Account.address_1 LIKE'    => '%' . $filter . '%',
-	                    'Account.city LIKE' 		=> '%' . $filter . '%', 
+					'Account.city LIKE'         => '%' . $filter . '%',
-	                    'User.first_name LIKE' 		=> '%' . $filter . '%', 
+					'User.first_name LIKE'      => '%' . $filter . '%',
-	                    'User.last_name LIKE' 		=> '%' . $filter . '%'
+					'User.last_name LIKE'       => '%' . $filter . '%'
-	                ));
+				)
+			);
-    			
+
-    			if ($this->is_support || $this->is_super_admin) {
+			if ($this->is_super_admin) {
-    				$conditions = $filter_array;
+				$conditions = $filter_array;
-    				
-    			} else {
-	                $conditions = array(
-	                	'AND' => array(
-							$filter_array, 
-	      					$conditions
+			} else {
+				$conditions = array(
+					'AND' => array(
+						$filter_array,
+						$conditions
-						));
+					)
+				);
-				}
-            }
-			
-			$this->Paginator->settings = array(
-	            'Account' => array(
+			}
+		}
+
+		$this->Paginator->settings = array(
+			'Account' => array(
-	                'conditions'    => array(
+				'conditions' => array(
-	                    $conditions,
-	                    'Account.account_state <> \'C\''
-	                ), 
+					$conditions,
+					'Account.account_state <> \'C\''
+				),
-					'joins'			=> array(
+				'joins'      => array(
-						array(
+					array(
-		                    'table'			=> 'accounts_users', 
+						'table'      => 'accounts_users',
-		                    'type'			=> 'INNER', 
+						'type'       => 'INNER',
-		                    'alias'			=> 'AccountsUser', 
+						'alias'      => 'AccountsUser',
-		                    'conditions'	=> array(
+						'conditions' => array(
-		                        'AccountsUser.account_id = Account.id', 
+							'AccountsUser.account_id = Account.id',
-		                        'AccountsUser.account_permission_id = 2' // Creator
-		                    )
-		                ), 
-		                array(
+						)
+					),
+					array(
-		                    'table'			=> 'users', 
+						'table'      => 'users',
-		                    'type'			=> 'INNER', 
+						'type'       => 'INNER',
-		                    'alias'			=> 'User', 
+						'alias'      => 'User',
-		                    'conditions'	=> array(
+						'conditions' => array(
-		                        'User.id = AccountsUser.user_id'
-		                    )
-		                )
-					), 
+							'User.id = AccountsUser.user_id'
+						)
+					)
+				),
-	                'limit'         => 10,
+				'limit'      => 10,
-	                'order'         => array('company_name' => 'asc'),
+				'order'      => array('company_name' => 'asc'),
-	            	'paramType'     => 'querystring'
+				'paramType'  => 'querystring'
-	            )
-	        );
+			)
+		);
-	        $accounts = $this->Paginator->paginate('Account');
+		$accounts                  = $this->Paginator->paginate('Account');
-	        $accounts_formatted = array();
+		$accounts_formatted        = array();
 
-	        foreach ($accounts as $account) {
+		foreach ($accounts as $account) {
-	            $account_formatted['id'] = $account['Account']['id'];
-	            $account_formatted['industry'] = $account['Industry']['name'];
-	            $account_formatted['region'] = $account['Region']['region'];
-	            $account_formatted['account_state'] = $account['Account']['account_state'];
-	            $account_formatted['company_name'] = $account['Account']['company_name'];
-	            $account_formatted['subscription'] = /*($account['Account']['custom_billing']=='Y' && $account['Account']['custom_subscription_price'] ? '$' . number_format($account['Account']['custom_subscription_price'], 2) : */$account['Subscription']['name']/*)*/;
-	            $account_formatted['subscription_type'] = $account['Subscription']['subscription_type'];
-	            $account_formatted['created'] = $account['Account']['created'];
-	            $account_formatted['permission'] = null;
-	            $account_formatted['warnings'] = $this->accountStatusCheck($account);
-	            $accounts_formatted[][] = $account_formatted;
+			$accounts_formatted[] = array(
+				'id'                => $account['Account']['id'],
+				'industry'          => $account['Industry']['name'],
+				'region'            => $account['Region']['region'],
+				'account_state'     => $account['Account']['account_state'],
+				'company_name'      => $account['Account']['company_name'],
+				'subscription'      => $account['Subscription']['name'],
+				'subscription_type' => $account['Subscription']['subscription_type'],
+				'created'           => $account['Account']['created'],
+				'permission'        => null,
+				'warnings'          => $this->accountStatusCheck($account),
+			);
-	        }
+		}
 
-	        $this->set('accounts', $accounts_formatted);
+		$this->set('accounts', $accounts_formatted);
 
-	        $release_notes = $this->CMSPage->find('first', array(
+		$release_notes = $this->CMSPage->find(
+			'first',
+			array(
-	                'conditions' => array(
-	                    'id' => 1
-	                )
+				'conditions' => array(
+					'id' => 1
+				)
-	            ));
+			)
+		);
-	        $this->set('release_notes', $release_notes);
+		$this->set('release_notes', $release_notes);
-	        $notes_seen = $this->CMSPage->CMSPagesUsers->find('count', array(
+		$notes_seen = $this->CMSPage->CMSPagesUsers->find(
+			'count',
+			array(
-	                'conditions' => array(
+				'conditions' => array(
-	                    'user_id' => $this->Auth->user('id'),
+					'user_id'       => $this->Auth->user('id'),
-	                    'c_m_s_page_id' => 1,
+					'c_m_s_page_id' => 1,
-	                    'stamp' => $release_notes['CMSPage']['modified']
+					'stamp'         => $release_notes['CMSPage']['modified']
-	                )
+				)
-	            ));
+			)
+		);
-	        $this->set('notes_seen', $notes_seen);
+		$this->set('notes_seen', $notes_seen);
 
-	        if (@$this->Session->read('User.ucb') > 0 || isset($_GET['ucb'])) {
-	        	$custom_css = '/css/whitelabel/' . (isset($_GET['ucb']) ? $_GET['ucb'] : $this->Session->read('User.ucb')) . '.css';
-	        } else {
-	        	$custom_css = '/css/whitelabel/' . $this->Auth->user('id') . '.css';
-	        }
-	        $this->set('custom_css', $custom_css);
-	    }
+		if (@$this->Session->read('User.ucb') > 0 || isset($_GET['ucb'])) {
+			$custom_css = '/css/whitelabel/' . (isset($_GET['ucb']) ? $_GET['ucb'] : $this->Session->read('User.ucb')) . '.css';
+		} else {
+			$custom_css = '/css/whitelabel/' . $this->Auth->user('id') . '.css';
+		}
+		$this->set('custom_css', $custom_css);
+	}
 
-
-		public function add($id = null) {
-			$terms = $this->CMSPage->find('first', array(
+	public function add($id = null)
+	{
+		$terms = $this->CMSPage->find(
+			'first',
+			array(
-					'conditions' => array(
-						'id' => 3 // Terms of Service
-					)
+				'conditions' => array(
+					'id' => 3 // Terms of Service
+				)
-				));
+			)
+		);
 
-	        $this->set('terms', $terms);
+		$this->set('terms', $terms);
 
-			$this->UserAccount->register($this->current_user, @$this->current_account);
+		$this->UserAccount->register($this->current_user, @$this->current_account);
 
-			$this->set('account_details', $this->account);
-	        $this->set('account_status', $this->account_warnings);
+		$this->set('account_details', $this->account);
+		$this->set('account_status', $this->account_warnings);
 
-	        // set variables for this page, to populate dropdowns, etc
+		// set variables for this page, to populate drop downs, etc
-	        $this->set('industries', ClassRegistry::init('Industry')->find('list', array(
+		$this->set(
+			'industries',
+			ClassRegistry::init('Industry')->find(
+				'list',
+				array(
-		            'conditions'    => array(
+					'conditions' => array(
-		                'parent_id IS NULL'
-		            ),
+						'parent_id IS NULL'
+					),
-		            'order'         => 'name'
+					'order'      => 'name'
-		        )));
+				)
+			)
+		);
-	        $sub_industries = array();
-	        if (!empty($this->account)) {
-	            // Let's get the list of sub-industries for the current account
+		$sub_industries = array();
+		if (!empty($this->account)) {
+			// Let's get the list of sub-industries for the current account
-	            $sub_industries = ClassRegistry::init('Industry')->find('list', array(
+			$sub_industries = ClassRegistry::init('Industry')->find(
+				'list',
+				array(
-		                'conditions'    => array(
+					'conditions' => array(
-		                    'parent_id' => $this->account['Account']['industry_id']
-		                ),
+						'parent_id' => $this->account['Account']['industry_id']
+					),
-		                'order'         => 'name'
+					'order'      => 'name'
-		            ));
+				)
+			);
-	        }
-	        $this->set('sub_industries', $sub_industries);
-	        $this->set('accounts', $this->Account->find('count'));
-			
-			$current_subscription_version_id = $this->AccountComponent->getCurrentSubscriptionVersionId();
+		}
+		$this->set('sub_industries', $sub_industries);
+		$this->set('accounts', $this->Account->find('count'));
+
+		$current_subscription_version_id = $this->AccountComponent->getCurrentSubscriptionVersionId();
-			$subscriptions = $this->Subscription->find('all', array(
+		$subscriptions                   = $this->Subscription->find(
+			'all',
+			array(
-					'conditions'	=> array(
+				'conditions' => array(
-						'Subscription.subscription_type'	=> 'R',
+					'Subscription.subscription_type' => 'R',
-						'Subscription.version_id'			=> $current_subscription_version_id
+					'Subscription.version_id'        => $current_subscription_version_id
-					),
+				),
-					'order'			=> array(
+				'order'      => array(
-						'Subscription.web_events_limit'		=> 'ASC',
+					'Subscription.web_events_limit' => 'ASC',
-						'Subscription.audience_size'		=> 'ASC',
+					'Subscription.audience_size'    => 'ASC',
-					),
+				),
-					'recursive'	=> 0
+				'recursive'  => 0
-				));
+			)
+		);
-			
-			$this->set('subscriptions', $subscriptions);
+
+		$this->set('subscriptions', $subscriptions);
-	        $this->set('regions', $this->Region->find('list', array( 'conditions' => array( 'Region.active' => 'Y' ))));
+		$this->set('regions', $this->Region->find('list', array('conditions' => array('Region.active' => 'Y'))));
-	        $this->set('hide_user', 1);
+		$this->set('hide_user', 1);
 
-
-			// Next let's get the current account's CC details
-			// (based on its payment profile ID)
-			$paymentProfile = null;
-			if (!empty($this->account)) {
-				$defaultPaymentProfile = $this->AuthorizeNet->getDefaultPaymentProfile($this->account);
-				if (!empty($defaultPaymentProfile['payment_profile_id'])) {
-					$response = $this->AuthorizeNet->getCustomerPaymentProfile(
-						$this->account['Account']['profile_id'],
-						$defaultPaymentProfile['payment_profile_id']
-					);
-					
-					if ($response->isOk()) {
-						$paymentProfile = $response->xml->paymentProfile;
-					}
-				}
-			}
-			$this->set('payment_profile', $paymentProfile);
+		// Next let's get the current account's CC details
+		// (based on its payment profile ID)
+		$paymentProfile = null;
+		if (!empty($this->account)) {
+			$defaultPaymentProfile = $this->AuthorizeNet->getDefaultPaymentProfile($this->account);
+			if (!empty($defaultPaymentProfile['payment_profile_id'])) {
+				$response = $this->AuthorizeNet->getCustomerPaymentProfile(
+					$this->account['Account']['profile_id'],
+					$defaultPaymentProfile['payment_profile_id']
+				);
+
+				if ($response->isOk()) {
+					$paymentProfile = $response->xml->paymentProfile;
+				}
+			}
+		}
+		$this->set('payment_profile', $paymentProfile);
 
-			// Next let's get the cheapest regular and RTB subscriptions
-			$cheapestSubscription = null;
-			foreach ($subscriptions as $subscription) {
-				if (empty($cheapestSubscription['Subscription']['monthly_price'])
+		// Next let's get the cheapest regular and RTB subscriptions
+		$cheapestSubscription = null;
+		foreach ($subscriptions as $subscription) {
+			if (empty($cheapestSubscription['Subscription']['monthly_price'])
-					|| $subscription['Subscription']['monthly_price'] < $cheapestSubscription['Subscription']['monthly_price']
+			    ||
+			    $subscription['Subscription']['monthly_price'] < $cheapestSubscription['Subscription']['monthly_price']
-				) {
-					$cheapestSubscription = $subscription;
-				}
-			}
-			$this->set('cheapest_subscription', $cheapestSubscription);
+			) {
+				$cheapestSubscription = $subscription;
+			}
+		}
+		$this->set('cheapest_subscription', $cheapestSubscription);
 
-			$rtbSubscription = $this->Subscription->find('first', array(
+		$rtbSubscription = $this->Subscription->find(
+			'first',
+			array(
-					'conditions'	=> array(
+				'conditions' => array(
-						'Subscription.subscription_type'	=> 'RTB',
+					'Subscription.subscription_type' => 'RTB',
-						'Subscription.version_id'			=> $current_subscription_version_id
+					'Subscription.version_id'        => $current_subscription_version_id
-					)
+				)
-				));
+			)
+		);
-			$this->set('rtb_subscription', $rtbSubscription);
+		$this->set('rtb_subscription', $rtbSubscription);
 
-
-			// Let's get the current account's subscription coupon code, if existent
-			if ($this->current_account['Coupon']) {
-				foreach ($this->current_account['Coupon'] as $coupon) {
-					if (!is_null($coupon['end_date'])) {
-						$isExpired = strtotime($coupon['end_date']) <= time();
-					} else {
-						$isExpired = false;
-					}
-					if (!$isExpired && $coupon['AccountsCoupon']['active'] && $coupon['is_active']) {
-						$this->set('coupon', $coupon);
-						break; // We assume there's only one subscription coupon code per account
-					}
-				}
-			}
+		// Let's get the current account's subscription coupon code, if existent
+		if ($this->current_account['Coupon']) {
+			foreach ($this->current_account['Coupon'] as $coupon) {
+				if (!is_null($coupon['end_date'])) {
+					$isExpired = strtotime($coupon['end_date']) <= time();
+				} else {
+					$isExpired = false;
+				}
+				if (!$isExpired && $coupon['AccountsCoupon']['active'] && $coupon['is_active']) {
+					$this->set('coupon', $coupon);
+					break; // We assume there's only one subscription coupon code per account
+				}
+			}
+		}
 
-			// we also display information about subscription payments on this page
+		// we also display information about subscription payments on this page
-	        $payment = $this->Payment->find('first', array(
+		$payment = $this->Payment->find(
+			'first',
+			array(
-		            'conditions' => array(
+				'conditions' => array(
-		                'Payment.account_id' 		=> $this->Account->id,
+					'Payment.account_id'      => $this->Account->id,
-		                'Payment.payment_type_id'	=> 2
+					'Payment.payment_type_id' => 2
-		            ),
+				),
-		            'order' => array(
+				'order'      => array(
-		                'Payment.added_date DESC'
-		            )
+					'Payment.added_date DESC'
+				)
-		        ));
+			)
+		);
-	        if (isset($payment['Payment'])) {
-	            $subscription_payment = array(
+		if (isset($payment['Payment'])) {
+			$subscription_payment = array(
-	                'date' => strtotime($payment['Payment']['added_date']),
+				'date'       => strtotime($payment['Payment']['added_date']),
-	                'cost' => abs($this->current_account['Subscription']['monthly_price']),
+				'cost'       => abs($this->current_account['Subscription']['monthly_price']),
-	                'web_events' => $payment['Payment']['web_event_count']
-	            );
-	            $this->set('subscription_payment', $subscription_payment);
-	        }
-	    }
+				'web_events' => $payment['Payment']['web_event_count']
+			);
+			$this->set('subscription_payment', $subscription_payment);
+		}
+	}
 
-
-	    public function view($id = null) {
+	public function view($id = null)
+	{
-	        // the view page manages a ton of redirects to specific pages within the account
-	        $func_get_args = func_get_args();
-	        array_shift($func_get_args);
+		// the view page manages a ton of redirects to specific pages within the account
+		$func_get_args = func_get_args();
+		array_shift($func_get_args);
-	        if (count($func_get_args)>0) { // We probably have a path to go to, so let's
+		if (count($func_get_args) > 0) {
+			// We probably have a path to go to, so let's
-	            $redirect_url = array();
+			$redirect_url = array();
-	            for ($i=0; $i<count($func_get_args); $i++) {
+			for ($i = 0; $i < count($func_get_args); $i++) {
-	                if ($i==0) { // This should be the plugin
+				if ($i == 0) {
+					// This should be the plugin
-	                    $redirect_url['plugin'] = $func_get_args[$i];
+					$redirect_url['plugin'] = $func_get_args[$i];
-	                } else if ($i==1) { // This should be the controller
+				} elseif ($i == 1) {
+					// This should be the controller
-	                    $redirect_url['controller'] = $func_get_args[$i];
+					$redirect_url['controller'] = $func_get_args[$i];
-	                } else if ($i==2) { // This should be the action
+				} elseif ($i == 2) {
+					// This should be the action
-	                    $redirect_url['action'] = $func_get_args[$i];
+					$redirect_url['action'] = $func_get_args[$i];
-	                } else { // These are the rest of the URL's params
+				} else {
+					// These are the rest of the URL's params
-	                    $redirect_url[] = $func_get_args[$i];
-	                }
-	            }
+					$redirect_url[] = $func_get_args[$i];
+				}
+			}
-	            return $this->redirect($redirect_url);
-	            die();
+			$this->redirect($redirect_url);
+			return;
-	        }
-			// not sure what these redirects are for, vs the ones above........ surely there must be some overlap?
-	        $this->AccountComponent->accountRedirects();
+		}
+		// not sure what these redirects are for, vs the ones above........ surely there must be some overlap?
+		$this->AccountComponent->accountRedirects();
 
-	        // we also display informatino about subscription payments on this page
+		// we also display informatino about subscription payments on this page
-	        $payment = $this->Payment->find('first', array(
+		$payment = $this->Payment->find(
+			'first',
+			array(
-		            'conditions' => array(
+				'conditions' => array(
-		                'Payment.account_id' 		=> $this->Account->id,
+					'Payment.account_id'      => $this->Account->id,
-		                'Payment.payment_type_id'	=> 2
+					'Payment.payment_type_id' => 2
-		            ),
+				),
-		            'order' => array(
+				'order'      => array(
-		                'Payment.added_date DESC'
-		            )
+					'Payment.added_date DESC'
+				)
-		        ));
+			)
+		);
-	        if (isset($payment['Payment'])) {
-	            $subscription_payment = array(
+		if (isset($payment['Payment'])) {
+			$subscription_payment = array(
-	                'date' => strtotime($payment['Payment']['added_date']),
+				'date'       => strtotime($payment['Payment']['added_date']),
-	                'cost' => abs($this->current_account['Subscription']['monthly_price']),
+				'cost'       => abs($this->current_account['Subscription']['monthly_price']),
-	                'web_events' => $payment['Payment']['web_event_count']
-	            );
-	            $this->set('subscription_payment', $subscription_payment);
-	        }
-	    }
+				'web_events' => $payment['Payment']['web_event_count']
+			);
+			$this->set('subscription_payment', $subscription_payment);
+		}
+	}
 
-		public function confirmation() {
+	public function confirmation()
+	{
-			// Calculate the account's subscription cost to submit with Google Analytics'
-			// eCommerce transaction
-			$revenue = $this->current_account['Subscription']['monthly_price'];
+		// Calculate the account's subscription cost to submit with Google Analytics'
+		// eCommerce transaction
+		$revenue = $this->current_account['Subscription']['monthly_price'];
-			$coupon = $this->AccountComponent->get_coupon_for_account($this->current_account);
+		$coupon  = $this->AccountComponent->get_coupon_for_account($this->current_account);
-			if (!empty($coupon)) {
-				if ($coupon['amount_type'] == 1) {
-					$revenue -= $coupon['amount'];
-				} else if ($coupon['amount_type'] == 2) {
-					$revenue *= ((100 - $coupon['amount']) / 100);
-				}
-				if ($revenue < 0) {
-					$revenue = 0;
-				}
-			}
-			$this->set('revenue', number_format($revenue, 2, '.', ""));
-			$this->set('gaEcommerce', true);
-			
-			$this->set('subscription', $this->current_account['Subscription']);
-			
-			$pardot_data = array(
+		if (!empty($coupon)) {
+			if ($coupon['amount_type'] == 1) {
+				$revenue -= $coupon['amount'];
+			} else if ($coupon['amount_type'] == 2) {
+				$revenue *= ((100 - $coupon['amount']) / 100);
+			}
+			if ($revenue < 0) {
+				$revenue = 0;
+			}
+		}
+		$this->set('revenue', number_format($revenue, 2, '.', ""));
+		$this->set('gaEcommerce', true);
+
+		$this->set('subscription', $this->current_account['Subscription']);
+
+		$pardot_data = array(
-			    'first_name'	=> $this->current_user['User']['first_name'],
+			'first_name' => $this->current_user['User']['first_name'],
-			    'last_name'		=> $this->current_user['User']['last_name'],
+			'last_name'  => $this->current_user['User']['last_name'],
-			    'email'			=> $this->current_user['User']['email'],
+			'email'      => $this->current_user['User']['email'],
-			    'company'		=> $this->current_account['Account']['company_name']
+			'company'    => $this->current_account['Account']['company_name']
-			);
-			
-			$query_string = http_build_query($pardot_data);
-			
-			$this->set('pardot_query_string', $query_string);
-		}
+		);
+
+		$query_string = http_build_query($pardot_data);
+
+		$this->set('pardot_query_string', $query_string);
+	}
 
-	    public function invite() {
+	public function invite()
+	{
-	        if ($this->request->is('post')) {
-	            // Let's get the list of already invited users and emails
+		if ($this->request->is('post')) {
+			// Let's get the list of already invited users and emails
-	            $invited_users = $this->Account->AccountsUser->find('all', array(
+			$invited_users  = $this->Account->AccountsUser->find(
+				'all',
+				array(
-	                    'conditions' => array(
+					'conditions' => array(
-	                        'account_id'    => $this->account['Account']['id']
+						'account_id' => $this->account['Account']['id']
-	                    )
+					)
-	                ));
-	            $invited_emails = $this->Account->AccountsEmail->find('all', array(
+				)
+			);
+			$invited_emails = $this->Account->AccountsEmail->find(
+				'all',
+				array(
-	                    'conditions' => array(
+					'conditions' => array(
-	                        'account_id'    => $this->account['Account']['id']
+						'account_id' => $this->account['Account']['id']
-	                    )
+					)
-	                ));
+				)
+			);
 
-
-	            // Let's check if the currently submitted email address belongs to an existing user
+			// Let's check if the currently submitted email address belongs to an existing user
-	            $user = $this->User->find('first', array(
+			$user = $this->User->find(
+				'first',
+				array(
-	                    'conditions' => array(
-	                        'email' => $this->request->data['AccountsEmail']['email']
-	                    )
+					'conditions' => array(
+						'email' => $this->request->data['AccountsEmail']['email']
+					)
-	                ));
+				)
+			);
 
-	            if ($user) { // It does
+			if ($user) {
+				// It does
-	                if ($user['User']['id'] == $this->Auth->user('id')) { // You cannot invite yourself!
-	                    $this->Session->setFlash('You cannot invite yourself to an account!', 'flash_alert');
+				if ($user['User']['id'] == $this->Auth->user('id')) { // You cannot invite yourself!
+					$this->Session->setFlash('You cannot invite yourself to an account!', 'flash_alert');
-	                    return $this->redirect(array(
+					$this->redirect(
+						array(
-	                            'action' => 'view',
-	                            $this->account['Account']['id']
+							'action' => 'view',
+							$this->account['Account']['id']
-	                        ));
+						)
+					);
+					return;
-	                }
+				}
 
-	                // Let's check if the currently submitted user has already been invited to the current account
+				// Let's check if the currently submitted user has already been invited to the current account
-	                $invitation = $this->Account->AccountsUser->find('first', array(
+				$invitation = $this->Account->AccountsUser->find(
+					'first',
+					array(
-	                        'conditions' => array(
+						'conditions' => array(
-	                            'account_id'    => $this->account['Account']['id'],
+							'account_id' => $this->account['Account']['id'],
-	                            'user_id'       => $user['User']['id']
+							'user_id'    => $user['User']['id']
-	                        )
+						)
-	                    ));
+					)
+				);
 
-	                if ($invitation || $this->current_account_creator['User']['id']==$user['User']['id']) { // It already exists (or the current user is already the account's owner)
+				if ($invitation ||
+				    $this->current_account_creator['User']['id'] == $user['User']['id']
+				) { // It already exists (or the current user is already the account's owner)
-	                	$this->Session->setFlash('User already invited to this account!', 'flash_alert');
+					$this->Session->setFlash('User already invited to this account!', 'flash_alert');
 
-	                } else {
+				} else {
-	                    // Finally let's check if the current user is the support one, that the account doesn't already have an already existing owner
-	                    // (different than the support one), and that there's no invited email with an "O(wner)" status
+					// Finally let's check if the current user is the support one, that the account doesn't already
+					// have an already existing owner (different than the support one), and that there's no invited
+					// email with an "O(wner)" status
-	                    $no_invited_email_owner = true;
-	                    foreach ($invited_emails as $invited_email) {
+					$no_invited_email_owner = true;
+					foreach ($invited_emails as $invited_email) {
-	                        if ($invited_email['AccountsEmail']['account_permission_id']=='2') { // Owner
+						if ($invited_email['AccountsEmail']['account_permission_id'] == AccountPermission::CREATOR) {
-	                            $no_invited_email_owner = false;
-	                        }
-	                    }
+							$no_invited_email_owner = false;
+						}
+					}
 
-	                    // If the current user is the support user and the current account owner is the support user 
-	                    // and there aren't any existing users or emails for the account, 
+					// If the current user is the support user and the current account owner is the support user
+					// and there aren't any existing users or emails for the account,
-	                    // the submitted user becomes the accout's owner
-	                    if (($this->is_support || $this->is_super_admin) && 
+					// the submitted user becomes the account's owner
+					if ($this->is_super_admin &&
-	                  		$this->current_account_creator['User']['id']==$this->Auth->user('id') &&
+					    $this->current_account_creator['User']['id'] == $this->Auth->user('id') &&
-							$no_invited_email_owner && $this->request->data['AccountsEmail']['account_permission_id']=='1') { // Admin
+					    $no_invited_email_owner &&
+					    $this->request->data['AccountsEmail']['account_permission_id'] == AccountPermission::ADMIN
+					) {
+						// Admin
-							
-	                        // We're fine, so we'll just set the currently invited user as the account's owner
+
+						// We're fine, so we'll just set the currently invited user as the account's owner
-	                        $this->Account->updateAll(array(
+						$this->Account->updateAll(
+							array(
-	                                'user_id' => $user['User']['id']
+								'user_id' => $user['User']['id']
-	                            ), array(
+							),
+							array(
-	                                'Account.id' => $this->account['Account']['id']
+								'Account.id' => $this->account['Account']['id']
-	                            ));
+							)
+						);
 
-	                        // Let's send a confirmation email to this matching user
+						// Let's send a confirmation email to this matching user
-	                        $this->sendEmail(array(
+						$this->sendEmail(
+							array(
-	                                'vars' => array(
+								'vars'     => array(
-	                                    'recipient'     => $user['User']['first_name'] . ' ' . $user['User']['last_name'],
+									'recipient'  => $user['User']['first_name'] . ' ' . $user['User']['last_name'],
-	                                    'permission'    => ($this->request->data['AccountsEmail']['account_permission_id']=='1' ? 'Admin' : 'Viewer'),
+									'permission' => ($this->request->data['AccountsEmail']['account_permission_id'] ==
+									                 '1' ? 'Admin' : 'Viewer'),
-	                                    'account'       => $this->account['Account']['company_name'],
+									'account'    => $this->account['Account']['company_name'],
-	                                    'creator'       => $this->current_account_creator['User']['first_name'] . ' ' . $this->current_account_creator['User']['last_name'],
+									'creator'    =>
+										$this->current_account_creator['User']['first_name'] .
+										' ' .
+										$this->current_account_creator['User']['last_name'],
-	                                    'link'          => 'https:' . SITE_URL . 'users/login'
+									'link'       => 'https:' . SITE_URL . 'users/login'
-	                                ),
+								),
-	                                'email'     => $user['User']['email'],
+								'email'    => $user['User']['email'],
-	                                'name'      => $user['User']['first_name'] . ' ' . $user['User']['last_name'],
+								'name'     => $user['User']['first_name'] . ' ' . $user['User']['last_name'],
-	                                'subject'   => 'Account Invitation',
+								'subject'  => 'Account Invitation',
-	                                'template'  => 'invitation'
+								'template' => 'invitation'
-	                            ));
+							)
+						);
-							
+
-	                        $this->Session->setFlash('The currently invited user has been successfully set as the account\'s owner.', 'flash_success');
+						$this->Session->setFlash(
+							'The currently invited user has been successfully set as the account\'s owner.',
+							'flash_success'
+						);
 
-	                    } else {
-	                        // We don't need to insert the accounts-emails record, since the currently invited user already exists
-	                        unset($this->request->data['AccountsEmail']['email']);
-	                        $this->request->data['AccountsEmail']['user_id'] = $user['User']['id'];
+					} else {
+						// We don't need to insert the accounts-emails record, since the currently invited user already exists
+						unset($this->request->data['AccountsEmail']['email']);
+						$this->request->data['AccountsEmail']['user_id'] = $user['User']['id'];
 
-	                        $this->Account->AccountsUser->create();
-	                        if ($this->Account->AccountsUser->save($this->request->data['AccountsEmail'])) {
+						$this->Account->AccountsUser->create();
+						if ($this->Account->AccountsUser->save($this->request->data['AccountsEmail'])) {
 
-	                            // Let's send a confirmation email to this matching user
+							// Let's send a confirmation email to this matching user
-	                            $this->sendEmail(array(
+							$this->sendEmail(
+								array(
-	                                    'vars' => array(
+									'vars'     => array(
-	                                        'recipient'     => $user['User']['first_name'] . ' ' . $user['User']['last_name'],
+										'recipient'  => $user['User']['first_name'] . ' ' . $user['User']['last_name'],
-	                                        'permission'    => ($this->request->data['AccountsEmail']['account_permission_id']=='1' ? 'Admin' : 'Viewer'),
+										'permission' => ($this->request->data['AccountsEmail']['account_permission_id'] ==
+										                 '1' ? 'Admin' : 'Viewer'),
-	                                        'account'       => $this->account['Account']['company_name'],
+										'account'    => $this->account['Account']['company_name'],
-	                                        'creator'       => $this->current_account_creator['User']['first_name'] . ' ' . $this->current_account_creator['User']['last_name'],
+										'creator'    =>
+											$this->current_account_creator['User']['first_name'] .
+											' ' .
+											$this->current_account_creator['User']['last_name'],
-	                                        'link'          => 'https:' . SITE_URL . 'users/login'
+										'link'       => 'https:' . SITE_URL . 'users/login'
-	                                    ),
+									),
-	                                    'email'     => $user['User']['email'],
+									'email'    => $user['User']['email'],
-	                                    'name'      => $user['User']['first_name'] . ' ' . $user['User']['last_name'],
+									'name'     => $user['User']['first_name'] . ' ' . $user['User']['last_name'],
-	                                    'subject'   => 'Account Invitation',
+									'subject'  => 'Account Invitation',
-	                                    'template'  => 'invitation'
+									'template' => 'invitation'
-	                                ));
+								)
+							);
 
-	                            $this->Session->setFlash('You have successfully sent the invitation!', 'flash_success');
+							$this->Session->setFlash('You have successfully sent the invitation!', 'flash_success');
 
-	                        } else {
+						} else {
-	                            $this->Session->setFlash('Unfortunately, the invitation could not be sent. If you continue to receive this error, please visit our <a href="' . FRESHDESK_BASE_URL . '" target="_blank">Support Center</a>.', 'flash_alert');
+							$this->Session->setFlash(
+								'Unfortunately, the invitation could not be sent. If you continue to receive this error, please visit our <a href="' .
+								FRESHDESK_BASE_URL .
+								'" target="_blank">Support Center</a>.',
+								'flash_alert'
+							);
-	                        }
-	                    }
-	                }
+						}
+					}
+				}
 
-	            } else { // Let's check if the currently submitted email address has already been invited to the current account
+			} else { // Let's check if the currently submitted email address has already been invited to the current account
-	                $invitation = $this->Account->AccountsEmail->find('first', array(
+				$invitation = $this->Account->AccountsEmail->find(
+					'first',
+					array(
-	                        'conditions' => array(
+						'conditions' => array(
-	                            'account_id'    => $this->account['Account']['id'],
+							'account_id' => $this->account['Account']['id'],
-	                            'email'         => $this->request->data['AccountsEmail']['email']
+							'email'      => $this->request->data['AccountsEmail']['email']
-	                        )
+						)
-	                    ));
+					)
+				);
 
-	                if ($invitation) {
-	                    // It already exists
-	                    $this->Session->setFlash('Email already invited to this account!', 'flash_alert');
+				if ($invitation) {
+					// It already exists
+					$this->Session->setFlash('Email already invited to this account!', 'flash_alert');
 
-	                } else {
-	                    // First let's see if there are any other users or emails (except the support one) attached to the current account
-	                    // If not, we'll insert this new email as the account's owner, after its registration
-	                    $no_invited_email_owner = true;
-	                    foreach ($invited_emails as $invited_email) {
+				} else {
+					// First let's see if there are any other users or emails (except the support one) attached to the current account
+					// If not, we'll insert this new email as the account's owner, after its registration
+					$no_invited_email_owner = true;
+					foreach ($invited_emails as $invited_email) {
-	                        if ($invited_email['AccountsEmail']['account_permission_id']=='2') { // Owner
+						if ($invited_email['AccountsEmail']['account_permission_id'] == '2') { // Owner
-	                            $no_invited_email_owner = false;
-	                        }
-	                    }
-						
+							$no_invited_email_owner = false;
+						}
+					}
+
-	                    if (($this->is_support || $this->is_super_admin) && 
+					if ($this->is_super_admin &&
-	                  		$this->current_account_creator['User']['id']==$this->Auth->user('id') && 
+					    $this->current_account_creator['User']['id'] == $this->Auth->user('id') &&
-							$no_invited_email_owner && $this->request->data['AccountsEmail']['account_permission_id']=='1') { // Admin
+					    $no_invited_email_owner &&
+					    $this->request->data['AccountsEmail']['account_permission_id'] == AccountPermission::ADMIN
+					) {
-	                        // There are no other invited users or emails to this account, and the (currently logged in) support / super-admin user
-	                        // is the account's owner - so we'll set this new email invitee as the new account's owner,
-	                        // after he/she'll register
+						// There are no other invited users or emails to this account, and the (currently logged in) support / super-admin user
+						// is the account's owner - so we'll set this new email invitee as the new account's owner,
+						// after he/she'll register
-	                        $this->request->data['AccountsEmail']['account_permission_id'] = '2'; // Owner
+						$this->request->data['AccountsEmail']['account_permission_id'] = AccountPermission::CREATOR;
-	                    }
-						
-	                    // We need to insert a record in the accounts-emails table, because the currently submitted email address doesn't belong to any existing user
-	                    // As soon as the currently submitted email address would be used by a new registering user, we'll move this record into the accounts-users table
-	                    $hash = md5(uniqid() . time());
+					}
+
+					// We need to insert a record in the accounts-emails table, because the currently submitted email address doesn't belong to any existing user
+					// As soon as the currently submitted email address would be used by a new registering user, we'll move this record into the accounts-users table
+					$hash = md5(uniqid() . time());
 
-	                    $this->request->data['AccountsEmail']['sent_date'] = date('Y-m-d H:i:s');
+					$this->request->data['AccountsEmail']['sent_date']   = date('Y-m-d H:i:s');
-	                    $this->request->data['AccountsEmail']['unique_hash'] = $hash;
+					$this->request->data['AccountsEmail']['unique_hash'] = $hash;
 
-	                    $this->Account->AccountsEmail->create();
-	                    if ($this->Account->AccountsEmail->save($this->request->data)) {
-	                        // Let's send a confirmation email to this email address
+					$this->Account->AccountsEmail->create();
+					if ($this->Account->AccountsEmail->save($this->request->data)) {
+						// Let's send a confirmation email to this email address
 
-	                        $this->sendEmail(array(
+						$this->sendEmail(
+							array(
-	                                'vars' => array(
+								'vars'     => array(
-	                                    'permission'    => ($this->request->data['AccountsEmail']['account_permission_id']=='1' ? 'Admin' : 'Viewer'),
+									'permission' => ($this->request->data['AccountsEmail']['account_permission_id'] ==
+									                 '1' ? 'Admin' : 'Viewer'),
-	                                    'account'       => $this->account['Account']['company_name'],
+									'account'    => $this->account['Account']['company_name'],
-	                                    'creator'       => $this->current_account_creator['User']['first_name'] . ' ' . $this->current_account_creator['User']['last_name'],
+									'creator'    =>
+										$this->current_account_creator['User']['first_name'] .
+										' ' .
+										$this->current_account_creator['User']['last_name'],
-	                                    'link'          => 'https:' . SITE_URL . 'users/invite?e='.$hash
+									'link'       => 'https:' . SITE_URL . 'users/invite?e=' . $hash
-	                                ),
+								),
-	                                'email'     => $this->request->data['AccountsEmail']['email'],
+								'email'    => $this->request->data['AccountsEmail']['email'],
-	              					'name'      => $this->request->data['AccountsEmail']['email'],
+								'name'     => $this->request->data['AccountsEmail']['email'],
-	                                'subject'   => 'Account Invitation',
+								'subject'  => 'Account Invitation',
-	                                'template'  => 'invitation'
+								'template' => 'invitation'
-	                            ));
+							)
+						);
 
-	                        $this->Session->setFlash('You have successfully sent the invitation!', 'flash_success');
+						$this->Session->setFlash('You have successfully sent the invitation!', 'flash_success');
 
-	                    } else {
+					} else {
-	                        $this->Session->setFlash('Unfortunately, the invitation could not be sent. If you continue to receive this error, please visit our <a href="' . FRESHDESK_BASE_URL . '" target="_blank">Support Center</a>.', 'flash_alert');
+						$this->Session->setFlash(
+							'Unfortunately, the invitation could not be sent. If you continue to receive this error, please visit our <a href="' .
+							FRESHDESK_BASE_URL .
+							'" target="_blank">Support Center</a>.',
+							'flash_alert'
+						);
-	                    }
-	                }
-	            }
+					}
+				}
+			}
 
-	            return $this->redirect(array(
+			$this->redirect(
+				array(
-	                    'action' => 'view',
-	                    $this->account['Account']['id']
+					'action' => 'view',
+					$this->account['Account']['id']
-	                ));
+				)
+			);
+			return;
-	        }
-	    }
+		}
+	}
 
-
-	 	// DO WE USE THIS ANYMORE??
+	// DO WE USE THIS ANYMORE??
-	    public function manage_permission() {
+	public function manage_permission()
+	{
-	        if ($this->request->is('post') && $this->isAdmin) {
+		if ($this->request->is('post') && $this->isAdmin) {
-	          if (isset($this->request->data['Account']['revoke_access']) && $this->request->data['Account']['revoke_access'] == 1) {
+			if (isset($this->request->data['Account']['revoke_access']) &&
+			    $this->request->data['Account']['revoke_access'] == 1
+			) {
-	          	if ($this->request->data['Account']['invitation_type'] == 'E') { // user hasn't accepted yet
+				if ($this->request->data['Account']['invitation_type'] == 'E') { // user hasn't accepted yet
-	          		$this->Account->AccountsEmail->deleteAll(array('AccountsEmail.id' => $this->request->data['Account']['invitation_id'],'AccountsEmail.account_id' => $this->request->data['Account']['account_id']), false);
+					$this->Account->AccountsEmail->deleteAll(
+						array(
+							'AccountsEmail.id'         => $this->request->data['Account']['invitation_id'],
+							'AccountsEmail.account_id' => $this->request->data['Account']['account_id']
+						),
+						false
+					);
-	 	} else if ($this->request->data['Account']['invitation_type'] == 'U') { // user has accepted
+				} else if ($this->request->data['Account']['invitation_type'] == 'U') { // user has accepted
-	          		$this->Account->AccountsUser->deleteAll(array('AccountsUser.id' => $this->request->data['Account']['invitation_id'],'AccountsUser.account_id' => $this->request->data['Account']['account_id']), false);
+					$this->Account->AccountsUser->deleteAll(
+						array(
+							'AccountsUser.id'         => $this->request->data['Account']['invitation_id'],
+							'AccountsUser.account_id' => $this->request->data['Account']['account_id']
+						),
+						false
+					);
-	          	}
-	          } else { // update access info
-	          	if ($this->request->data['Account']['invitation_type'] == 'E') { // user hasn't accepted yet
-	          		$this->Account->AccountsEmail->id = $this->request->data['Account']['invitation_id'];
+				}
+			} else { // update access info
+				if ($this->request->data['Account']['invitation_type'] == 'E') { // user hasn't accepted yet
+					$this->Account->AccountsEmail->id = $this->request->data['Account']['invitation_id'];
-	              $this->Account->AccountsEmail->saveField('account_permission_id', $this->request->data['Account']['account_permission_id']);
+					$this->Account->AccountsEmail->saveField(
+						'account_permission_id',
+						$this->request->data['Account']['account_permission_id']
+					);
-	          	} else if ($this->request->data['Account']['invitation_type'] == 'U') { // user has accepted
-	          		$this->Account->AccountsUser->id = $this->request->data['Account']['invitation_id'];
+				} else if ($this->request->data['Account']['invitation_type'] == 'U') { // user has accepted
+					$this->Account->AccountsUser->id = $this->request->data['Account']['invitation_id'];
-	              	$this->Account->AccountsUser->saveField('account_permission_id', $this->request->data['Account']['account_permission_id']);
+					$this->Account->AccountsUser->saveField(
+						'account_permission_id',
+						$this->request->data['Account']['account_permission_id']
+					);
-	          	}
+				}
 
-	          }
-	        }
+			}
+		}
-	        return $this->redirect(array('action' => 'view', $this->request->data['Account']['account_id']));
+		$this->redirect(array('action' => 'view', $this->request->data['Account']['account_id']));
+		return;
-	    }
+	}
 
-
-
-	 	// DO WE USE THIS ANYMORE??
+	// DO WE USE THIS ANYMORE??
-	    public function revoke_permission() {
+	public function revoke_permission()
+	{
-	        if ($this->request->is('post') && $this->isAdmin) {
-	            if ($this->request->data['Account']['invitation_type'] == 'U') {
+		if ($this->request->is('post') && $this->isAdmin) {
+			if ($this->request->data['Account']['invitation_type'] == 'U') {
-	                $this->Account->AccountsUser->delete($this->request->data['Account']['invitation_id']); // User invitation
+				$this->Account->AccountsUser->delete(
+					$this->request->data['Account']['invitation_id']
+				); // User invitation
-	            } else if ($this->request->data['Account']['invitation_type'] == 'E') {
+			} else if ($this->request->data['Account']['invitation_type'] == 'E') {
-	                $this->Account->AccountsEmail->delete($this->request->data['Account']['invitation_id']); // Email invitation
+				$this->Account->AccountsEmail->delete(
+					$this->request->data['Account']['invitation_id']
+				); // Email invitation
-	            }
-	        }
+			}
+		}
-	        return $this->redirect(array('action' => 'view', $this->request->data['Account']['account_id']));
+		$this->redirect(array('action' => 'view', $this->request->data['Account']['account_id']));
+		return;
-	    }
+	}
 
-	    public function download_reports($id = null) {
-			// We're no longer allowing users to download their own reports.
-			/*
-	        if(!empty($this->request->data)) {
-	            if(isset($this->request->data['reportType']) && $this->request->data['reportType'] != '') {
-	                $result=array();
-	                $reportType = $this->request->data['reportType'];
-	                $reports = $this->ExcelReport->find('all',array(
-	                    'conditions' => array(
-	                      'account_id' => $this->Session->read('User.Account')
-	                    )
-	                ));
-	                foreach($reports as $report) {
-	                    $unserialized = unserialize($report['ExcelReport']['download_links']);
-	                    //print_r($unserialized);
-	                    if(isset($unserialized[$reportType])) {
-	                        $link = explode('/',$unserialized[$reportType]);
-	                        $result[] = array($unserialized[$reportType], $link[4]);
+	public function download_reports($id = null)
+	{
+
-	                    }
+	}
-	                }
-	                //ob_clean();
-	                echo json_encode($result);die;
-	            }
-	        }
-			*/
-		}
-		
+
-		
-	    public function activate_app($id = null) {
+	public function activate_app($id = null)
+	{
-	        $this->Plugin->id = $id;
-	        if (!$this->Plugin->exists()) {
-	            throw new NotFoundException(__('Invalid app'));
-	        }
+		$this->Plugin->id = $id;
+		if (!$this->Plugin->exists()) {
+			throw new NotFoundException(__('Invalid app'));
+		}
-	        $this->Plugin->query('INSERT INTO `accounts_plugins`
+		$this->Plugin->query(
+			'INSERT INTO `accounts_plugins`
 	            SET `account_id` = \'' . $this->Session->read('User.Account') . '\',
-	            `plugin_id` = \'' . $id . '\';');
+	            `plugin_id` = \'' . $id . '\';'
+		);
 
-	        return $this->redirect(array(
+		$this->redirect(
+			array(
-	                'action' => 'apps',
-	                $this->Session->read('User.Account')
+				'action' => 'apps',
+				$this->Session->read('User.Account')
-	            ));
+			)
+		);
+		return;
-	    }
+	}
 
-	    public function disconnect_app($id = null) {
+	public function disconnect_app($id = null)
+	{
-	        $this->Plugin->id = $id;
-	        if (!$this->Plugin->exists()) {
-	            throw new NotFoundException(__('Invalid app'));
-	        }
+		$this->Plugin->id = $id;
+		if (!$this->Plugin->exists()) {
+			throw new NotFoundException(__('Invalid app'));
+		}
-	        $this->AccountsPlugins->deleteAll(array(
+		$this->AccountsPlugins->deleteAll(
+			array(
-	                'account_id' => $this->Session->read('User.Account'),
+				'account_id' => $this->Session->read('User.Account'),
-	                'plugin_id' => $id
+				'plugin_id'  => $id
-	            ), false);
-	        return $this->redirect(array(
+			),
+			false
+		);
+		$this->redirect(
+			array(
-	                'action' => 'apps',
-	                $this->Session->read('User.Account')
+				'action' => 'apps',
+				$this->Session->read('User.Account')
-	            ));
+			)
+		);
+		return;
-	    }
+	}
 
-
-		/**
-		 * Used for filling the accounts add / edit form's sub-industries list,
-		 * on selecting a specific industry
-		 *
+	/**
+	 * Used for filling the accounts add / edit form's sub-industries list,
+	 * on selecting a specific industry
+	 *
-		 **/
-	    public function get_sub_industries($industry_id = null) {
+	 * @param int|null $industry_id
+	 */
+	public function get_sub_industries($industry_id = null)
+	{
-	        $this->autoRender = false;
+		$this->autoRender = false;
-	        $this->layout = false;
+		$this->layout     = false;
 
-	        $response = array();
-	        if ($industry_id && is_numeric($industry_id)) {
+		$response = array();
+		if ($industry_id && is_numeric($industry_id)) {
-	            $sub_industries = ClassRegistry::init('Industry')->find('list', array(
+			$sub_industries = ClassRegistry::init('Industry')->find(
+				'list',
+				array(
-	                    'conditions'    => array(
+					'conditions' => array(
-	                        'parent_id' => $industry_id
-	                    ),
+						'parent_id' => $industry_id
+					),
-	                    'order'         => 'name'
+					'order'      => 'name'
-	            	));
+				)
+			);
 
-	            if ($sub_industries) {
-	                foreach ($sub_industries as $id => $name) {
-	                    $response[] = array(
+			if ($sub_industries) {
+				foreach ($sub_industries as $id => $name) {
+					$response[] = array(
-	                        'id'    => $id,
+						'id'   => $id,
-	                        'name'  => $name
+						'name' => $name
-	                    );
-	                }
-	            }
-	        }
+					);
+				}
+			}
+		}
 
-	        echo json_encode($response);
-	    }
+		echo json_encode($response);
+	}
 
-
-	    /**
-	     * Check if a submitted account ID actually belongs to an account,
-	     * and that account belongs to the currently logged in user
-	     *
-	     * If not, we'll redirect to the accounts list
-	     *
-	     **/
-	    private function checkAccount($id) {
-
-	    	$account = $this->Account->find('first', array(
-					'conditions' => array(
-						'user_id' => $this->Auth->user('id')
-					)
-				));
-
-			if ($account) {
-				// It does, so let's change the currently selected account
-				$this->Session->write('User.Account', $id);
-				$this->current_account = $account;
-
-				$this->set('account', $account);
-
-			} else {
-				// Nope, it doesn't
-				return $this->redirect(array('action' => 'index'));
-			}
-    	}
-
- 		public function upgrade() {
+	public function upgrade()
+	{
-			// We don't use this anymore (for now...)
+		// We don't use this anymore (for now...)
-			$this->redirect(array(
+		$this->redirect(
+			array(
-					'action' => 'add', 
-					$this->current_account['Account']['id']
+				'action' => 'add',
+				$this->current_account['Account']['id']
-				));
-			die();
-			
-						
-			// First let's get the list of already selected upgradable chart categories
-			// for the current account
-			$selected_upgradable_charts = array();
-			$active_upgradable_charts = array();
-			$active_upgradable_charts_data = array();
-
-			foreach ($this->account['UpgradeableChartCategory'] as $upgradable_chart_category) {
-				if (empty($upgradable_chart_category['AccountsUpgradedCharts']['turn_off_date'])) {
-					$selected_upgradable_charts[$upgradable_chart_category['id']] = $upgradable_chart_category['category'];
-				}
-				// if there's an end date in the past, this chart technically isn't active
-				if($upgradable_chart_category['AccountsUpgradedCharts']['turn_off_date'] == NULL || strtotime($upgradable_chart_category['AccountsUpgradedCharts']['turn_off_date']) >= strtotime('now')) {
-					$active_upgradable_charts[$upgradable_chart_category['id']] = $upgradable_chart_category['category'];
-					$active_upgradable_charts_data[$upgradable_chart_category['id']]['turn_off_date'] = $upgradable_chart_category['AccountsUpgradedCharts']['turn_off_date'];
-				} else if (strtotime($upgradable_chart_category['AccountsUpgradedCharts']['turn_off_date']) < strtotime('now')) { // delete this old entry in the db that could cause problems?
-					$this->AccountsUpgradedChart->delete($upgradable_chart_category['AccountsUpgradedCharts']['id']);
-				}
-			}
-
-			$this->set('selected_upgradable_charts', $selected_upgradable_charts);
-			$this->set('active_upgradable_charts', $active_upgradable_charts);
-			$this->set('active_upgradable_charts_data', $active_upgradable_charts_data);
-
-
-			// Now let's get the next scheduled date that the current account will be charged for
-			// its upgradable chart categories (if any)
-			$next_payment_date = $this->get_next_scheduled_upgradable_charts_payment_date();
-			$this->set('next_payment_date', $next_payment_date);
-
-
-			// Let's get the current account's upgrades coupon code, if existent
-			if ($this->current_account['Coupon']) {
-				foreach ($this->current_account['Coupon'] as $coupon_) {
-					if ((empty($coupon_['start_date']) || strtotime($coupon_['start_date'])<time()) &&
-						(empty($coupon_['end_date']) || strtotime($coupon_['end_date'])>time()) &&
-						$coupon_['AccountsCoupon']['active'] && $coupon_['is_active']) {
-						
-						$current_upgrades_coupon = $coupon_;
-						$this->set('coupon_code', $coupon_);
-						
-						break; // We assume there's only one upgrades coupon code per account
-					}
-				}
-			}
-			
-			
-	    	if ($this->request->is('post') && is_array($this->request->data['Insights'])/* && is_array($this->request->data['Insights']['upgrade'])*/) {
-	    		// The user submited an updated selection of upgradable chart categories for his/her current account,
-	    		// so let's handle these chart categories price charge, and update the DB accordingly
-
-				// First let's check if there's any coupon code submitted,
-				// and if so, if it's valid
-				if (@$this->request->data['Insights']['coupon_code']) {
-					$error_message = '';
-					$coupon = $this->Coupon->find('first', array(
-							'conditions' => array(
-								'coupon_code' => $this->request->data['Insights']['coupon_code']
-							)
+			)
-						));
-
-					if (!$coupon) {
-						$error_message .= 'Invalid coupon code!<br />';
-
-					} else {
-						if (($coupon['Coupon']['start_date'] && strtotime($coupon['Coupon']['start_date'])>time()) || ($coupon['Coupon']['end_date'] && strtotime($coupon['Coupon']['end_date'])<time())) {
-							// The current coupon is either not yet available, or has expired
-							$error_message .= 'The submitted coupon code is outside its validity date range!<br />';
-
-						} else {
-							// @TODO: Why does this reject a coupon instead of overwriting the active one like in other places?
-							// Let's check if the current account doesn't already have a coupon code attached
-							// (in which case we'll discard the somehow currently submitted one)
-							foreach ($this->current_account['Coupon'] as $coupon_) {
-								if ($coupon_['AccountsCoupon']['active'] && $coupon_['is_active']) {
-									$error_message .= 'Your account already has an attached coupon code, which hasn\'t expired yet!<br />';
-									break;
-								}
-							}
-						}
-
-						if ($error_message == '' && $coupon['Coupon']['usage_number']) {
-							// Finally, let's check if the current coupon has been already used
-							// as many times as its usage_number value
-							$coupons = $this->Account->AccountsCoupon->find('all', array(
-									'conditions' => array(
-										'coupon_id' => $coupon['Coupon']['id']
-									)
-								));
-
-							if (count($coupons)>=$coupon['Coupon']['usage_number']) {
-								$error_message .= 'The submitted coupon code has been used the maximum number of times it allows!<br />';
-							}
-						}
-					}
-				}
-
-
-				if (empty($error_message)) {
-					if (@$coupon) {
-						// Attach the submitted coupon to the current account
-						$this->Account->AccountsCoupon->create();
-						$this->Account->AccountsCoupon->save(array(
-								'account_id'	=> $this->current_account['Account']['id'],
-								'coupon_id'		=> $coupon['Coupon']['id'],
-								'date_used'		=> date('Y-m-d H:s:i')
-							));
-					}
-
-		    		$total_selected_upgradable_charts_price = 0;
-		    		$newly_selected_chart_categories = array();
-		    		if (!empty($this->request->data['Insights']['upgrade']) && is_array($this->request->data['Insights']['upgrade'])) {
-						foreach ($this->request->data['Insights']['upgrade'] as $upgradable_chart) {
-							//$upgradable_chart = explode('|', $upgradable_chart);
-	
-							if ($upgradable_chart && is_numeric($upgradable_chart)) {
-								$upgradable_chart = $this->UpgradeableChartCategory->find('first', array(
-						                'conditions' => array(
-											'UpgradeableChartCategory.id' => $upgradable_chart
-										)
-						            ));
-	
-								if ($upgradable_chart && !in_array($upgradable_chart['UpgradeableChartCategory']['category'], $active_upgradable_charts)) {
-									// This is a newly selected upgradable chart category, so we'll charge money for it
-									$discount = 0;
-									
-									if (@$coupon && (float)$coupon['Coupon']['amount']>0) {
-										// There is a coupon matching the currently submitted new upgrade selection,
-										// so let's reduce its value accordingly
-										$discount = ($coupon['Coupon']['amount_type']=='1' ?
-											$coupon['Coupon']['amount'] :
-											round(($coupon['Coupon']['amount'] / 100) * $upgradable_chart['UpgradeableChartCategory']['price'], 2));
-									}
-	
-									$total_selected_upgradable_charts_price += ($upgradable_chart['UpgradeableChartCategory']['price'] - $discount);
-									$newly_selected_chart_categories[] = $upgradable_chart['UpgradeableChartCategory']['category'];
-								}
-							}
-			    		}
-	    			}
-		    		if ($total_selected_upgradable_charts_price>0) {
-		    			// The current selection contains new upgradable chart categories compared to the previous one, saved in the DB
-		    			// for the current account, so let's attempt to charge its CC
-		    			$amount = $total_selected_upgradable_charts_price;
-
-						$defaultPaymentProfile = $this->AuthorizeNet->getDefaultPaymentProfile($this->account);
-						$payment_response = $this->AuthorizeNet->chargeCard($this->account['Account']['profile_id'], $defaultPaymentProfile['payment_profile_id'], array(
-		                        array(
-		                            'id'            => time(),
-		                            'name'          => $this->account['Subscription']['name'],
-		                            'description'   => 'New Upgradable Insights Categor' . (count($newly_selected_chart_categories)==1 ? 'y' : 'ies') . ' Selection',
-		                            'price'         => $amount
-		                        )
-		                    ));
-		                //$payment_response['transactionID'] = time(); // For development purposes
-
-						if (empty($payment_response['error'])) { // The card seemed to had been charged, so let's insert the new payment record
-		                    $this->Account->Payment->create();
-		                    $this->Account->Payment->save(array(
-		                            'account_id'        => $this->account['Account']['id'],
-		                            'payment_type_id' 	=> 4,
-		                            'description'       => 'New Upgradable Insights Categor' . (count($newly_selected_chart_categories)==1 ? 'y' : 'ies') . ' Selection',
-		                            'value'             => -$amount,
-		                            'transaction_id'    => $payment_response['transactionID'],
-		                            'added_date'        => date('Y-m-d H:i:s')
-		                        ));
-
-							$this->UserAccount->sendEmail(array(
-									'email_vars'	=> array( // Except for the user's and account's names, which are determined and se(n)t automatically
-										'account'  		=> $this->current_account['Account']['company_name'],
-										'account_id'	=> $this->current_account['Account']['id'],
-										'value'     	=> $amount,
-		                                'service'   	=> 'Upgradable '.implode(",", $newly_selected_chart_categories).' Insights categor' . (count($newly_selected_chart_categories)==1 ? 'y' : 'ies') . ' selection: ' . implode(', ', $newly_selected_chart_categories)
-									),
-									'permission'	=> 'credit_card_transaction',
-									'bcc'     		=> ACCOUNT_MANAGERS,
-									'template'		=> 'payment-receipt',
-									'subject'		=> 'Upgradable '.implode(",", $newly_selected_chart_categories).' Insights Categor' . (count($newly_selected_chart_categories)==1 ? 'y' : 'ies')
-								));
-
-		                } else {
-		                    // There's been an error, let's display a warning message
-		                    $this->Session->setFlash('There\'s been an error charging your default stored CC. If you continue to receive this error, please visit our <a href="' . FRESHDESK_BASE_URL . '" target="_blank">Support Center</a>.', 'flash_alert');
-		                    return $this->redirect(array('action' => 'upgrade'));
-		                }
-		    		}
-
-
-		    		if ($total_selected_upgradable_charts_price==0 || @$payment_response) {
-		    			// NOW we can store the new selection in the DB
-		    			// (or schedule any existing, but deselected records, for removal at the end of the current month)
-						
-						if (!empty($this->request->data['Insights']['upgrade']) && is_array($this->request->data['Insights']['upgrade'])) {
-							foreach ($this->request->data['Insights']['upgrade'] as $upgradable_chart) {
-								//$upgradable_chart = explode('|', $upgradable_chart);
-	
-								if ($upgradable_chart && is_numeric($upgradable_chart)) {
-									$upgradable_chart = $this->UpgradeableChartCategory->find('first', array(
-							                'conditions' => array(
-												'UpgradeableChartCategory.id' => $upgradable_chart
-											)
-							            ));
-	
-									if ($upgradable_chart) {
-										$payment = $this->Account->Payment->find('first', array(
-						                        'conditions'    => array(
-						                            'Payment.account_id'        => $this->current_account['Account']['id'],
-						                            'Payment.payment_type_id'	=> 2
-						                        ),
-						                        'order'         => array(
-						                            'Payment.added_date DESC'
-						                        )
-						                    ));
-										// Let's check if the currently selected chart category already exists in the account's
-										// list of selected upgradable chart categories
-										// If it does, we'll do nothing (but remove it from the $active_upgradable_charts list)
-										// If it doesn't, we'll insert it
-										if (key_exists($upgradable_chart['UpgradeableChartCategory']['id'], $active_upgradable_charts) &&
-											key_exists($upgradable_chart['UpgradeableChartCategory']['id'], $selected_upgradable_charts)) {
-											unset($active_upgradable_charts[$upgradable_chart['UpgradeableChartCategory']['id']]);
-	
-										} else {
-											if (key_exists($upgradable_chart['UpgradeableChartCategory']['id'], $active_upgradable_charts)) {
-												// This must be an existing, though turned off chart category,
-												// so let's just turn it on again
-									            if (empty($payment)) {
-									            	$off_date = array(
-										                'turn_off_date'		=> '"' . date('Y-m-d H:i:s',strtotime('+ 1 month')) . '"'
-										            );
+		);
-									            } else {
-									            	$off_date = array(
-										                'turn_off_date'		=> null
-										            );
-									            }
-	
-							     				$this->AccountsUpgradedChart->updateAll($off_date, array(
-										            	'account_id'		=> $this->Session->read('User.Account'),
-														'chart_category_id'	=> $upgradable_chart['UpgradeableChartCategory']['id']
-													));
-	
-												// We don't need it listed in the $active_upgradable_charts array anymore,
-												// since we don't want it to get its just-updated turn_off_date value re-set
-												unset($active_upgradable_charts[$upgradable_chart['UpgradeableChartCategory']['id']]);
-	
-											} else {
-												// Insert the newly selected upgradable chart
-												$discount = 0;
-												
-												if (@$coupon && (float)$coupon['Coupon']['amount']>0) {
-													// There is a coupon matching the currently submitted new upgrade selection,
-													// so let's reduce its value accordingly
-													$discount = ($coupon['Coupon']['amount_type']=='1' ?
-														$coupon['Coupon']['amount'] :
-														round(($coupon['Coupon']['amount'] / 100) * $upgradable_chart['UpgradeableChartCategory']['price'], 2));
-												}
-												
-												$data = array(
-									                'account_id' 			=> $this->Session->read('User.Account'),
-									                'chart_category_id'		=> $upgradable_chart['UpgradeableChartCategory']['id'],
-									                'chart_category_price'	=> ($upgradable_chart['UpgradeableChartCategory']['price'] - $discount),
-									                'turn_on_date'			=> date('Y-m-d H:i:s')
-									            );
-	
-									            // if an account has a zero balance, and they haven't paid before we can't know for sure when their subscription will run
-									            // so we have to automatically set an end date if there isn't a prior payment.
-									            if (empty($payment)) {
-									            	$data['turn_off_date'] = date('Y-m-d H:i:s',strtotime('+ 1 month'));
-									            }
-	
-												$this->AccountsUpgradedChart->create();
-							     				$this->AccountsUpgradedChart->save($data);
-				     						}
-				    					}
-									}
-								}
-							}
-						}
-
-						if (!empty($active_upgradable_charts)) {
-							// There are still upgradable chart categories assigned to the current account,
-							// that haven't been selected anymore, so we'll mark them for being disabled
-							// within the current month
-
-							if (!$next_payment_date) {
-								// There is definitely a new scheduled payment date for these
-								// upgradable chart categories now!
-								$next_payment_date = $this->get_next_scheduled_upgradable_charts_payment_date();
-							}
-							//echo $next_payment_date;
-							if ($next_payment_date != 'none') { // we're on a no-subscription account that won't ever have renewal capability
-								foreach ($active_upgradable_charts as $id => $selected_upgradable_chart) {
-				     				$this->AccountsUpgradedChart->updateAll(array(
-							                'turn_off_date'		=> '\'' . $next_payment_date . '\''
-							            ), array(
-							            	'account_id'		=> $this->Session->read('User.Account'),
-											'chart_category_id'	=> $id
-										));
-			    				}
-							}
-						}
-
-
-						$this->Session->setFlash('Your Insights categories selection has been successfully updated' .
-							(@$payment_response ? ', and your account\'s credit card has been charged for their value' : '') .
-							'.', 'flash_success');
-
-						if ($this->request->data['Insights']['referrer']) {
-							header('Location: ' . $this->request->data['Insights']['referrer']);
-							die();
+		die();
-
-						} else {
-							return $this->redirect(array('action' => 'upgrade'));
-						}
+	}
-					}
 
-				} else {
-		            $this->Session->setFlash($error_message, 'flash_alert');
-				}
-			}
+	public function upgrade_rtb()
+	{
 
-
-	    	// Now let's generate the list of chart categories / pages that contain upgradable charts,
-			// and their list of such upgradable charts
-			$audience_taxonomies = Cache::read('IbTaxonomies', 'insights');
-
-			$page_names = array();
-			foreach ($audience_taxonomies as $page_name => $pages) {
-				foreach ($pages as $chart_name => $chart) {
-					if (in_array($chart['package'], array('upgrade', 'upgraded')) && !isset($page_names[$page_name])) {
-						$page_names[$page_name] = array();
-					}
-
-					if (isset($page_names[$page_name]) && in_array($chart['package'], array('upgrade', 'upgraded'))) {
-						$page_names[$page_name][] = $chart_name;
-					}
-				}
-			}
-
-			// Next, let's get the upgradable chart categories for which we've defined a price in the DB
-			$conditions = array(
-				// THERE'S NO SUBSCRIPTION ID PER UPGRADABLE CHART CATEGORIES!
-				'subscription_id' => ($this->current_account['Account']['subscription_id'] >=3/* && $this->current_account['Account']['custom_billing'] == 'N'*/ ?
-					$this->current_account['Account']['subscription_id'] :
-					/*($this->current_account['Account']['custom_billing'] == 'Y' ? 9 : */1/*)*/)
-			);
-			foreach ($page_names as $page_name => $charts) {
-				$conditions['OR'][] = array(
-					'category'	=> $page_name,
-					'charts'	=> json_encode($charts)
-				);
-			}
-			if ($conditions) {
-		        $upgradable_charts = $this->UpgradeableChartCategory->find('all', array(
-		                'conditions' => $conditions
-		            ));
-			}
-
-			// Finally, let's re-build the list of pages and charts, based on the DB's output
-			$page_names = array();
-			if ($upgradable_charts) {
-				foreach ($upgradable_charts as $upgradable_chart) {
-					if (!key_exists($upgradable_chart['UpgradeableChartCategory']['category'], $page_names)) {
-						$page_names[$upgradable_chart['UpgradeableChartCategory']['category']] = array(
-							'id'		=> $upgradable_chart['UpgradeableChartCategory']['id'],
-							'price' 	=> $upgradable_chart['UpgradeableChartCategory']['price'],
-							'charts'	=> array()
-						);
-					}
-
-					$page_names[$upgradable_chart['UpgradeableChartCategory']['category']]['charts'] = json_decode($upgradable_chart['UpgradeableChartCategory']['charts']);
-				}
-			}
-
-			$this->set('page_names', $page_names);
-	    }
-
-
-	   	public function upgrade_rtb() {
-			
-			// All subscription types can be upgraded. But the only thing that can be upgraded to is a regular subscription type
+		// All subscription types can be upgraded. But the only thing that can be upgraded to is a regular subscription type
-	    	$sites = $this->Site->find('all', array(
+		$sites     = $this->Site->find(
+			'all',
+			array(
-	    			'conditions' => array(
-						'Site.account_id' => $this->current_account['Account']['id']
-					)
+				'conditions' => array(
+					'Site.account_id' => $this->current_account['Account']['id']
+				)
-				));
+			)
+		);
-			$pageviews = 0;
+		$pageviews = 0;
-			foreach($sites as $site) {
+		foreach ($sites as $site) {
-				$pageviews += $site['Site']['monthly_pageviews'];
-			}
-			
-			// Let's check if the current account needs an upgrade, based on its sites pageviews count
-			$needs_upgrade = ($pageviews > $this->current_account['Subscription']['web_events_limit']
-								|| $this->current_account['Subscription']['subscription_type'] == 'RTB');
-			
-			if ($needs_upgrade) {
-				// Now let's determine the right subscription type for the current account's pageviews total count
-				$users_current_subscription_version_id = $this->current_account['Subscription']['version_id'];
+			$pageviews += $site['Site']['monthly_pageviews'];
+		}
+
+		// Let's check if the current account needs an upgrade, based on its sites pageviews count
+		$needs_upgrade = ($pageviews > $this->current_account['Subscription']['web_events_limit']
+		                  || $this->current_account['Subscription']['subscription_type'] == 'RTB');
+
+		if ($needs_upgrade) {
+			// Now let's determine the right subscription type for the current account's pageviews total count
+			$users_current_subscription_version_id = $this->current_account['Subscription']['version_id'];
-				$subscriptions = $this->Subscription->find('all', array(
+			$subscriptions                         = $this->Subscription->find(
+				'all',
+				array(
-						'conditions'	=> array(
+					'conditions' => array(
-							'Subscription.subscription_type'	=> 'R',
+						'Subscription.subscription_type' => 'R',
-							'Subscription.version_id'			=> $users_current_subscription_version_id
+						'Subscription.version_id'        => $users_current_subscription_version_id
-						),
+					),
-						'order'			=> array(
+					'order'      => array(
-							'Subscription.web_events_limit'		=> 'ASC',
+						'Subscription.web_events_limit' => 'ASC',
-							'Subscription.audience_size'		=> 'ASC',
+						'Subscription.audience_size'    => 'ASC',
-						),
+					),
-						'recursive'	=> 0
+					'recursive'  => 0
-					));
+				)
+			);
-				
+
-				foreach($subscriptions as $subscription) {
+			foreach ($subscriptions as $subscription) {
-					if ($subscription['Subscription']['web_events_limit'] >= $pageviews) {
-						$upgraded_subscription = $subscription;
-						break;
-					}
-				}
-				if (empty($upgraded_subscription)) {
-					// Default to enterprise.
-					$upgraded_subscription = end($subscriptions);
-				}
-				
-				$this->set('subscription', $upgraded_subscription['Subscription']);
-				
-				// Now let's get the price difference the user has to pay for his/her new subscription level
-				$upgradeCost = $upgraded_subscription['Subscription']['monthly_price'];
-				$currentCost = $this->current_account['Subscription']['monthly_price'];
+				if ($subscription['Subscription']['web_events_limit'] >= $pageviews) {
+					$upgraded_subscription = $subscription;
+					break;
+				}
+			}
+			if (empty($upgraded_subscription)) {
+				// Default to enterprise.
+				$upgraded_subscription = end($subscriptions);
+			}
+
+			$this->set('subscription', $upgraded_subscription['Subscription']);
+
+			// Now let's get the price difference the user has to pay for his/her new subscription level
+			$upgradeCost = $upgraded_subscription['Subscription']['monthly_price'];
+			$currentCost = $this->current_account['Subscription']['monthly_price'];
 
-				$coupon = false;
-				foreach ($this->current_account['Coupon'] as $current) {
-					// Check for active coupon
-					$currentTime = time();
-					if ($current['is_active'] && $current['AccountsCoupon']['active'] &&
-					    (empty($current['start_date']) || strtotime($current['start_date']) <= $currentTime) &&
-					    (empty($current['end_date']) || strtotime($current['end_date']) > $currentTime)
-					) {
-						$coupon = $current;
-						break;
-					}
-				}
+			$coupon = false;
+			foreach ($this->current_account['Coupon'] as $current) {
+				// Check for active coupon
+				$currentTime = time();
+				if ($current['is_active'] && $current['AccountsCoupon']['active'] &&
+				    (empty($current['start_date']) || strtotime($current['start_date']) <= $currentTime) &&
+				    (empty($current['end_date']) || strtotime($current['end_date']) > $currentTime)
+				) {
+					$coupon = $current;
+					break;
+				}
+			}
 
-				if ($coupon) {
-					// Apply coupon
-					if ($coupon['amount_type'] == Coupon::TYPE_DOLLARS) {
-						// Flat dollar amount
-						$upgradeCost = max(0.0, $upgradeCost - $coupon['amount']);
-						$currentCost = max(0.0, $currentCost - $coupon['amount']);
-					} elseif ($coupon['amount_type'] == Coupon::TYPE_PERCENT) {
-						// Percentage off
-						$upgradeCost = max(0.0, $upgradeCost * ((100 - $coupon['amount']) / 100));
-						$currentCost = max(0.0, $currentCost * ((100 - $coupon['amount']) / 100));
-					}
-				}
-				$price_difference = $upgradeCost - $currentCost;
-				
+			if ($coupon) {
+				// Apply coupon
+				if ($coupon['amount_type'] == Coupon::TYPE_DOLLARS) {
+					// Flat dollar amount
+					$upgradeCost = max(0.0, $upgradeCost - $coupon['amount']);
+					$currentCost = max(0.0, $currentCost - $coupon['amount']);
+				} elseif ($coupon['amount_type'] == Coupon::TYPE_PERCENT) {
+					// Percentage off
+					$upgradeCost = max(0.0, $upgradeCost * ((100 - $coupon['amount']) / 100));
+					$currentCost = max(0.0, $currentCost * ((100 - $coupon['amount']) / 100));
+				}
+			}
+			$price_difference = $upgradeCost - $currentCost;
+
-				$last_payment = $this->Account->Payment->find('first', array(
+			$last_payment = $this->Account->Payment->find(
+				'first',
+				array(
-						'conditions'	=> array(
+					'conditions' => array(
-							'Payment.account_id'		=> $this->current_account['Account']['id'],
+						'Payment.account_id'      => $this->current_account['Account']['id'],
-							'Payment.added_date >='		=> date('Y-m-d', strtotime('-1 month')),
+						'Payment.added_date >='   => date('Y-m-d', strtotime('-1 month')),
-							'Payment.payment_type_id'	=> 2
+						'Payment.payment_type_id' => 2
-						),
+					),
-						'order'			=> array(
+					'order'      => array(
-							'Payment.added_date DESC'
-						)
+						'Payment.added_date DESC'
+					)
-					));
+				)
+			);
-				
-				if ($last_payment) {
+
+			if ($last_payment) {
-					$days_difference = floor((strtotime('now') - strtotime($last_payment['Payment']['added_date'])) / 60 / 60 / 24);
-					if ($days_difference > 0) { // if it's not the same day, calculate the day factor
+				$days_difference =
+					floor((strtotime('now') - strtotime($last_payment['Payment']['added_date'])) / 60 / 60 / 24);
+				if ($days_difference > 0) {
+					// if it's not the same day, calculate the day factor
-						$price_difference = round(($price_difference * (30.5 - $days_difference)) / 30.5, 2);
-					}
-				}
-				$price_difference = max(0.0, $price_difference);
-				$this->set('price_difference', $price_difference);
-			}
-			
+					$price_difference = round(($price_difference * (30.5 - $days_difference)) / 30.5, 2);
+				}
+			}
+			$price_difference = max(0.0, $price_difference);
+			$this->set('price_difference', $price_difference);
+		}
+
-			
-			if ($this->request->is('post')) { // selecting an upgrade
-				$error = "";
-				
-				// Upgrade approved or cancelled?
-				if (isset($this->request->data['cancel'])) {
-					// Cancelled upgrade, so remove the site and tags that were marked inactive.
+		if ($this->request->is('post')) { // selecting an upgrade
+			$error = "";
+
+			// Upgrade approved or cancelled?
+			if (isset($this->request->data['cancel'])) {
+				// Cancelled upgrade, so remove the site and tags that were marked inactive.
-					foreach($sites as $site) {
+				foreach ($sites as $site) {
-						if ($site['Site']['visible'] == 'N') {
-							// delete site and queue entry
-							$this->Site->delete($site['Site']['id']);
-							$this->TagQueue->delete($site['TagQueue']['id']);
-						}
-					}
-					if ($this->current_account['Subscription']['subscription_type'] != 'RTB') {
+					if ($site['Site']['visible'] == 'N') {
+						// delete site and queue entry
+						$this->Site->delete($site['Site']['id']);
+						$this->TagQueue->delete($site['TagQueue']['id']);
+					}
+				}
+				if ($this->current_account['Subscription']['subscription_type'] != 'RTB') {
-						$this->Session->setFlash('Your site has not been added because you did not agree to the account upgrade.', 'flash_alert');
+					$this->Session->setFlash(
+						'Your site has not been added because you did not agree to the account upgrade.',
+						'flash_alert'
+					);
-					}
+				}
-					
-				} else if (isset($this->request->data['approve'])) {
+			} elseif (isset($this->request->data['approve'])) {
-					// Approved upgrade, so charge their CC & update any sites set to inactive.
-					
-					if ($this->current_account['ExternalProvider']) {
+				// Approved upgrade, so charge their CC & update any sites set to inactive.
+
+				if ($this->current_account['ExternalProvider']) {
-						foreach($this->current_account['ExternalProvider'] as $provider) {
+					foreach ($this->current_account['ExternalProvider'] as $provider) {
-							if ($provider['id'] == 2) {
+						if ($provider['id'] == 2) {
-								$IBehaviorCredentials = json_decode($provider['AccountsExternalProviders']['connection_data']);
+							$IBehaviorCredentials =
+								json_decode($provider['AccountsExternalProviders']['connection_data']);
-							}
-							if ($provider['id'] == 4) {
+						}
+						if ($provider['id'] == 4) {
-								$this->TDCredentials = json_decode($provider['AccountsExternalProviders']['connection_data']);
+							$this->TDCredentials =
+								json_decode($provider['AccountsExternalProviders']['connection_data']);
-							}
-						}
-					}
-					
-					if (!empty($IBehaviorCredentials) && !empty($this->TDCredentials)) {
+						}
+					}
+				}
+
+				if (!empty($IBehaviorCredentials) && !empty($this->TDCredentials)) {
-						$updatedSiteIDs = array(); // Will store all updated site IDs, in case we need to roll back their update (if an error happens)
+					$updatedSiteIDs =
+						array(); // Will store all updated site IDs, in case we need to roll back their update (if an error happens)
-					
+
-						foreach($sites as $site) {
+					foreach ($sites as $site) {
-							if ($site['Site']['visible'] == 'N') {
-								// Update the site's visibility and TTD / IB tag IDs
-								$site_name = $site['Site']['name'];
+						if ($site['Site']['visible'] == 'N') {
+							// Update the site's visibility and TTD / IB tag IDs
+							$site_name = $site['Site']['name'];
-								$tags = $this->AccountComponent->createSiteTags($this->current_account, $site_name, $IBehaviorCredentials);
+							$tags      =
+								$this->AccountComponent->createSiteTags(
+									$this->current_account,
+									$site_name,
+									$IBehaviorCredentials
+								);
-								
-								$trade_desk_tag = $tags['trade_desk_tag'];
+
+							$trade_desk_tag = $tags['trade_desk_tag'];
-								$cdid_response = $tags['cdid_response'];
+							$cdid_response  = $tags['cdid_response'];
-								
-								if ($trade_desk_tag['success'] == true && $cdid_response['success'] == true) {
+
+							if ($trade_desk_tag['success'] == true && $cdid_response['success'] == true) {
-									$html_code = (!empty($trade_desk_tag['data']['TrackingTagId']) ? '<iframe width="0" height="0" name="Choozle Insights - ' . $site_name . '" frameborder="0" scrolling="no" src="' . TAG_DOMAIN . 'tags/' . $this->TDCredentials->advertiser_id . '/' . $trade_desk_tag['data']['TrackingTagId'] . '/iframe"></iframe>' : '');
-									$img_code = (!empty($trade_desk_tag['data']['TrackingTagId']) ? '<img alt="" height="1" width="1" style="border-style:none" src="' . TAG_DOMAIN . 'track/imp/?adv=' . $this->TDCredentials->advertiser_id . '&ct=0:' . $trade_desk_tag['data']['TrackingTagId'] . '&fmt=3"/>' : '');
+								$html_code =
+									(!empty($trade_desk_tag['data']['TrackingTagId']) ?
+										'<iframe width="0" height="0" name="Choozle Insights - ' .
+										$site_name .
+										'" frameborder="0" scrolling="no" src="' .
+										TAG_DOMAIN .
+										'tags/' .
+										$this->TDCredentials->advertiser_id .
+										'/' .
+										$trade_desk_tag['data']['TrackingTagId'] .
+										'/iframe"></iframe>' : '');
+								$img_code  =
+									(!empty($trade_desk_tag['data']['TrackingTagId']) ?
+										'<img alt="" height="1" width="1" style="border-style:none" src="' .
+										TAG_DOMAIN .
+										'track/imp/?adv=' .
+										$this->TDCredentials->advertiser_id .
+										'&ct=0:' .
+										$trade_desk_tag['data']['TrackingTagId'] .
+										'&fmt=3"/>' : '');
-									
+
-									$this->Site->updateAll(array(
-											'td_id'					=> '\'' . (!empty($trade_desk_tag['data']['TrackingTagId']) ? $trade_desk_tag['data']['TrackingTagId'] : '0') . '\'', 
-											'ib_cid'				=> '\'' . (!empty($cdid_response['data']['cid']) ? $cdid_response['data']['cid'] : '0') . '\'', 
-											'ib_cdid'				=> '\'' . (!empty($cdid_response['data']['cdid']) ? $cdid_response['data']['cdid'] : '0') . '\'', 
+								$this->Site->updateAll(
+									array(
+										'td_id'              =>
+											'\'' .
+											(!empty($trade_desk_tag['data']['TrackingTagId'])
+												? $trade_desk_tag['data']['TrackingTagId'] : '0') .
+											'\'',
+										'ib_cid'             =>
+											'\'' .
+											(!empty($cdid_response['data']['cid']) ? $cdid_response['data']['cid']
+												: '0') .
+											'\'',
+										'ib_cdid'            =>
+											'\'' .
+											(!empty($cdid_response['data']['cdid']) ? $cdid_response['data']['cdid']
+												: '0') .
+											'\'',
-											'html_tracking_code'	=> '\'' . $html_code . '\'', 
+										'html_tracking_code' => '\'' . $html_code . '\'',
-											'img_tracking_code'		=> '\'' . $img_code . '\'', 
+										'img_tracking_code'  => '\'' . $img_code . '\'',
-											'visible'				=> '\'Y\''
+										'visible'            => '\'Y\''
-										), array(
+									),
+									array(
-											'Site.id' => $site['Site']['id']
+										'Site.id' => $site['Site']['id']
-										));
+									)
+								);
-									
-									$updatedSiteIDs[] = $site['Site']['id'];
-									
-								} else {
-									// Ooops... an error
-									// Let's roll back any potential previously updated sites, before setting
-									// the error's message and breaking out of this loop
-									foreach ($updatedSiteIDs as $updatedSiteID) {
+
+								$updatedSiteIDs[] = $site['Site']['id'];
+
+							} else {
+								// Ooops... an error
+								// Let's roll back any potential previously updated sites, before setting
+								// the error's message and breaking out of this loop
+								foreach ($updatedSiteIDs as $updatedSiteID) {
-										$this->Site->updateAll(array(
+									$this->Site->updateAll(
+										array(
-												'td_id'					=> '0',
+											'td_id'              => '0',
-												'ib_cid'				=> '0',
+											'ib_cid'             => '0',
-												'ib_cdid'				=> '0',
+											'ib_cdid'            => '0',
-												'html_tracking_code'	=> '',
+											'html_tracking_code' => '',
-												'img_tracking_code'		=> '',
+											'img_tracking_code'  => '',
-												'visible'				=> 'N'
+											'visible'            => 'N'
-											), array(
+										),
+										array(
-												'id' => $site['Site']['id']
+											'id' => $site['Site']['id']
-											));
+										)
+									);
-									}
-									
+								}
+
-									$error = 'We\'ve encountered an error while updating your sites tags. Please contact us to report this error!';
+								$error =
+									'We\'ve encountered an error while updating your sites tags. Please contact us to report this error!';
-									break;
-								}
-							}
-						}
-						
+								break;
+							}
+						}
+					}
+
-						if ($error=='') {
+					if ($error == '') {
-						 	// Need to add profile id and payment id
-							if ($price_difference > 0) {
-								// Charge the card
-								$defaultPaymentProfile = $this->AuthorizeNet->getDefaultPaymentProfile($this->account);
-								$response              = $this->AuthorizeNet->chargeCard(
-									$this->account['Account']['profile_id'],
-									$defaultPaymentProfile['payment_profile_id'],
-									array(
-										array(
-											'id'          => 'S' . $upgraded_subscription['Subscription']['id'],
-											'name'        => $upgraded_subscription['Subscription']['name'],
-											'description' =>
-												'Subscription monthly tier - Pro-Rated (v' .
-												$upgraded_subscription['SubscriptionsVersion']['version'] .
-												')',
-											'price'       => $price_difference
-										)
-									)
-								);
-							}
-							
-							if (0 == $price_difference || empty($response['error'])) {
-								// Success
-								$this->Account->saveField('subscription_id', $upgraded_subscription['Subscription']['id']);
+						// Need to add profile id and payment id
+						if ($price_difference > 0) {
+							// Charge the card
+							$defaultPaymentProfile = $this->AuthorizeNet->getDefaultPaymentProfile($this->account);
+							$response              = $this->AuthorizeNet->chargeCard(
+								$this->account['Account']['profile_id'],
+								$defaultPaymentProfile['payment_profile_id'],
+								array(
+									array(
+										'id'          => 'S' . $upgraded_subscription['Subscription']['id'],
+										'name'        => $upgraded_subscription['Subscription']['name'],
+										'description' =>
+											'Subscription monthly tier - Pro-Rated (v' .
+											$upgraded_subscription['SubscriptionsVersion']['version'] .
+											')',
+										'price'       => $price_difference
+									)
+								)
+							);
+						}
+
+						if (0 == $price_difference || empty($response['error'])) {
+							// Success
+							$this->Account->saveField('subscription_id', $upgraded_subscription['Subscription']['id']);
 
-								if ($price_difference > 0) {
-									// The card seemed to have been charged, so let's insert the new payment record
-									$this->Account->Payment->create();
-									$this->Account->Payment->save(
-										array(
-											'account_id'      => $this->Account->id,
-											'payment_type_id' => 2,
-											'description'     =>
-												'"' .
-												$upgraded_subscription['Subscription']['name'] .
-												'" Subscription Payment',
-											'value'           => $price_difference,
-											'web_event_count' => ($pageviews ? $pageviews : 0),
-											'transaction_id'  => $response['transactionID'],
-											'added_date'      => date('Y-m-d H:i:s')
-										)
-									);
-								}
+							if ($price_difference > 0) {
+								// The card seemed to have been charged, so let's insert the new payment record
+								$this->Account->Payment->create();
+								$this->Account->Payment->save(
+									array(
+										'account_id'      => $this->Account->id,
+										'payment_type_id' => 2,
+										'description'     =>
+											'"' .
+											$upgraded_subscription['Subscription']['name'] .
+											'" Subscription Payment',
+										'value'           => $price_difference,
+										'web_event_count' => ($pageviews ? $pageviews : 0),
+										'transaction_id'  => $response['transactionID'],
+										'added_date'      => date('Y-m-d H:i:s')
+									)
+								);
+							}
 
-								$this->Session->setFlash('Your account has been successfully upgraded.', 'flash_success');
+							$this->Session->setFlash('Your account has been successfully upgraded.', 'flash_success');
 
-								// Send the user a receipt email.
+							// Send the user a receipt email.
-								$this->UserAccount->sendEmail(array(
+							$this->UserAccount->sendEmail(
+								array(
-										'email_vars'	=> array( // Except for the user's and account's names, which are determined and se(n)t automatically
+									'email_vars' => array( // Except for the user's and account's names, which are determined and se(n)t automatically
-											'account'		=> $this->current_account['Account']['company_name'],
+									                       'account'    => $this->current_account['Account']['company_name'],
-											'account_id'	=> $this->current_account['Account']['id'],
+									                       'account_id' => $this->current_account['Account']['id'],
-											'value'			=> $price_difference,
+									                       'value'      => $price_difference,
-											'service'		=> '"' . $upgraded_subscription['Subscription']['name'] . '" subscription upgrade payment'
+									                       'service'    =>
+										                       '"' .
+										                       $upgraded_subscription['Subscription']['name'] .
+										                       '" subscription upgrade payment'
-										),
+									),
-										'permission'	=> 'credit_card_transaction',
+									'permission' => 'credit_card_transaction',
-										'bcc'     		=> ACCOUNT_MANAGERS,
+									'bcc'        => ACCOUNT_MANAGERS,
-										'template'		=> 'payment-receipt',
+									'template'   => 'payment-receipt',
-										'subject'		=> 'Subscription Payment Receipt'
+									'subject'    => 'Subscription Payment Receipt'
-									));
+								)
+							);
 
-								// Add account to Tag Queue with a status of "Upgraded".
+							// Add account to Tag Queue with a status of "Upgraded".
-								if ($this->current_account['Subscription']['subscription_type'] == 'RTB' && $upgraded_subscription['Subscription']['subscription_type'] == 'R') {
-									$this->TagQueue->updateAll(array(
+							if ($this->current_account['Subscription']['subscription_type'] == 'RTB' &&
+							    $upgraded_subscription['Subscription']['subscription_type'] == 'R'
+							) {
+								$this->TagQueue->updateAll(
+									array(
-											'TagQueue.status'	=> '\'G\'',
+										'TagQueue.status' => '\'G\'',
-											'TagQueue.placed'	=> null
+										'TagQueue.placed' => null
-										), array(
+									),
+									array(
-											'TagQueue.account_id' => $this->current_account['Account']['id'], 
-											'TagQueue.status <> \'R\''
+										'TagQueue.account_id' => $this->current_account['Account']['id'],
+										'TagQueue.status <> \'R\''
-										));
+									)
+								);
-								}
-								
-								// If the new subscription is "Enterprise" level, let an admin know.
-								if ($upgraded_subscription['Subscription']['no_limit'] == true) {
-									// Awww man, they are enterprise level now!
+							}
+
+							// If the new subscription is "Enterprise" level, let an admin know.
+							if ($upgraded_subscription['Subscription']['no_limit'] == true) {
+								// Awww man, they are enterprise level now!
-									$this->sendEmail(array(
+								$this->sendEmail(
+									array(
-						                    'vars'      => array(
+										'vars'     => array(
-						                        'message' => 'The "' . $this->current_account['Account']['company_name'] . '" account has upgraded to an Enterprise subscription (v' . $upgraded_subscription['SubscriptionsVersion']['version'] . ') based on their sites\' total pageviews count (' . number_format($pageviews) . ').' . "\n" .
+											'message' =>
+												'The "' .
+												$this->current_account['Account']['company_name'] .
+												'" account has upgraded to an Enterprise subscription (v' .
+												$upgraded_subscription['SubscriptionsVersion']['version'] .
+												') based on their sites\' total pageviews count (' .
+												number_format($pageviews) .
+												').' .
+												"\n" .
-						                        	'Please contact the account owner about their Enterprise subscription and pricing.'
-						                    ),
+												'Please contact the account owner about their Enterprise subscription and pricing.'
+										),
-						                    'email'     => explode(',', ACCOUNT_MANAGERS),
+										'email'    => explode(',', ACCOUNT_MANAGERS),
-						                    'name'     	=> 'Account Manager',
+										'name'     => 'Account Manager',
-						                    'subject'   => 'Enterprise Pageviews Count',
+										'subject'  => 'Enterprise Pageviews Count',
-						                    'template'  => 'empty'
+										'template' => 'empty'
-						                ));
+									)
+								);
-									//$this->set('enterprise', 'enterprise');
-								}
-								
-							} else {
+								//$this->set('enterprise', 'enterprise');
+							}
+
+						} else {
-								$error = 'There was a problem processing your upgrade. If you continue to receive this message, please visit our <a href="' . FRESHDESK_BASE_URL . '" target="_blank">Support Center</a>.' . $response['error'];
+							$error =
+								'There was a problem processing your upgrade. If you continue to receive this message, please visit our <a href="' .
+								FRESHDESK_BASE_URL .
+								'" target="_blank">Support Center</a>.' .
+								$response['error'];
-							}
-						}
-						
-					} else {
+						}
+					}
+
+				} else {
-						$error = 'There was a problem with your account\'s credentials. Please contact us to report this error!';
+					$error =
+						'There was a problem with your account\'s credentials. Please contact us to report this error!';
-					}
-				}
-				
-				// Either way, return them to the sites page
+				}
+			}
+
+			// Either way, return them to the sites page
-				if ($error=='') {
+			if ($error == '') {
-					$this->redirect(array(
+				$this->redirect(
+					array(
-							'plugin'		=> 'choozle_insights',
+						'plugin'     => 'choozle_insights',
-							'controller'	=> 'audience',
+						'controller' => 'audience',
-							'action'		=> 'manage'
+						'action'     => 'manage'
-						));
+					)
+				);
-				
-				} else {
-					$this->Session->setFlash($error, 'flash_alert');
-				}
-			}
-			
-			$this->set('needs_upgrade', $needs_upgrade);
-			$this->set('current_type', $this->current_account['Subscription']['subscription_type']);
-		}
-		
+
+			} else {
+				$this->Session->setFlash($error, 'flash_alert');
+			}
+		}
+
+		$this->set('needs_upgrade', $needs_upgrade);
+		$this->set('current_type', $this->current_account['Subscription']['subscription_type']);
+	}
+
-		
-	    public function get_coupon_details() {
+	public function get_coupon_details()
+	{
-	        $this->autoRender = false;
+		$this->autoRender = false;
-	        $this->layout = false;
+		$this->layout     = false;
-			
-			if (!empty($_POST['coupon'])) {
+
+		if (!empty($_POST['coupon'])) {
-				$coupon = $this->Coupon->find('first', array(
+			$coupon = $this->Coupon->find(
+				'first',
+				array(
-						'conditions' => array(
-							'coupon_code' => $_POST['coupon']
-						)
+					'conditions' => array(
+						'coupon_code' => $_POST['coupon']
+					)
-					));
+				)
+			);
-				
-				if ($coupon) {
-					// Next let's check if the current coupon is valid
+
+			if ($coupon) {
+				// Next let's check if the current coupon is valid
-					if ($coupon['Coupon']['start_date'] && strtotime($coupon['Coupon']['start_date'])>time()) {
+				if ($coupon['Coupon']['start_date'] && strtotime($coupon['Coupon']['start_date']) > time()) {
-						echo json_encode(array(
+					echo json_encode(
+						array(
-								'message' => 'The submitted coupon code is not valid yet'
+							'message' => 'The submitted coupon code is not valid yet'
-							));
+						)
+					);
-						die();
-					}
-					
+					die();
+				}
+
-					if ($coupon['Coupon']['end_date'] && strtotime($coupon['Coupon']['end_date'])<time()) {
+				if ($coupon['Coupon']['end_date'] && strtotime($coupon['Coupon']['end_date']) < time()) {
-						echo json_encode(array(
+					echo json_encode(
+						array(
-								'message' => 'The submitted coupon code is no longer valid'
+							'message' => 'The submitted coupon code is no longer valid'
-							));
+						)
+					);
-						die();
-					}
-					
-					if (!empty($coupon['Coupon']['usage_number'])) {
-						// Let's check how many times the current coupon has already been used
-						$conditions = array(
-							'coupon_id' => $coupon['Coupon']['id']
-						);
+					die();
+				}
+
+				if (!empty($coupon['Coupon']['usage_number'])) {
+					// Let's check how many times the current coupon has already been used
+					$conditions = array(
+						'coupon_id' => $coupon['Coupon']['id']
+					);
 
-						$coupons = $this->Account->AccountsCoupon->find('all', array(
+					$coupons = $this->Account->AccountsCoupon->find(
+						'all',
+						array(
-									'conditions' => $conditions
+							'conditions' => $conditions
-								));
+						)
+					);
 
-						if (count($coupons)>=$coupon['Coupon']['usage_number']) {
+					if (count($coupons) >= $coupon['Coupon']['usage_number']) {
-							echo json_encode(array(
+						echo json_encode(
+							array(
-									'message' => 'The submitted coupon code has reached its maximum number of usages and can no longer be used'
+								'message' => 'The submitted coupon code has reached its maximum number of usages and can no longer be used'
-								));
+							)
+						);
-							die();
-						}
-					}
+						die();
+					}
+				}
 
-					if ($coupon['Coupon']['is_active']!='1') {
+				if ($coupon['Coupon']['is_active'] != '1') {
-						echo json_encode(array(
+					echo json_encode(
+						array(
-								'message' => 'The submitted coupon code is not active'
+							'message' => 'The submitted coupon code is not active'
-							));
+						)
+					);
-						die();
-					}
-					
-					// If we've reached this far, everything's good,
-					// so let's return the coupon's value and type
+					die();
+				}
+
+				// If we've reached this far, everything's good,
+				// so let's return the coupon's value and type
-					echo json_encode(array(
+				echo json_encode(
+					array(
-							'coupon' => array(
+						'coupon' => array(
-								'value'		=> $coupon['Coupon']['amount'],
+							'value' => $coupon['Coupon']['amount'],
-								'type'		=> str_replace('1', '$',
-									str_replace('2', '%', $coupon['Coupon']['amount_type'])),
+							'type'  => str_replace(
+								'1',
+								'$',
+								str_replace('2', '%', $coupon['Coupon']['amount_type'])
+							),
-							)
+						)
-						));
+					)
+				);
-					
-				} else {
+
+			} else {
-					echo json_encode(array(
+				echo json_encode(
+					array(
-							'message' => 'Invalid coupon code'
+						'message' => 'Invalid coupon code'
-						));
+					)
+				);
-				}
-				
-				die();
-			}
-			
-			echo json_encode(array());
-		}
-		
+			}
+
+			die();
+		}
+
+		echo json_encode(array());
+	}
+
-		
-	    private function get_next_scheduled_upgradable_charts_payment_date() {
-	    	usort($this->current_account['Payment'], function ($x, $y) {
-				    return strtotime($y['added_date']) - strtotime($x['added_date']);
-				});
-			
-	    	foreach($this->current_account['Payment'] as $payment) { // have they made a subscription payment ever?
-	    		if ($payment['payment_type_id'] == 2) { // they've made a subscription payment before!
-	    			$last_payment_date = $payment['added_date'];
-	    			break;
-	    		}
-	    	}
-	    	
-			// check last payment date and add one month
-	    	if (!isset($last_payment_date)) { // could find a prior payment
-				/*
-	    		if ($this->current_account['Account']['custom_billing'] == 'Y') {
-					$next_date = date('Y-m-d H:i:s',strtotime($this->current_account['Account']['custom_subscription_start']));
-	    		} else {
-	    			*/
-	    			// well, now what? they aren't set up to be billed for anything
-	    			// what if we make it just so it's only turned on for 30 days, nothing renews? That should be a good enough solution for now, right???
-	    			$next_date = 'none';
-	    		//}
-	    	} else {
-	    		$next_date = date('Y-m-d H:i:s',strtotime($last_payment_date.' + 1 month'));
-	    	}
-
-	    	return $next_date;
-	    }
-
-		/**
-		 * Displays a list of all payments for an account. Defaults to showing
-		 * payments from the last month.
-		 */
+	/**
+	 * Displays a list of all payments for an account. Defaults to showing
+	 * payments from the last month.
+	 */
-		public function payments() {
+	public function payments()
+	{
-			$fund_label = 'funds';
-			if ($this->current_account['Account']['invoice_billing'] == 'Y') {
-				$fund_label = 'spend';
-			}
-			$this->set('fund_label', $fund_label);
-			
+		$fund_label = 'funds';
+		if ($this->current_account['Account']['invoice_billing'] == 'Y') {
+			$fund_label = 'spend';
+		}
+		$this->set('fund_label', $fund_label);
+
-			
-			$payment_types = $this->Payment->find('all', array(
+		$payment_types = $this->Payment->find(
+			'all',
+			array(
-					'conditions'	=> array(
+				'conditions' => array(
-						'Payment.account_id' => $this->account['Account']['id']
-					), 
+					'Payment.account_id' => $this->account['Account']['id']
+				),
-					'fields'		=> 'DISTINCT Payment.payment_type_id, PaymentType.type', 
+				'fields'     => 'DISTINCT Payment.payment_type_id, PaymentType.type',
-					'joins'			=> array(
+				'joins'      => array(
-						array(
+					array(
-							'alias' 		=> 'PaymentType', 
+						'alias'      => 'PaymentType',
-							'conditions'	=> array(
+						'conditions' => array(
-								'Payment.payment_type_id = PaymentType.id'
-							), 
+							'Payment.payment_type_id = PaymentType.id'
+						),
-							'table' 		=> 'payment_types'
+						'table'      => 'payment_types'
-						)
-					)
+					)
+				)
-				));
+			)
+		);
-			$this->set('payment_types', $payment_types);
-			
+		$this->set('payment_types', $payment_types);
+
-			
-			$type = $this->_set_payment_type();
+		$type     = $this->_set_payment_type();
-			$dates = $this->_set_payment_dates();
+		$dates    = $this->_set_payment_dates();
-			$payments = $this->AccountComponent->getPayments($this->account['Account']['id'], $dates['from'], $dates['to'], $type);
+		$payments =
+			$this->AccountComponent->getPayments($this->account['Account']['id'], $dates['from'], $dates['to'], $type);
-			$this->set('payments', $payments);
-		}
-		
+		$this->set('payments', $payments);
+	}
+
-		
-	    /**
-		 * Displays payments report PDF.
-		 */
+	/**
+	 * Displays payments report PDF.
+	 */
-		public function payments_pdf($id = null) {
+	public function payments_pdf($id = null)
+	{
-			$type = $this->_set_payment_type();
+		$type  = $this->_set_payment_type();
-			$dates = $this->_set_payment_dates();
-			
+		$dates = $this->_set_payment_dates();
+
-			$payments = $this->AccountComponent->getPayments($this->account['Account']['id'], $dates['from'], $dates['to'], $type);
+		$payments =
+			$this->AccountComponent->getPayments($this->account['Account']['id'], $dates['from'], $dates['to'], $type);
-			$this->set('payments', $payments);
-			
+		$this->set('payments', $payments);
+
-			
-			$download = false;
-			// Check if a print dialog should be automatically triggered.
+		$download = false;
+		// Check if a print dialog should be automatically triggered.
-			if(isset($this->request->query['print'])) {
+		if (isset($this->request->query['print'])) {
-				$this->set('print', true);
-			} else {
-				$this->set('print', false);
-				
-				// Now check if a download dialog should be automatically triggered.
+			$this->set('print', true);
+		} else {
+			$this->set('print', false);
+
+			// Now check if a download dialog should be automatically triggered.
-				if(isset($this->request->query['download'])) {
+			if (isset($this->request->query['download'])) {
-					$download = true;
-				}
-			}
-			
-			$filename = 'account-payments.pdf';
-			
-			// Make sure controller doesn't automatically show view.
-			$this->autoRender = false;
-			Configure::write('Asset.timestamp', false);
-			
-			// Get stripped down PDF view HTML.
+				$download = true;
+			}
+		}
+
+		$filename = 'account-payments.pdf';
+
+		// Make sure controller doesn't automatically show view.
+		$this->autoRender = false;
+		Configure::write('Asset.timestamp', false);
+
+		// Get stripped down PDF view HTML.
-			$view = new View($this);
+		$view         = new View($this);
-			$view->layout = 'pdf';
-			$view->viewPath .= DS . 'pdf';
-			$html = $view->render();
-			
-			// Create the PDF and, either send it to the browser or trigger a download,
-			// depending on the $download param.
-			$this->Pdf->create($html, $filename, $download);
-		}
-		
+		$view->layout = 'pdf';
+		$view->viewPath .= DS . 'pdf';
+		$html = $view->render();
+
+		// Create the PDF and, either send it to the browser or trigger a download,
+		// depending on the $download param.
+		$this->Pdf->create($html, $filename, $download);
+	}
+
-		
-		/**
-		 * Emails payments report PDF.
-		 */
+	/**
+	 * Emails payments report PDF.
+	 */
-		public function email_payments() {
+	public function email_payments()
+	{
-			$type = $this->_set_payment_type();
+		$type  = $this->_set_payment_type();
-			$dates = $this->_set_payment_dates();
-			
+		$dates = $this->_set_payment_dates();
+
-			$payments = $this->AccountComponent->getPayments($this->account['Account']['id'], $dates['from'], $dates['to'], $type);
+		$payments =
+			$this->AccountComponent->getPayments($this->account['Account']['id'], $dates['from'], $dates['to'], $type);
-			$this->set('payments', $payments);
-			
+		$this->set('payments', $payments);
+
-			$filename_nice = 'account-payments.pdf';
+		$filename_nice   = 'account-payments.pdf';
-			$filename_unique = 'account-payments.' . mt_rand() . '.pdf';
+		$filename_unique = 'account-payments.' . mt_rand() . '.pdf';
-			$filepath = TMP . 'report_pdfs' . DS;
+		$filepath        = TMP . 'report_pdfs' . DS;
-			
-			// Make sure controller doesn't automatically show view.
-			$this->autoRender = false;
-			Configure::write('Asset.timestamp', false);
-			
-			// Get stripped down PDF view HTML.
+
+		// Make sure controller doesn't automatically show view.
+		$this->autoRender = false;
+		Configure::write('Asset.timestamp', false);
+
+		// Get stripped down PDF view HTML.
-			$view = new View($this);
+		$view         = new View($this);
-			$view->layout = 'pdf';
-			$view->viewPath .= DS . 'pdf';
-			$html = $view->render('payments_pdf');
-			
-			// Create the PDF and save it.
-			$pdf_filepath = $this->Pdf->save($html, $filepath . $filename_unique, false);
-			
-			if (!file_exists($filepath . $filename_unique)) {
-				// This should never happen. Account for it just in case.
-				echo json_encode(array('error' => 'Error creating file.'));
-				exit;
-			}
-			
+		$view->layout = 'pdf';
+		$view->viewPath .= DS . 'pdf';
+		$html = $view->render('payments_pdf');
+
+		// Create the PDF and save it.
+		$pdf_filepath = $this->Pdf->save($html, $filepath . $filename_unique, false);
+
+		if (!file_exists($filepath . $filename_unique)) {
+			// This should never happen. Account for it just in case.
+			echo json_encode(array('error' => 'Error creating file.'));
+			exit;
+		}
+
-			
-			$content = 'Attached is a PDF containing all payments for the ' . $this->account['Account']['company_name'] . ' account';
+		$content =
+			'Attached is a PDF containing all payments for the ' .
+			$this->account['Account']['company_name'] .
+			' account';
-			if ($dates['from'] && $dates['to']) {
-				$content .= ' from ' . $dates['from'] . ' to ' . $dates['to'] . '.';
-			} elseif ($dates['from']) {
-				$content .= ' since ' . $dates['from'] . '.';
-			} elseif ($dates['to']) {
-				$content .= ' thru ' . $dates['to'] . '.';
-			} else {
-				$content .= '.';
-			}
-			
-			// Send email.
+		if ($dates['from'] && $dates['to']) {
+			$content .= ' from ' . $dates['from'] . ' to ' . $dates['to'] . '.';
+		} elseif ($dates['from']) {
+			$content .= ' since ' . $dates['from'] . '.';
+		} elseif ($dates['to']) {
+			$content .= ' thru ' . $dates['to'] . '.';
+		} else {
+			$content .= '.';
+		}
+
+		// Send email.
-			$user_email = $this->UserAccount->sendEmail(array(
+		$user_email = $this->UserAccount->sendEmail(
+			array(
-					'email_vars'	=> array(
+				'email_vars'  => array(
-						'content' => $content,
-					),
+					'content' => $content,
+				),
-					'template'		=> 'default',
+				'template'    => 'default',
-					'subject'		=> 'Campaign Report',
+				'subject'     => 'Campaign Report',
-					'attachments'	=> array($filename_nice => $filepath . $filename_unique)
+				'attachments' => array($filename_nice => $filepath . $filename_unique)
-				));
-			echo json_encode(array(
+			)
+		);
+		echo json_encode(
+			array(
-				'success' 	=> 'true',
+				'success' => 'true',
-				'email' 	=> $user_email
+				'email'   => $user_email
-			));
+			)
+		);
-			
-			// Get rid of temporary PDF file.
-			unlink($filepath . $filename_unique);
-			exit;
-		}
-		
-		/**
-		 * Sets the "type" payment value from a GET parameter.
-		 * Used for payment actions.
-		 * 
-		 */
+
+		// Get rid of temporary PDF file.
+		unlink($filepath . $filename_unique);
+		exit;
+	}
+
+	/**
+	 * Sets the "type" payment value from a GET parameter.
+	 * Used for payment actions.
+	 *
+	 */
-		private function _set_payment_type() {
+	private function _set_payment_type()
+	{
-			$type = null;
-			
-			if (!empty($_GET['type']) && is_numeric($_GET['type'])) {
+		$type = null;
+
+		if (!empty($_GET['type']) && is_numeric($_GET['type'])) {
-				if ($payment_type = $this->Payment->find('first', array(
+			if ($payment_type = $this->Payment->find(
+				'first',
+				array(
-						'conditions'	=> array(
+					'conditions' => array(
-							'Payment.account_id'		=> $this->account['Account']['id'], 
+						'Payment.account_id'      => $this->account['Account']['id'],
-							'Payment.payment_type_id'	=> $_GET['type']
+						'Payment.payment_type_id' => $_GET['type']
-						)
+					)
-					))) {
+				)
+			)
+			) {
-					$type = $_GET['type'];
-					
-				} else {
-					unset($_GET['type']);
-				}
-			}
-			$this->set('type', $type);
-			
-			return $type;
-		}
-		
-		/**
-		 * Sets "from" and "to" dates from GET parameters. Used for payment actions.
-		 */
+				$type = $_GET['type'];
+
+			} else {
+				unset($_GET['type']);
+			}
+		}
+		$this->set('type', $type);
+
+		return $type;
+	}
+
+	/**
+	 * Sets "from" and "to" dates from GET parameters. Used for payment actions.
+	 */
-		private function _set_payment_dates() {
-			if (isset($this->params->query['from']) && strtotime($this->params->query['from']) > 0) {
+	private function _set_payment_dates()
+	{
+		if (isset($this->request->query['from']) && strtotime($this->request->query['from']) > 0) {
-				// User explicitly requested a valid date.
+			// User explicitly requested a valid date.
-				$from = date('d M Y', strtotime($this->params->query['from']));
-			} elseif (isset($this->params->query['from']) && empty($this->params->query['from'])) {
+			$from = date('d M Y', strtotime($this->request->query['from']));
+		} elseif (isset($this->request->query['from']) && empty($this->request->query['from'])) {
-				// User explicitly requested no beginning date.
-				$from = null;
-			} else {
-				// User either requested an invalid date, or no date was specified.
-				// Default to the 1st of the current month.
-				$first_of_month = '1 ' . date('M') . ' ' . date('Y');
+			// User explicitly requested no beginning date.
+			$from = null;
+		} else {
+			// User either requested an invalid date, or no date was specified.
+			// Default to the 1st of the current month.
+			$first_of_month = '1 ' . date('M') . ' ' . date('Y');
-				$from = date('d M Y', strtotime($first_of_month));
+			$from           = date('d M Y', strtotime($first_of_month));
-			}
-			
+		}
+
-			if (isset($this->params->query['to']) && strtotime($this->params->query['to']) > 0) {
+		if (isset($this->request->query['to']) && strtotime($this->request->query['to']) > 0) {
-				// User explicitly requested a valid date.
+			// User explicitly requested a valid date.
-				$to = date('d M Y', strtotime($this->params->query['to']));
-			} elseif (isset($this->params->query['to']) && empty($this->params->query['to'])) {
+			$to = date('d M Y', strtotime($this->request->query['to']));
+		} elseif (isset($this->request->query['to']) && empty($this->request->query['to'])) {
-				// User explicitly requested no end date.
-				$to = null;
-			} else {
-				// User either requested an invalid date, or no date was specified.
-				// Default to today.
-				$to = date('d M Y');
-			}
-			
-			$this->set('from', $from);
-			$this->set('to', $to);
-			
-			return array(
+			// User explicitly requested no end date.
+			$to = null;
+		} else {
+			// User either requested an invalid date, or no date was specified.
+			// Default to today.
+			$to = date('d M Y');
+		}
+
+		$this->set('from', $from);
+		$this->set('to', $to);
+
+		return array(
-				'from'	=> $from,
+			'from' => $from,
-				'to'	=> $to
+			'to'   => $to
-			);
-		}
-	}
+		);
+	}
+}
Index: app/Plugin/Accounts/View/Accounts/index.ctp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/Plugin/Accounts/View/Accounts/index.ctp	(date 1425427504000)
+++ app/Plugin/Accounts/View/Accounts/index.ctp	(revision )
@@ -1,20 +1,17 @@
 <div class="header-spacer"></div>
 <div class="row">
-    <div class="columns">
+	<div class="columns">
-    	<?php
-		    // BEGIN WHAT'S NEW NOTIFICATION
-		    if($notes_seen < 1) {
-		?>
-		            <div data-alert class="alert-box radius whats-new new-features-alert" title="<?php echo $release_notes['CMSPage']['modified']; ?>">
+		<?php // BEGIN WHAT'S NEW NOTIFICATION ?>
+
+		<?php if ($notes_seen < 1): ?>
+			<div data-alert class="alert-box radius whats-new new-features-alert"
+			     title="<?php echo $release_notes['CMSPage']['modified']; ?>">
-		            	<span><?php echo $release_notes['CMSPage']['body']; ?></span>
-		            	<a href="javascript:;" class="close" title="Close">&times;</a>
-		            </div>
+				<span><?php echo $release_notes['CMSPage']['body']; ?></span>
+				<a href="javascript:;" class="close" title="Close">&times;</a>
+			</div>
-		<?php
-		    }
-		    // END WHAT'S NEW NOTIFICATION
-		?>
+		<?php endif; // END WHAT'S NEW NOTIFICATION ?>
 		<?php echo $this->Session->flash(); ?>
-    </div>
+	</div>
 </div>
 <div class="row">
 	<div class="columns main-content-column">
@@ -23,180 +20,194 @@
 			<div class="columns medium-7">
 				<form method="get">
 					<div class="row">
-<?php
-	$paginator_params = $this->Paginator->params();
+						<?php
+						$paginator_params = $this->Paginator->params();
 
-	if($paginator_params['count']>10 || !empty($filter)) {
+						if ($paginator_params['count'] > 10 || !empty($filter)):
-?>
-						<div class="medium-5 medium-offset-1 columns">
+							?>
+							<div class="medium-5 medium-offset-1 columns">
-							<input name="filter" placeholder="Filter accounts list" type="text" value="<?php echo @$filter ? htmlspecialchars($filter) : ''; ?>" />
+								<input name="filter" placeholder="Filter accounts list" type="text"
+								       value="<?php echo @$filter ? htmlspecialchars($filter) : ''; ?>"/>
-						</div>
-						<div class="medium-2 columns">
+							</div>
+							<div class="medium-2 columns">
-							<input class="button radius small expand" type="submit" value="Filter" />
+								<input class="button radius small expand" type="submit" value="Filter"/>
-						</div>
+							</div>
-<?php
-	}
-?>
+						<?php endif; ?>
-						
+
-						
 						<div class="medium-4 columns right">
-<?php
+							<?php
-							echo $this->Html->link('Add New Account', array(
+							echo $this->Html->link(
+								'Add New Account',
+								array(
-									'controller'	=> 'accounts', 
+									'controller' => 'accounts',
-									'action' 		=> 'add', 
+									'action'     => 'add',
-									'?' 			=> array(
+									'?'          => array(
 										'create' => 'true'
-									)), array(
+									)
+								),
+								array(
 									'class' => 'button small success radius expand'
-								));
+								)
+							);
-?>
+							?>
 						</div>
 					</div>
 				</form>
-	  		</div>
+			</div>
 		</div>
-		
+
 		<table width="100%">
-	        <thead>
-		        <tr>
-		            <th width="30"></th>
-<?php
+			<thead>
+			<tr>
+				<th width="30"></th>
+				<?php
 
-	$sort = 'neutral';
+				$sort = 'neutral';
-	if (@$_GET['sort'] && $_GET['sort']=='company_name') {
+				if (@$_GET['sort'] && $_GET['sort'] == 'company_name') {
-		if (@$_GET['direction']=='asc') {
+					if (@$_GET['direction'] == 'asc') {
-			$sort = 'asc';
+						$sort = 'asc';
 
-		} else if (@$_GET['direction']=='desc') {
+					} elseif (@$_GET['direction'] == 'desc') {
-			$sort = 'desc';
-		}
-	}
-?>
+						$sort = 'desc';
+					}
+				}
+				?>
-		            <th class="<?php echo $sort; ?>"><?php echo $this->Paginator->sort('company_name', 'Name'); ?><span></span></th>
+				<th class="<?php echo $sort; ?>"><?php echo $this->Paginator->sort('company_name', 'Name'); ?>
+					<span></span></th>
-		            <th>Subscription</th>
-		            <th>Industry</th>
-		            <th>Region</th>
-<?php
+				<th>Subscription</th>
+				<th>Industry</th>
+				<th>Region</th>
+				<?php
 
-	$sort = 'neutral';
+				$sort = 'neutral';
-	if (@$_GET['sort'] && $_GET['sort']=='Account.created') {
+				if (@$_GET['sort'] && $_GET['sort'] == 'Account.created') {
-		if (@$_GET['direction']=='asc') {
+					if (@$_GET['direction'] == 'asc') {
-			$sort = 'asc';
+						$sort = 'asc';
 
-		} else if (@$_GET['direction']=='desc') {
+					} else if (@$_GET['direction'] == 'desc') {
-			$sort = 'desc';
-		}
-	}
-?>
+						$sort = 'desc';
+					}
+				}
+				?>
-		            <th class="<?php echo $sort; ?>"><?php echo $this->Paginator->sort('Account.created', 'Created'); ?><span></span></th>
+				<th class="<?php echo $sort; ?>"><?php echo $this->Paginator->sort('Account.created', 'Created'); ?>
+					<span></span></th>
-		            <th width="340"></th>
-		        </tr>
-	        </thead>
-	        <!-- Here is where we loop through our $accounts array, printing out account info -->
-	        <tbody>
-<?php
+				<th width="340"></th>
+			</tr>
+			</thead>
+			<!-- Here is where we loop through our $accounts array, printing out account info -->
+			<tbody>
+			<?php
-	foreach ($accounts as $account) {
+			foreach ($accounts as $account):
-?>
-		        <tr>
-		            <td>
-<?php
+				?>
+				<tr>
+					<td>
+						<?php
-		if (in_array($account[0]['account_state'], array('I', 'P'))) {
-			echo '<a href="javascript:;" class="dropdown-label warning"' . (!empty($account[0]['warnings']) ? ' data-dropdown="accountAlertDrop" data-reason="' . htmlspecialchars(str_replace('"', '&quot;', json_encode($account[0]['warnings']))) . '"' : '') . '><span class="icon-warning alert-text"></span></a>';
+						if (in_array($account['account_state'], array('I', 'P'))) {
+							echo
+								'<a href="javascript:;" class="dropdown-label warning"' .
+								(!empty($account['warnings']) ?
+									' data-dropdown="accountAlertDrop" data-reason="' .
+									htmlspecialchars(str_replace('"', '&quot;', json_encode($account['warnings']))) .
+									'"' : '') .
+								'><span class="icon-warning alert-text"></span></a>';
-		}
-?>
-		            </td>
-		            <td>
-<?php
+						}
+						?>
+					</td>
+					<td>
+						<?php
-		if ($account[0]['subscription_type'] == 'RTB') {
+						if ($account['subscription_type'] == 'RTB') {
-			$redir_destination = 'campaigns';
-		} else {
-			$redir_destination = 'insights';
-		}
-		
+							$redir_destination = 'campaigns';
+						} else {
+							$redir_destination = 'insights';
+						}
+
-		echo $this->Html->link($account[0]['company_name'], array('controller' => 'accounts', 'action' => 'view', $account[0]['id'], '?' => array('redirect' => $redir_destination)));
+						echo $this->Html->link(
+							$account['company_name'],
+							array(
+								'controller' => 'accounts',
+								'action'     => 'view',
+								$account['id'],
+								'?'          => array('redirect' => $redir_destination)
+							)
+						);
-?>
+						?>
 
-		            </td>
+					</td>
-		            <td><?php echo $account[0]['subscription'] ? $account[0]['subscription'] : ($account[0]['account_state']=='I' ? 'Locked' : 'Trial'); ?></td>
-		            <td><?php echo $account[0]['industry']; ?></td>
-		            <td><?php echo $account[0]['region']; ?></td>
-		            <td><?php echo date('d F Y', strtotime($account[0]['created'])); ?></td>
+					<td><?php echo $account['subscription'] ? $account['subscription']
+							: ($account['account_state'] == 'I' ? 'Locked' : 'Trial'); ?></td>
+					<td><?php echo $account['industry']; ?></td>
+					<td><?php echo $account['region']; ?></td>
+					<td><?php echo date('d F Y', strtotime($account['created'])); ?></td>
-		            <td>
+					<td>
-		            	<?php echo $this->Html->link('Edit', array(
+						<?php echo $this->Html->link(
+							'Edit',
+							array(
-                              'action'	=> 'view',
+								'action' => 'view',
-                                $account[0]['id'],
+								$account['id'],
-								'?' 	=> array(
+								'?'      => array(
-                                    'redirect' => 'add'
+									'redirect' => 'add'
-                                )),
+								)
+							),
-                                array(
-                                    'class' => 'button small radius'
+							array(
+								'class' => 'button small radius'
-                                )); ?>
-                         <input class="button small radius tagModal" data-reveal-id="tagModal" data-value="<?php echo htmlspecialchars('<script type="text/javascript" src="' . ENSIGHTEN_TAG_DOMAIN . 'choozle/' . str_replace(' ', '', $account[0]['id']) . '/Bootstrap.js"></script>'); ?>" type="button" value="Smart Container" />
-                        <?php echo $this->Html->link('Download Reports', array(
+							)
+						);
+						?>
+						<?php $dataValue = htmlspecialchars(
+							'<script type="text/javascript" src="' .
+							ENSIGHTEN_TAG_DOMAIN .
+							'choozle/' .
+							str_replace(' ', '', $account['id']) .
+							'/Bootstrap.js"></script>'
+						);
+						?>
+						<input class="button small radius tagModal" data-reveal-id="tagModal"
+						       data-value="<?php echo $dataValue ?>" type="button" value="Smart Container"/>
+						<?php echo $this->Html->link(
+							'Download Reports',
+							array(
-                                'action'	=> 'view',
+								'action' => 'view',
-                                $account[0]['id'],
+								$account['id'],
-                                '?' 		=> array(
+								'?'      => array(
-                                    'redirect' => 'download_reports'
+									'redirect' => 'download_reports'
-                                )),
+								)
+							),
-                                array(
-                                    'class' => 'button small radius'
+							array(
+								'class' => 'button small radius'
-                                )); ?>
+							)
+						); ?>
 					</td>
-		        </tr>
+				</tr>
-<?php
-	}
-
-	unset($account);
-?>
+			<?php endforeach; // End accounts foreach ?>
+			<?php unset($account); ?>
-	        </tbody>
-<?php
+			</tbody>
+			<?php
-	echo $this->element('ListPager', array(
+			echo $this->element(
+				'ListPager',
+				array(
-			'colspan'		=> 7,
+					'colspan'    => 7,
-			'page_param'	=> 'page',
+					'page_param' => 'page',
-			'paginator'		=> $this->Paginator
+					'paginator'  => $this->Paginator
-		));
+				)
+			);
-?>
-	    </table>
-	    <!--<a href="#" data-reveal-id="systemMessageModal">Test system message modal</a>-->
-    </div>
+			?>
+		</table>
+		<!--<a href="#" data-reveal-id="systemMessageModal">Test system message modal</a>-->
+	</div>
 </div>
-<?php /* SYSTEM MODAL HTML
-<div id="systemMessageModal" class="reveal-modal small system-message-modal">
-	<div class="row">
-		<div class="columns">
-			<h4>Dialog Header</h4>
-			<hr />
-			<p>Lorem ipsum dolor sit amet.</p>
-		</div>
-	</div>
-	<div id="confirmButtonRow" class="row">
-		<div class="large-6 columns">
-			<input type="button" class="button small radius expand" value="Yes" />
-		</div>
-		<div class="large-6 columns">
-			<input type="button" class="button small radius expand" value="No" />
-		</div>
-	</div>
-	<div id="alertButtonRow" class="row">
-		<div class="columns">
-			<input type="button" class="button small radius expand" value="OK" />
-		</div>
-	</div>
-	<div id="promptButtonRow" class="row">
-		<div class="columns">
-			<input type="text" value="" />
-			<input type="button" class="button small radius expand" value="OK" />
-		</div>
-	</div>
-</div>
-*/ ?>
+
 <div id="tagModal" class="reveal-modal medium" data-reveal>
-    <h4>Smart Container</h4>
+	<h4>Smart Container</h4>
+
-    <div class="alert-box radius warning">
+	<div class="alert-box radius warning">
-		<input id="tagCodeSnippet" onclick="this.setSelectionRange(0, this.value.length)" type="text" value="" />
+		<input id="tagCodeSnippet" onclick="this.setSelectionRange(0, this.value.length)" type="text" value=""/>
-		<p>Press <kbd>Ctrl</kbd> + <kbd>C</kbd> for Windows, or <kbd>Command</kbd> + <kbd>C</kbd> for Mac, to copy the code snippet above to your clipboard.</p>
+
+		<p>Press <kbd>Ctrl</kbd> + <kbd>C</kbd> for Windows, or <kbd>Command</kbd> + <kbd>C</kbd> for Mac, to copy the
+			code snippet above to your clipboard.</p>
 	</div>
-	<p>Copy and paste the Smart Container inside the &lt;head&gt; tag on every page of your website. If your website uses a template you can add it to the template and it should populate on all of the pages. When adding the code to your page it should look something like this:</p>
+	<p>Copy and paste the Smart Container inside the &lt;head&gt; tag on every page of your website. If your website
+		uses a template you can add it to the template and it should populate on all of the pages. When adding the code
+		to your page it should look something like this:</p>
 	<pre>
 &lt;head&gt;
 
@@ -205,8 +216,12 @@
 
 &lt;/head&gt;
 	</pre>
-	<br />
+	<br/>
-	<p>If you are using Google Tag Manager on your website the best practice is to deploy the entire Choozle Smart Container script code (incl. the &lt;script&gt; &lt;/script&gt; tags) as a Custom HTML Tag within the container. Find out more at <a href="https://support.google.com/tagmanager/answer/3281386?hl=en&ref_topic=3281056" target="_blank">https://support.google.com</a>.</p>
+
+	<p>If you are using Google Tag Manager on your website the best practice is to deploy the entire Choozle Smart
+		Container script code (incl. the &lt;script&gt; &lt;/script&gt; tags) as a Custom HTML Tag within the container.
+		Find out more at <a href="https://support.google.com/tagmanager/answer/3281386?hl=en&ref_topic=3281056"
+		                    target="_blank">https://support.google.com</a>.</p>
 	<a class="close-reveal-modal">&#215;</a>
 </div>
 
