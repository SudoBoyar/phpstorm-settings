Index: app/Plugin/Accounts/View/Accounts/add.ctp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/Plugin/Accounts/View/Accounts/add.ctp	(revision 910dfd7682da8acc8b40dd52d87737fc871111b0)
+++ app/Plugin/Accounts/View/Accounts/add.ctp	(revision )
@@ -73,8 +73,8 @@
 
 <div class="row">
 	<div class="large-12 column">
-		<?php 
-			echo (empty($account_details) ? '<h4>Choozle Account Registration</h4>' : '<h4>Edit Account</h4>'); 
+		<?php
+			echo (empty($account_details) ? '<h4>Choozle Account Registration</h4>' : '<h4>Edit Account</h4>');
 			if (!isset($hide_user)) {
 				echo '<h6 class="subheader">Create an account TODAY and harness the power of big data and real-time advertising into a simplified and scalable marketing platform.</h6>';
 			}
@@ -111,7 +111,7 @@
 <?php
 	}
 ?>
-	
+
 		<?php echo $this->element('infoBilling'); ?>
 		<div class="text-center">
 <?php
@@ -119,7 +119,7 @@
 ?>
 			<?php
 				echo $this->Form->input('User.terms', array(
-						'checked'	=> (@$_POST['data']['User']['terms']), 
+						'checked'	=> (@$_POST['data']['User']['terms']),
 		                'div'       => false,
 		                'label'     => false,
 		                'required'	=> true,
@@ -135,10 +135,10 @@
 			</p>
 <?php
 	}
-	
+
 	if (!isset($account_details)) {
 		echo $this->Form->submit(__('Create Account',true), array('class'=>'button large coral radius', 'div' => false));
-		
+
 	} else {
 		echo $this->Form->submit(__('Save', true), array('id' => 'addFormSubmit', 'class' => 'button success radius', 'div' => false));
 
Index: app/Controller/Component/UserAccountComponent.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/Controller/Component/UserAccountComponent.php	(revision 910dfd7682da8acc8b40dd52d87737fc871111b0)
+++ app/Controller/Component/UserAccountComponent.php	(revision )
@@ -164,675 +164,949 @@
 		 * (since they share quite a lot of their code)
 		 *
 		 **/
-		public function register($user = null, $account = null) {
-			if (($this->Controller->request->is('post') || $this->Controller->request->is('put')) && ($account || (isset($this->Controller->request->data['User']['terms']) && $this->Controller->request->data['User']['terms'] != 0)) &&
-				($account || (isset($this->Controller->request->data['Account']['subscription_id']) && is_numeric($this->Controller->request->data['Account']['subscription_id']) && ($subscription = $this->Controller->Subscription->find('first', array(
+		public function register($user = null, $account = null)
+		{
+			// First check for reasons not to do this
+			if (!$this->Controller->request->is('post') && !$this->Controller->request->is('put')) {
+				// Only allow POST and PUT
+				return;
+			}
+
+			if (!$account) {
+				// Creating
+				if (!isset($this->Controller->request->data['User']['terms']) ||
+				    $this->Controller->request->data['User']['terms'] == 0
+				) {
+					// Must agree to the terms
+					return;
+				} elseif (
+					!isset($this->Controller->request->data['Account']['subscription_id']) ||
+					!is_numeric($this->Controller->request->data['Account']['subscription_id'])
+				) {
+					// Must have a subscription selected
+					return;
+				}
+			}
+
+			// Make sure it's a valid subscription
+			$subscription = $this->Controller->Subscription->find(
+				'first',
+				array(
-						'conditions' => array(
-							'Subscription.id' => $this->Controller->request->data['Account']['subscription_id']
-						)
+					'conditions' => array(
+						'Subscription.id' => $this->Controller->request->data['Account']['subscription_id']
+					)
-					)))))) {
-				$this->Controller->request->data['Account']['company_name'] = trim($this->Controller->request->data['Account']['company_name']);
-				$error_message = '';
+				)
+			);
-				
+
-				// We'll determine here the submitted region code
-				// (or default to North America)
+			if (!$subscription) {
+				// No matching subscription found
+				return;
+			}
+
+			/*
+			 * We have everything we need to register the account
+			 */
+
+			$this->Controller->request->data['Account']['company_name'] =
+				trim($this->Controller->request->data['Account']['company_name']);
+
+			// We'll determine here the submitted region code (or default to North America)
-				$region_code = 'NA';
+			$region_code = 'NA';
-				$region = $this->Controller->Region->find('first', array(
+			$region      = $this->Controller->Region->find(
+				'first',
+				array(
-						'conditions' => array(
-							'code' => $this->Controller->request->data['Account']['region_code']
-						)
+					'conditions' => array(
+						'code' => $this->Controller->request->data['Account']['region_code']
+					)
-					));
+				)
+			);
-				if ($region && $region['Region']['ib_code']) {
-					$region_code = $region['Region']['ib_code'];
-				}
-				
+			if ($region && $region['Region']['ib_code']) {
+				$region_code = $region['Region']['ib_code'];
+			}
+
-				
-				if (!$user) {
+			if (!$user) {
-					// First let's check the uniqueness of the submitted email address
-					$existing_user = $this->Controller->User->find('first', array(
+				// Check for an existing account
+				$existing_user = $this->Controller->User->find(
+					'first',
+					array(
-							'conditions' => array(
-								'email' => $this->Controller->request->data['User']['email']
-							)
+						'conditions' => array(
+							'email' => $this->Controller->request->data['User']['email']
+						)
-						));
+					)
+				);
 
-					if ($existing_user) {
+				if ($existing_user) {
-						$error_message .= 'The submitted email address is already associated with an existing account.<br />';
+					$this->Controller->freshdeskFlashMessage(
+						'The submitted email address is already associated with an existing account.<br />'
+					);
+					return;
-					}
-				}
+				}
+			}
 
-				// Next, the uniqueness of the submitted company name
+			// Make sure there is not an existing company with the given name
-				$conditions = array(
-					'TRIM(`Account`.`company_name`)' => $this->Controller->request->data['Account']['company_name']
-				);
-				if ($account) {
-					$conditions['`Account`.`id` <>'] = $account['Account']['id'];
-				}
+			$conditions = array(
+				'TRIM(`Account`.`company_name`)' => $this->Controller->request->data['Account']['company_name']
+			);
+			if ($account) {
+				$conditions['`Account`.`id` <>'] = $account['Account']['id'];
+			}
 
-				$existing_account = $this->Controller->Account->find('first', array(
+			$existing_account = $this->Controller->Account->find(
+				'first',
+				array(
-						'conditions' => $conditions
+					'conditions' => $conditions
-					));
+				)
+			);
 
-				if ($existing_account) {
+			if ($existing_account) {
-					$error_message .= 'The submitted company / client name is already associated with an existing account.<br />';
+				$this->Controller->freshdeskFlashMessage(
+					'The submitted company / client name is already associated with an existing account.<br />'
+				);
+				return;
-				}
+			}
 
-				// Next let's check if there's any coupon code submitted,
-				// and if so, if it's valid
-				if ($error_message=='' && !empty($this->Controller->request->data['BillingInfo']['coupon_code'])) {
-					$coupon = $this->Controller->Coupon->find('first', array(
+			// Check if a coupon code was submitted, and if so, if it's valid
+			if (!empty($this->Controller->request->data['BillingInfo']['coupon_code'])) {
+				// Have a coupon code
+				$coupon = $this->Controller->Coupon->find(
+					'first',
+					array(
-							'conditions' => array(
-								'coupon_code' => $this->Controller->request->data['BillingInfo']['coupon_code']
-							)
+						'conditions' => array(
+							'coupon_code' => $this->Controller->request->data['BillingInfo']['coupon_code']
+						)
-						));
+					)
+				);
 
-					if (!$coupon) {
+				if (!$coupon) {
-						$error_message .= 'Invalid coupon code!<br />';
-
+					// It's an invalid code
+					$this->Controller->freshdeskFlashMessage('Invalid coupon code!<br />');
+					return;
-					} else {
-						if (($coupon['Coupon']['start_date'] && strtotime($coupon['Coupon']['start_date']) > time())
-							|| ($coupon['Coupon']['end_date'] && strtotime($coupon['Coupon']['end_date']) < time())
-						) {
+				} else {
+					if (($coupon['Coupon']['start_date'] && strtotime($coupon['Coupon']['start_date']) > time())
+					    || ($coupon['Coupon']['end_date'] && strtotime($coupon['Coupon']['end_date']) < time())
+					) {
-
-							// The current coupon is either not yet available, or has expired
+						// The current coupon is either not yet available, or has expired
-							$error_message .= 'The submitted coupon code is outside its validity date range!<br />';
-
+						$this->Controller->freshdeskFlashMessage(
+							'The submitted coupon code is outside its validity date range!<br />'
+						);
+						return;
-						} else if ($account) {
+					} elseif ($account) {
-							// Let's check if the current account doesn't already have an active coupon code attached
-							// If it does, we'll inactivate it and add the newly submitted one as the account's active coupon
-							foreach ($account['Coupon'] as $coupon_) {
+						// Let's check if the current account doesn't already have an active coupon code attached
+						// If it does, we'll inactivate it and add the newly submitted one as the account's active coupon
+						foreach ($account['Coupon'] as $coupon_) {
-								if ($coupon_['AccountsCoupon']['active'] == 1 && $coupon_['is_active']=='1') {
+							if ($coupon_['AccountsCoupon']['active'] == 1 && $coupon_['is_active'] == '1') {
-									
-									if ($coupon['Coupon']['id']==$coupon_['id']) {
+								if ($coupon['Coupon']['id'] == $coupon_['id']) {
-										// The active coupon is the submitted coupon itself
-										$account['active_coupon'] = $coupon_;
+									// The active coupon is the submitted coupon itself
+									$account['active_coupon'] = $coupon_;
-
-									} else {
-										// The submitted coupon is different than the account's currently active one,
-										// so let's deactivate the old one
+								} else {
+									// The submitted coupon is different than the account's currently active one,
+									// so let's deactivate the old one
-										$this->Controller->Account->AccountsCoupon->updateAll(array(
+									$this->Controller->Account->AccountsCoupon->updateAll(
+										array(
-												'active' => 0
+											'active' => 0
-											), array(
+										),
+										array(
-												'coupon_id'		=> $coupon_['id'],
+											'coupon_id'  => $coupon_['id'],
-												'account_id'	=> $account['Account']['id']
+											'account_id' => $account['Account']['id']
-											));
+										)
+									);
 
-										// Now let's insert the newly submitted coupon as the current account's active subscription coupon
-										$this->Controller->Account->AccountsCoupon->create();
+									// Now let's insert the newly submitted coupon as the current account's active subscription coupon
+									$this->Controller->Account->AccountsCoupon->create();
-										$this->Controller->Account->AccountsCoupon->save(array(
+									$this->Controller->Account->AccountsCoupon->save(
+										array(
-												'account_id'	=> $account['Account']['id'],
+											'account_id' => $account['Account']['id'],
-												'coupon_id'		=> $coupon['Coupon']['id'],
+											'coupon_id'  => $coupon['Coupon']['id'],
-												'date_used'		=> date('Y-m-d H:s:i')
+											'date_used'  => date('Y-m-d H:s:i')
-											));
+										)
+									);
 
-										$account['active_coupon'] = $coupon['Coupon'];
-									}
-									//$error_message .= 'Your account already has an attached coupon code, which hasn\'t expired yet!<br />';
-									break;
-								}
-							}
+									$account['active_coupon'] = $coupon['Coupon'];
+								}
+								//$error_message .= 'Your account already has an attached coupon code, which hasn\'t expired yet!<br />';
+								break;
+							}
+						}
 
-							if (empty($account['active_coupon'])) {
-								// The current account doesn't seem to have any active coupon yet,
-								// so let's insert the newly submitted one as the current account's active subscription coupon
-								$this->Controller->Account->AccountsCoupon->create();
+						if (empty($account['active_coupon'])) {
+							// The current account doesn't seem to have any active coupon yet,
+							// so let's insert the newly submitted one as the current account's active subscription coupon
+							$this->Controller->Account->AccountsCoupon->create();
-								$this->Controller->Account->AccountsCoupon->save(array(
+							$this->Controller->Account->AccountsCoupon->save(
+								array(
-										'account_id'	=> $account['Account']['id'],
+									'account_id' => $account['Account']['id'],
-										'coupon_id'		=> $coupon['Coupon']['id'],
+									'coupon_id'  => $coupon['Coupon']['id'],
-										'date_used'		=> date('Y-m-d H:s:i')
+									'date_used'  => date('Y-m-d H:s:i')
-									));
+								)
+							);
 
-								$account['active_coupon'] = $coupon['Coupon'];
-							}
-						}
+							$account['active_coupon'] = $coupon['Coupon'];
+						}
+					}
 
-						if ($error_message == '' && $coupon['Coupon']['usage_number']) {
+					if ($coupon['Coupon']['usage_number']) {
-							// Finally, let's check if the current coupon has been already used
-							// as many times as its usage_number value
-							$conditions = array(
-								'coupon_id' => $coupon['Coupon']['id']
-							);
-							if ($account) {
-								$conditions['account_id !='] = $account['Account']['id'];
-							}
+						// Finally, let's check if the current coupon has been already used
+						// as many times as its usage_number value
+						$conditions = array(
+							'coupon_id' => $coupon['Coupon']['id']
+						);
+						if ($account) {
+							$conditions['account_id !='] = $account['Account']['id'];
+						}
 
-							$coupons = $this->Controller->Account->AccountsCoupon->find('all', array('conditions' => $conditions));
+						$coupons =
+							$this->Controller->Account->AccountsCoupon->find('all', array('conditions' => $conditions));
-							if (count($coupons)>=$coupon['Coupon']['usage_number']) {
+						if (count($coupons) >= $coupon['Coupon']['usage_number']) {
-								$error_message .= 'The submitted coupon code has been used the maximum number of times it allows!<br />';
+							$this->Controller->freshdeskFlashMessage('The submitted coupon code has been used the maximum number of times it allows!<br />');
+							return;
-							}
-						}
-					}
-				}
+						}
+					}
+				}
+			}
 
-
-				$tradedesk_data = array(
+			$tradedesk_data = array(
-					'address'		=> $this->Controller->request->data['Account']['address_1'] . ' ' .
+				'address'      => $this->Controller->request->data['Account']['address_1'] . ' ' .
-						(!empty($this->Controller->request->data['Account']['address_2']) ? $this->Controller->request->data['Account']['address_2'] . ' ' : '') .
+				                  (!empty($this->Controller->request->data['Account']['address_2']) ?
+					                  $this->Controller->request->data['Account']['address_2'] . ' ' : '') .
-						$this->Controller->request->data['Account']['city'] . ', ' .
-						$this->Controller->request->data['Account']['state'] . ' ' .
-						$this->Controller->request->data['Account']['zip_code'],
+				                  $this->Controller->request->data['Account']['city'] . ', ' .
+				                  $this->Controller->request->data['Account']['state'] . ' ' .
+				                  $this->Controller->request->data['Account']['zip_code'],
-					'company_name'	=> $this->Controller->request->data['Account']['company_name'],
+				'company_name' => $this->Controller->request->data['Account']['company_name'],
-					'website'		=> $this->Controller->request->data['Account']['company_url']
+				'website'      => $this->Controller->request->data['Account']['company_url']
-				);
-				
-				$ib_account_data = array(
+			);
+
+			$ib_account_data = array(
-					'company'	=> substr($this->Controller->request->data['Account']['company_name'], 0, 100),
+				'company' => substr($this->Controller->request->data['Account']['company_name'], 0, 100),
-					'contact'	=> substr(($user ? $user['User']['first_name'] : $this->Controller->request->data['User']['first_name']) . ' ' . ($user ? $user['User']['last_name'] : $this->Controller->request->data['User']['last_name']), 0, 100),
-					'email'		=> substr(($user ? $user['User']['email'] : $this->Controller->request->data['User']['email']), 0, 50),
+				'contact' => substr(
+					($user ? $user['User']['first_name'] : $this->Controller->request->data['User']['first_name']) .
+					' ' .
+					($user ? $user['User']['last_name'] : $this->Controller->request->data['User']['last_name']),
+					0,
+					100
+				),
+				'email'   => substr(
+					($user ? $user['User']['email'] : $this->Controller->request->data['User']['email']),
+					0,
+					50
+				),
-					'name'		=> substr($this->Controller->request->data['Account']['company_name'], 0, 50),
+				'name'    => substr($this->Controller->request->data['Account']['company_name'], 0, 50),
-					'region'	=> $region_code, // defaulting to North America if the selected region for the account doesn't correspond to an IB region
+				'region'  => $region_code,
+				// defaulting to North America if the selected region for the account doesn't correspond to an IB region
-					'url'		=> substr($this->Controller->request->data['Account']['company_url'], 0, 256)
+				'url'     => substr($this->Controller->request->data['Account']['company_url'], 0, 256)
-				);
-				
-				if (!empty($this->Controller->request->data['BillingInfo']['card_number'])) {
+			);
+
+			if (!empty($this->Controller->request->data['BillingInfo']['card_number'])) {
-					$this->Controller->request->data['BillingInfo']['card_number'] = str_replace(' ', '', $this->Controller->request->data['BillingInfo']['card_number']);
+				$this->Controller->request->data['BillingInfo']['card_number'] =
+					str_replace(' ', '', $this->Controller->request->data['BillingInfo']['card_number']);
-				}
+			}
 
-				if ($account) { // if account is set, update the account details
-					if ($error_message == '') {
-
+			if ($account) {
+				// if account is set, update the account details
-						if (isset($account['ExternalProvider'])) {
+				if (isset($account['ExternalProvider'])) {
-							$ttd_credentials = $this->Controller->AccountComponent->checkTradeDeskProvider($account['ExternalProvider']); // we need TTD credentials for all scenarios
-							$ib_credentials = $this->Controller->AccountComponent->checkIBehaviorProvider($account['ExternalProvider']); // we need TTD credentials for all scenarios
+					$ttd_credentials =
+						$this->Controller->AccountComponent->checkTradeDeskProvider(
+							$account['ExternalProvider']
+						); // we need TTD credentials for all scenarios
+					$ib_credentials  =
+						$this->Controller->AccountComponent->checkIBehaviorProvider(
+							$account['ExternalProvider']
+						); // we need TTD credentials for all scenarios
-						}
+				}
 
-						if (!empty($ttd_credentials['success'])) {
-							$tradedesk_data['ttd_advertiser_id'] = $ttd_credentials['advertiser_id'];
-						}
-						if (!empty($ib_credentials['success'])) {
-							$ib_account_data['id'] = $ib_credentials['account_id'];
-						}
+				if (!empty($ttd_credentials['success'])) {
+					$tradedesk_data['ttd_advertiser_id'] = $ttd_credentials['advertiser_id'];
+				}
+				if (!empty($ib_credentials['success'])) {
+					$ib_account_data['id'] = $ib_credentials['account_id'];
+				}
 
-
-						$relation = $this->Controller->Account->hasAndBelongsToMany['Plugin']; // Don't know what's this about...
+				$relation =
+					$this->Controller->Account->hasAndBelongsToMany['Plugin']; // Don't know what's this about...
-						unset($this->Controller->Account->hasAndBelongsToMany['Plugin']);
+				unset($this->Controller->Account->hasAndBelongsToMany['Plugin']);
 
-						$ib_account_data['url'] = substr((isset($account['Account']['rtb_advertiser_url']) ? $account['Account']['rtb_advertiser_url'] : $account['Account']['advertiser_url']), 0, 256);
+				$ib_account_data['url'] =
+					substr(
+						(isset($account['Account']['rtb_advertiser_url'])
+							? $account['Account']['rtb_advertiser_url'] : $account['Account']['advertiser_url']),
+						0,
+						256
+					);
 
-						if (!empty($ttd_credentials['success'])) { // we have ttd credentials
-							$advertiser_response = $this->Controller->TradeDesk->create_advertiser($tradedesk_data);
+				if (!empty($ttd_credentials['success'])) { // we have ttd credentials
+					$advertiser_response = $this->Controller->TradeDesk->create_advertiser($tradedesk_data);
 
-							if (isset($ib_account_data['id'])) { // we for sure have an account created here
+					if (isset($ib_account_data['id'])) { // we for sure have an account created here
-								$ib_advertiser_response = $this->Controller->IBehavior->editIBehaviorAccount($ib_account_data);
+						$ib_advertiser_response =
+							$this->Controller->IBehavior->editIBehaviorAccount($ib_account_data);
-							} else { // for some reason the IB account was never created before, lets do it now
+					} else { // for some reason the IB account was never created before, lets do it now
-								$ib_advertiser_response = $this->Controller->IBehavior->createIBehaviorAccount($ib_account_data);
+						$ib_advertiser_response =
+							$this->Controller->IBehavior->createIBehaviorAccount($ib_account_data);
-							}
-						}
+					}
+				}
 
+				if ((empty($account['Account']['advertiser_url']) &&
+				     empty($account['Account']['rtb_advertiser_url'])) ||
+				    (!empty($ttd_credentials['success']) &&
+				     isset($advertiser_response) &&
+				     $advertiser_response['success'] == 1 &&
+				     !empty($ib_credentials['success']) &&
+				     $ib_advertiser_response['success'])
+				) {
 
-						if ((empty($account['Account']['advertiser_url']) && empty($account['Account']['rtb_advertiser_url'])) ||
-							(!empty($ttd_credentials['success']) && isset($advertiser_response) && $advertiser_response['success']==1 &&
-								!empty($ib_credentials['success']) && $ib_advertiser_response['success'])) {
-
-							$this->Controller->Account->id = $account['Account']['id'];
-							// Now let's save the company_url submitted value as the advertiser_url one,
-							// since that's the name of the accounts table URL field
+					$this->Controller->Account->id = $account['Account']['id'];
+					// Now let's save the company_url submitted value as the advertiser_url one,
+					// since that's the name of the accounts table URL field
-							$this->Controller->request->data['Account']['advertiser_url'] = $this->Controller->request->data['Account']['company_url'];
+					$this->Controller->request->data['Account']['advertiser_url'] =
+						$this->Controller->request->data['Account']['company_url'];
 
-							// Next we need to create a new account object, since the existing one might contain coupons data
-							// which, on save / update, would overwrite any potentially newly submitted coupon
-							/** @var \Account $new_account */
+					// Next we need to create a new account object, since the existing one might contain coupons data
+					// which, on save / update, would overwrite any potentially newly submitted coupon
+					/** @var \Account $new_account */
-							$new_account = new $this->Controller->Account;
+					$new_account     = new $this->Controller->Account;
-							$new_account->id = $account['Account']['id'];
+					$new_account->id = $account['Account']['id'];
 
-							if (!$this->Controller->Account->validates() || !$new_account->save($this->Controller->request->data['Account'])) {
+					if (!$this->Controller->Account->validates() ||
+					    !$new_account->save($this->Controller->request->data['Account'])
+					) {
-								$this->Controller->Account->hasAndBelongsToMany['Plugin'] = $relation;
-								if (!empty($this->Controller->Account->validationErrors)) {
+						$this->Controller->Account->hasAndBelongsToMany['Plugin'] = $relation;
+						if (!empty($this->Controller->Account->validationErrors)) {
-									$error_message .= $this->Controller->getAllValidationErrors($this->Controller->Account->validationErrors);
+							$this->Controller->freshdeskFlashMessage(
+								$this->Controller->getAllValidationErrors($this->Controller->Account->validationErrors)
+							);
+							return;
-								} else {
+						} else {
-									$error_message .= 'The account could not be saved. Please, try again. (#1)<br />';
+							$this->Controller->freshdeskFlashMessage('The account could not be saved. Please, try again. (#1)<br />');
+							return;
-								}
+						}
 
-							} else {
-								if (empty($this->Controller->request->data['BillingInfo']['coupon_code'])) {
-									// The promo code field is empty, so make sure all existing account coupons
-									// have been deactivated.
+					} else {
+						if (empty($this->Controller->request->data['BillingInfo']['coupon_code'])) {
+							// The promo code field is empty, so make sure all existing account coupons
+							// have been deactivated.
-									$this->Controller->Account->AccountsCoupon->updateAll(array(
+							$this->Controller->Account->AccountsCoupon->updateAll(
+								array(
-											'active'		=> 0
+									'active' => 0
-										), array(
+								),
+								array(
-											'account_id'	=> $account['Account']['id']
+									'account_id' => $account['Account']['id']
-										));
+								)
+							);
-									
-									unset($account['active_coupon']);
-								}
-								
+
+							unset($account['active_coupon']);
+						}
+
-								if (!empty($this->Controller->request->data['edit_billing_info']) && $this->Controller->request->data['edit_billing_info']=='Y') {
+						if (!empty($this->Controller->request->data['edit_billing_info']) &&
+						    $this->Controller->request->data['edit_billing_info'] == 'Y'
+						) {
-									// We also need to edit the CC's details
+							// We also need to edit the CC's details
 
-									// First, let's attempt to authorize the currently submitted CC, to make sure
-									// it's valid (and it has enough money on it for the current subscription's value)
+							// First, let's attempt to authorize the currently submitted CC, to make sure
+							// it's valid (and it has enough money on it for the current subscription's value)
 
-									// First, let's determine the amount to be paid monthly
-									$charge_amount = 0;
+							// First, let's determine the amount to be paid monthly
+							$charge_amount = 0;
-									if ((float)$account['Subscription']['monthly_price']>0) {
+							if ((float)$account['Subscription']['monthly_price'] > 0) {
-										$monthly_price = $account['Subscription']['monthly_price'];
+								$monthly_price = $account['Subscription']['monthly_price'];
 
-										$discount = (!empty($account['active_coupon']) && (float)$account['active_coupon']['amount']>0 ?
-											($account['active_coupon']['amount_type']=='1' ?
-												$account['active_coupon']['amount'] :
-												round(($account['active_coupon']['amount'] / 100) * $monthly_price, 2)) :
+								$discount      =
+									(!empty($account['active_coupon']) &&
+									 (float)$account['active_coupon']['amount'] > 0
+										?
+										($account['active_coupon']['amount_type'] == '1'
+											?
+											$account['active_coupon']['amount']
+											:
+											round(($account['active_coupon']['amount'] / 100) * $monthly_price, 2))
+										:
-											0);
-										$charge_amount = $monthly_price - $discount;
-									}
-									if ($charge_amount <= 0) {
-										$charge_amount = 0.01;
-									}
+										0);
+								$charge_amount = $monthly_price - $discount;
+							}
+							if ($charge_amount <= 0) {
+								$charge_amount = 0.01;
+							}
 
-									// Next let's try to authorize the submitted CC for the $charge_amount value
+							// Next let's try to authorize the submitted CC for the $charge_amount value
-									$card_number = $this->Controller->request->data['BillingInfo']['card_number'];
+							$card_number     = $this->Controller->request->data['BillingInfo']['card_number'];
-									$expiration_date = $this->Controller->request->data['BillingInfo']['exp_month'] . substr((string)$this->Controller->request->data['BillingInfo']['exp_year'], 2);
+							$expiration_date =
+								$this->Controller->request->data['BillingInfo']['exp_month'] .
+								substr((string)$this->Controller->request->data['BillingInfo']['exp_year'], 2);
-									$address = $this->Controller->request->data['BillingInfo']['billing_address_1'];
+							$address         = $this->Controller->request->data['BillingInfo']['billing_address_1'];
-									$city = $this->Controller->request->data['BillingInfo']['billing_city'];
+							$city            = $this->Controller->request->data['BillingInfo']['billing_city'];
-									$state = $this->Controller->request->data['BillingInfo']['billing_state'];
+							$state           = $this->Controller->request->data['BillingInfo']['billing_state'];
-									$zip = $this->Controller->request->data['BillingInfo']['billing_zip_code'];
+							$zip             = $this->Controller->request->data['BillingInfo']['billing_zip_code'];
-									$country = $this->Controller->request->data['BillingInfo']['billing_country'];
+							$country         = $this->Controller->request->data['BillingInfo']['billing_country'];
 
-									$response = $this->Controller->AuthorizeNet->authorizeCardAIM(array(
+							$response = $this->Controller->AuthorizeNet->authorizeCardAIM(
+								array(
-											'amount'			=> $charge_amount,
+									'amount'           => $charge_amount,
-											'card_num'			=> $card_number,
+									'card_num'         => $card_number,
-											'exp_date'			=> $expiration_date, 
+									'exp_date'         => $expiration_date,
-											'duplicate_window'	=> 0, // So that 2 consecutive transactions won't be considered as duplicates
+									'duplicate_window' => 0,
+									// So that 2 consecutive transactions won't be considered as duplicates
-											'address'			=> $address,
+									'address'          => $address,
-											'city'				=> $city,
+									'city'             => $city,
-											'state'				=> $state,
+									'state'            => $state,
-											'zip'				=> $zip,
+									'zip'              => $zip,
-											'country'			=> $country
+									'country'          => $country
-										));
+								)
+							);
-									
-									// Get default payment profile for the next step.
+
+							// Get default payment profile for the next step.
-									$defaultPaymentProfile = $this->Controller->AuthorizeNet->getDefaultPaymentProfile($account);
+							$defaultPaymentProfile =
+								$this->Controller->AuthorizeNet->getDefaultPaymentProfile($account);
-									
+
-									if (isset($response['approved']) && $response['approved'] && !empty($defaultPaymentProfile)) {
+							if (isset($response['approved']) &&
+							    $response['approved'] &&
+							    !empty($defaultPaymentProfile)
+							) {
-										// The submitted CC seem to be valid, so let's update the existing customer payment profile with its details
-										// But first, let's void the just-attempted CC authorization
-										$this->Controller->AuthorizeNet->voidTransactionAIM($response['transactionID']);
-										
+								// The submitted CC seem to be valid, so let's update the existing customer payment profile with its details
+								// But first, let's void the just-attempted CC authorization
+								$this->Controller->AuthorizeNet->voidTransactionAIM($response['transactionID']);
+
-										$response = $this->Controller->AuthorizeNet->updateCustomerPaymentProfile($account['Account']['profile_id'], $defaultPaymentProfile['payment_profile_id'], array(
+								$response = $this->Controller->AuthorizeNet->updateCustomerPaymentProfile(
+									$account['Account']['profile_id'],
+									$defaultPaymentProfile['payment_profile_id'],
+									array(
-												'billTo' => array(
+										'billTo'  => array(
-													'firstName'	=> $user['User']['first_name'],
+											'firstName' => $user['User']['first_name'],
-													'lastName'	=> $user['User']['last_name'],
+											'lastName'  => $user['User']['last_name'],
-													'company'	=> urlencode($this->Controller->request->data['Account']['company_name']),
+											'company'   => urlencode(
+												$this->Controller->request->data['Account']['company_name']
+											),
-													'address'	=> $address,
+											'address'   => $address,
-													'city'		=> $city,
+											'city'      => $city,
-													'state'		=> $state,
+											'state'     => $state,
-													'zip'		=> $zip,
+											'zip'       => $zip,
-													'country'	=> $country
+											'country'   => $country
-												),
-												'payment' => array(
-													'creditCard' => array(
+										),
+										'payment' => array(
+											'creditCard' => array(
-														'cardNumber'		=> $card_number,
+												'cardNumber'     => $card_number,
-														'expirationDate'	=> $this->Controller->request->data['BillingInfo']['exp_year'] . '-' . $this->Controller->request->data['BillingInfo']['exp_month'],
+												'expirationDate' =>
+													$this->Controller->request->data['BillingInfo']['exp_year'] .
+													'-' .
+													$this->Controller->request->data['BillingInfo']['exp_month'],
-														'cardCode'			=> $this->Controller->request->data['BillingInfo']['security_code']
+												'cardCode'       => $this->Controller->request->data['BillingInfo']['security_code']
-													)
-												)
+											)
+										)
-											));
+									)
+								);
 
-										if (!$response->isOk()) {
+								if (!$response->isOk()) {
-											$error_message .= $response->xml->messages->resultCode . ' (code ' . $response->xml->messages->message->code . '): ' . $response->xml->messages->message->text . '<br />';
-
+									$msg = $response->xml->messages;
+									$this->Controller->freshdeskFlashMessage(
+										$msg->resultCode . ' (code ' . $msg->message->code . '): ' .
+										$msg->message->text . '<br />'
+									);
+									return;
-										} else {
-											// Let's update the account's payment profile's CC expiration date
+								} else {
+									// Let's update the account's payment profile's CC expiration date
-											$datasource = $this->Controller->Account->AccountsPaymentProfile->getDataSource();
+									$datasource         =
+										$this->Controller->Account->AccountsPaymentProfile->getDataSource();
-											$cc_expiration_date = $datasource->value(
+									$cc_expiration_date = $datasource->value(
-												$this->Controller->request->data['BillingInfo']['exp_year'] . '-' . $this->Controller->request->data['BillingInfo']['exp_month'] . '-01'
+										$this->Controller->request->data['BillingInfo']['exp_year'] .
+										'-' .
+										$this->Controller->request->data['BillingInfo']['exp_month'] .
+										'-01'
-											);
+									);
-											$date_saved = $datasource->value(date('Y-m-d H:i:s'));
+									$date_saved         = $datasource->value(date('Y-m-d H:i:s'));
-											
+
-											$this->Controller->Account->AccountsPaymentProfile->updateAll(array(
+									$this->Controller->Account->AccountsPaymentProfile->updateAll(
+										array(
-													'cc_expiration_date' 	=> $cc_expiration_date,
+											'cc_expiration_date' => $cc_expiration_date,
-													'date_saved'			=> $date_saved
+											'date_saved'         => $date_saved
-												), array(
+										),
+										array(
-													'payment_profile_id' => $defaultPaymentProfile['payment_profile_id']
+											'payment_profile_id' => $defaultPaymentProfile['payment_profile_id']
-												));
+										)
+									);
 
-											// Email confirmation regarding the CC info update
+									// Email confirmation regarding the CC info update
-											$this->Controller->UserAccount->sendEmail(array(
+									$this->Controller->UserAccount->sendEmail(
+										array(
-													'email_vars'	=> array( // Except for the user's and account's names, which are determined and se(n)t automatically
+											'email_vars' => array( // Except for the user's and account's names, which are determined and se(n)t automatically
-														'addedupdated'	=> 'updated',
+											                       'addedupdated' => 'updated',
-														'lastfour'		=> substr($this->Controller->request->data['BillingInfo']['card_number'], -4)
+											                       'lastfour'     => substr(
+												                       $this->Controller->request->data['BillingInfo']['card_number'],
+												                       -4
+											                       )
-													),
+											),
-													'permission'	=> 'credit_card_transaction',
+											'permission' => 'credit_card_transaction',
-													'template'		=> 'payment-info-updated',
+											'template'   => 'payment-info-updated',
-													'subject'		=> 'Choozle CC Details Update'
+											'subject'    => 'Choozle CC Details Update'
-												));
+										)
+									);
-										}
+								}
 
-									} elseif (!empty($response['error'])) {
+							} elseif (!empty($response['error'])) {
-										$error_message .= $response['error'];
+								$this->Controller->freshdeskFlashMessage($response['error']);
+								return;
-									}
-								}
-							}
+							}
+						}
+					}
 
-						} else {
+				} else {
-							$error_message .= 'The account could not be saved. Please, try again. (#2)<br />';
+					$this->Controller->freshdeskFlashMessage('The account could not be saved. Please, try again. (#2)<br />');
+					return;
-						}
+				}
-					}
 
-					if ($error_message == '') {
+
-						// There were no errors on edit, so let's redirect back to this page,
-						// displaying a confirmation message
-						$this->Controller->Session->setFlash('Account successfully updated!', 'flash_success');
+				// There were no errors on edit, so let's redirect back to this page,
+				// displaying a confirmation message
+				$this->Controller->Session->setFlash('Account successfully updated!', 'flash_success');
 
-						return $this->Controller->redirect(array(
+				$this->Controller->redirect(
+					array(
-								'action' => 'add',
-								$this->Controller->Account->id
+						'action' => 'add',
+						$this->Controller->Account->id
-							));
-
+					)
+				);
+				return;
-					} else {
+			} else {
-						$this->Controller->Session->setFlash($error_message . ' If you continue to receive this error, please visit our <a href="' . FRESHDESK_BASE_URL . '" target="_blank">Support Center</a>.', 'flash_alert');
-					}
-
-				} else {
-					// New account
+				// New account
-					if ($error_message == '') {
-						// First let's try to authorize the submitted CC for the $charge_amount value,
-						// so let's determine the amount to be paid
-						$charge_amount = 0;
+				// First let's try to authorize the submitted CC for the $charge_amount value,
+				// so let's determine the amount to be paid
+				$charge_amount = 0;
-						if ((float)$subscription['Subscription']['monthly_price']>0) {
+				if ((float)$subscription['Subscription']['monthly_price'] > 0) {
-							$monthly_price = $subscription['Subscription']['monthly_price'];
+					$monthly_price = $subscription['Subscription']['monthly_price'];
 
-							$discount = (!empty($coupon) && (float)$coupon['Coupon']['amount']>0 ?
-								($coupon['Coupon']['amount_type']=='1' ?
-									$coupon['Coupon']['amount'] :
-									round(($coupon['Coupon']['amount'] / 100) * $monthly_price, 2)) :
+					$discount      = (!empty($coupon) && (float)$coupon['Coupon']['amount'] > 0
+						?
+						($coupon['Coupon']['amount_type'] == '1'
+							?
+							$coupon['Coupon']['amount']
+							:
+							round(($coupon['Coupon']['amount'] / 100) * $monthly_price, 2))
+						:
-								0);
-							$charge_amount = $monthly_price - $discount;
-						}
-						if ($charge_amount <= 0) {
-							$charge_amount = 0.01;
-						}
+						0);
+					$charge_amount = $monthly_price - $discount;
+				}
+				if ($charge_amount <= 0) {
+					$charge_amount = 0.01;
+				}
 
-						$card_number = $this->Controller->request->data['BillingInfo']['card_number'];
+				$card_number     = $this->Controller->request->data['BillingInfo']['card_number'];
-						$expiration_date = $this->Controller->request->data['BillingInfo']['exp_month'] . substr((string)$this->Controller->request->data['BillingInfo']['exp_year'], 2);
+				$expiration_date =
+					$this->Controller->request->data['BillingInfo']['exp_month'] .
+					substr((string)$this->Controller->request->data['BillingInfo']['exp_year'], 2);
-						$address = $this->Controller->request->data['BillingInfo']['billing_address_1'];
+				$address         = $this->Controller->request->data['BillingInfo']['billing_address_1'];
-						$city = $this->Controller->request->data['BillingInfo']['billing_city'];
+				$city            = $this->Controller->request->data['BillingInfo']['billing_city'];
-						$state = $this->Controller->request->data['BillingInfo']['billing_state'];
+				$state           = $this->Controller->request->data['BillingInfo']['billing_state'];
-						$zip = $this->Controller->request->data['BillingInfo']['billing_zip_code'];
+				$zip             = $this->Controller->request->data['BillingInfo']['billing_zip_code'];
-						$country = $this->Controller->request->data['BillingInfo']['billing_country'];
+				$country         = $this->Controller->request->data['BillingInfo']['billing_country'];
-						
+
-						$response = $this->Controller->AuthorizeNet->authorizeCardAIM(array(
+				$response = $this->Controller->AuthorizeNet->authorizeCardAIM(
+					array(
-								'amount'			=> $charge_amount, 
+						'amount'           => $charge_amount,
-								'card_num'			=> $card_number, 
+						'card_num'         => $card_number,
-								'exp_date'			=> $expiration_date,  
+						'exp_date'         => $expiration_date,
-								'duplicate_window'	=> 0, // So that 2 consecutive transactions won't be considered as duplicates
+						'duplicate_window' => 0,
+						// So that 2 consecutive transactions won't be considered as duplicates
-								'address'			=> $address, 
+						'address'          => $address,
-								'city'				=> $city, 
+						'city'             => $city,
-								'state'				=> $state, 
+						'state'            => $state,
-								'zip'				=> $zip, 
+						'zip'              => $zip,
-								'country'			=> $country
+						'country'          => $country
-							));
+					)
+				);
-						
-						if (isset($response['approved']) && $response['approved']) {
-							// All is OK, let's void the just-attempted CC authorization
-							$this->Controller->AuthorizeNet->voidTransactionAIM($response['transactionID']);
+
+				if (isset($response['approved']) && $response['approved']) {
+					// All is OK, let's void the just-attempted CC authorization
+					$this->Controller->AuthorizeNet->voidTransactionAIM($response['transactionID']);
 
-						} elseif (!empty($response['error'])) {
+				} elseif (!empty($response['error'])) {
-							$error_message .= $response['error'];
+					$this->Controller->freshdeskFlashMessage($response['error']);
+					return;
-						}
+				}
-					}
 
-
-					if ($error_message == '') {
-						// Next, now that we've verified the submitted CC is valid and has enough money on it,
-						// let's try to generate an Authorize.Net customer profile ID
+				// Next, now that we've verified the submitted CC is valid and has enough money on it,
+				// let's try to generate an Authorize.Net customer profile ID
-						$response = $this->Controller->AuthorizeNet->createCustomerProfile(array(
-								'description'			=> urlencode($this->Controller->request->data['Account']['company_name']),
-								'email'					=> ($user ? $user['User']['email'] : $this->Controller->request->data['User']['email']),
+				$response = $this->Controller->AuthorizeNet->createCustomerProfile(
+					array(
+						'description'        => urlencode(
+							$this->Controller->request->data['Account']['company_name']
+						),
+						'email'              => ($user ? $user['User']['email']
+							: $this->Controller->request->data['User']['email']),
-								'merchantCustomerId'	=> time()
+						'merchantCustomerId' => time()
-							));
+					)
+				);
 
-						if ($response->isOk()) {
-							$customerProfileId = $response->getCustomerProfileId();
-						} else {
+				if ($response->isOk()) {
+					$customerProfileId = $response->getCustomerProfileId();
+				} else {
-							$error_message .= $response->xml->messages->resultCode . ' (code ' . $response->xml->messages->message->code . '): ' . $response->xml->messages->message->text . '<br />';
+					$msg = $response->xml->messages;
+					$this->Controller->freshdeskFlashMessage(
+						$msg->resultCode . ' (code ' . $msg->message->code . '): ' . $msg->message->text . '<br />'
+					);
+					return;
-						}
+				}
-					}
 
-					if ($error_message == '') {
-						// Next let's try to create the new customer payment profile
+				// Next let's try to create the new customer payment profile
-						$response = $this->Controller->AuthorizeNet->createCustomerPaymentProfile($customerProfileId, array(
+				$response = $this->Controller->AuthorizeNet->createCustomerPaymentProfile(
+					$customerProfileId,
+					array(
-								'billTo' => array(
+						'billTo'  => array(
-									'firstName'	=> ($user ? $user['User']['first_name'] : $this->Controller->request->data['User']['first_name']),
-									'lastName'	=> ($user ? $user['User']['last_name'] : $this->Controller->request->data['User']['last_name']),
+							'firstName' => ($user ? $user['User']['first_name']
+								: $this->Controller->request->data['User']['first_name']),
+							'lastName'  => ($user ? $user['User']['last_name']
+								: $this->Controller->request->data['User']['last_name']),
-									'company'	=> urlencode($this->Controller->request->data['Account']['company_name']),
+							'company'   => urlencode($this->Controller->request->data['Account']['company_name']),
-									'address'	=> $address,
+							'address'   => $address,
-									'city'		=> $city,
+							'city'      => $city,
-									'state'		=> $state,
+							'state'     => $state,
-									'zip'		=> $zip,
+							'zip'       => $zip,
-									'country'	=> $country
+							'country'   => $country
-								),
-								'payment' => array(
-									'creditCard' => array(
+						),
+						'payment' => array(
+							'creditCard' => array(
-										'cardNumber'		=> $card_number,
+								'cardNumber'     => $card_number,
-										'expirationDate'	=> $this->Controller->request->data['BillingInfo']['exp_year'] . '-' . $this->Controller->request->data['BillingInfo']['exp_month'],
+								'expirationDate' =>
+									$this->Controller->request->data['BillingInfo']['exp_year'] .
+									'-' .
+									$this->Controller->request->data['BillingInfo']['exp_month'],
-										'cardCode'			=> $this->Controller->request->data['BillingInfo']['security_code']
+								'cardCode'       => $this->Controller->request->data['BillingInfo']['security_code']
-									)
-								)
+							)
+						)
-							));
+					)
+				);
 
-						if ($response->isOk()) {
-							$paymentProfileId = $response->getPaymentProfileId();
-						} else {
+				if ($response->isOk()) {
+					$paymentProfileId = $response->getPaymentProfileId();
+				} else {
-							$error_message .= $response->xml->messages->resultCode . ' (code ' . $response->xml->messages->message->code . '): ' . $response->xml->messages->message->text . '<br />';
+					$msg = $response->xml->messages;
+					$this->Controller->freshdeskFlashMessage(
+						$msg->resultCode . ' (code ' . $msg->message->code . '): ' . $msg->message->text . '<br />'
+					);
+					return;
-						}
+				}
-					}
 
-					if ($error_message == '' && !$user) {
+				if (!$user) {
-						// We're creating the user entity first, if not submitted
+					// We're creating the user entity first, if not submitted
-						$this->Controller->request->data['User']['email_confirmation'] = date('Y-m-d H:i:s', strtotime('now'));
+					$this->Controller->request->data['User']['email_confirmation'] =
+						date('Y-m-d H:i:s', strtotime('now'));
-						$this->Controller->request->data['User']['referrer_id'] = 1; // Default to Choozle
+					$this->Controller->request->data['User']['referrer_id']        = 1; // Default to Choozle
-						$this->Controller->User->create();
 
-						if ($this->Controller->User->validates() && $this->Controller->User->save($this->Controller->request->data)) {
-							$invitations = $this->Controller->Account->AccountsEmail->find('all', array( // FIND INVITATIONS FOR THIS EMAIL ADDRESS
+					$this->Controller->User->create();
+					$this->Controller->User->set($this->Controller->request->data);
+					if ($this->Controller->User->validates() && $this->Controller->User->save()) {
+						// FIND INVITATIONS FOR THIS EMAIL ADDRESS
+						$invitations = $this->Controller->Account->AccountsEmail->find(
+							'all',
+							array(
-									'conditions' => array(
-										'email' => $this->Controller->request->data['User']['email']
-									)
+								'conditions' => array(
+									'email' => $this->Controller->request->data['User']['email']
+								)
-								));
+							)
+						);
 
-							if ($invitations) {
-								$this->Controller->UserAccount->acceptInvites($invitations);
+						if ($invitations) {
+							$this->Controller->UserAccount->acceptInvites($invitations);
 
-								// Delete the current user's existing email invitations now that we checked
+							// Delete the current user's existing email invitations now that we checked
-								$this->Controller->Account->AccountsEmail->deleteAll(array(
+							$this->Controller->Account->AccountsEmail->deleteAll(
+								array(
-										'unique_hash' => $this->Controller->request->data['User']['unique_hash']
+									'unique_hash' => $this->Controller->request->data['User']['unique_hash']
-									), false, false);
+								),
+								false,
+								false
+							);
-							}
+						}
 
-							// Finally, let's store the current account's email address in our default Sendgrid newsletter list
-							$Sendgrid = new SendgridComponent(new ComponentCollection());
-							$Sendgrid->initialize(new Controller());
+						// Finally, let's store the current account's email address in our default Sendgrid newsletter list
+						$Sendgrid = new SendgridComponent(new ComponentCollection());
+						$Sendgrid->initialize(new Controller());
-							$Sendgrid->addEmailAddress(array(
+						$Sendgrid->addEmailAddress(
+							array(
-									'email'			=> $this->Controller->request->data['User']['email'],
+								'email'      => $this->Controller->request->data['User']['email'],
-									'name'			=> $this->Controller->request->data['User']['first_name'] . ' ' . $this->Controller->request->data['User']['last_name'],
+								'name'       =>
+									$this->Controller->request->data['User']['first_name'] .
+									' ' .
+									$this->Controller->request->data['User']['last_name'],
-									'First Name'	=> $this->Controller->request->data['User']['first_name'],
+								'First Name' => $this->Controller->request->data['User']['first_name'],
-									'Last Name'		=> $this->Controller->request->data['User']['last_name']
+								'Last Name'  => $this->Controller->request->data['User']['last_name']
-								));
+							)
+						);
 
-							// ... and login the new user
-							$this->Controller->Auth->login();
+						// ... and login the new user
+						$this->Controller->Auth->login();
 
-							$this->Controller->set('user_id', $this->Controller->User->id);
+						$this->Controller->set('user_id', $this->Controller->User->id);
-							$this->Controller->current_user = $this->Controller->User->read(null, $this->Controller->User->id); // To be used in the internal sendEmail() method
+						$this->Controller->current_user =
+							$this->Controller->User->read(
+								null,
+								$this->Controller->User->id
+							); // To be used in the internal sendEmail() method
-						}
-						if (!empty($this->Controller->User->validationErrors)) {
+					}
+					if (!empty($this->Controller->User->validationErrors)) {
-							$error_message .= $this->Controller->getAllValidationErrors($this->Controller->User->validationErrors);
+						$this->Controller->freshdeskFlashMessage(
+							$this->Controller->getAllValidationErrors($this->Controller->User->validationErrors)
+						);
+						return;
-						}
-					}
+					}
+				}
 
-					if ($error_message == '' && ($user || $this->Controller->User->id>0)) {
+				if ($user || $this->Controller->User->id > 0) {
-						// If there were no user validation errors continue with the account creation
+					// If there were no user validation errors continue with the account creation
-						$this->Controller->request->data['Account']['profile_id'] = $customerProfileId;
+					$this->Controller->request->data['Account']['profile_id']    = $customerProfileId;
-						$this->Controller->request->data['Account']['user_id'] = ($user ? $this->Controller->Auth->user('id') : $this->Controller->User->id); // For now, at least (in case the current user is the support one)
-						$this->Controller->request->data['Account']['referrer_id'] = ($user ? $user['User']['referrer_id'] : 1);
-						$this->Controller->request->data['Account']['account_state'] = 'I'; // Defaulting an account to inactive until requirements are met
+					// For now, at least (in case the current user is the support one)
+					$this->Controller->request->data['Account']['user_id']       = $user
+						? $this->Controller->Auth->user('id')
+						: $this->Controller->User->id;
+					$this->Controller->request->data['Account']['referrer_id']   = $user
+						? $user['User']['referrer_id']
+						: 1;
+					// Defaulting an account to inactive until requirements are met
+					$this->Controller->request->data['Account']['account_state'] = 'I';
 
-						// Now let's save the company_url submitted value as the advertiser_url one,
-						// since that's the name of the accounts table URL field
+					// Now let's save the company_url submitted value as the advertiser_url one,
+					// since that's the name of the accounts table URL field
-						$advertiser_url = (isset($this->Controller->request->data['Account']['advertiser_url']) ? $this->Controller->request->data['Account']['advertiser_url'] : '');
-						$this->Controller->request->data['Account']['advertiser_url'] = $this->Controller->request->data['Account']['company_url'];
-						$this->Controller->Account->create();
+					$advertiser_url = isset($this->Controller->request->data['Account']['advertiser_url'])
+						? $this->Controller->request->data['Account']['advertiser_url']
+						: '';
 
-						if ($this->Controller->Account->validates() && $this->Controller->Account->save($this->Controller->request->data)) {
+					$this->Controller->request->data['Account']['advertiser_url'] =
+						$this->Controller->request->data['Account']['company_url'];
 
+					$this->Controller->Account->create();
+					$this->Controller->Account->set($this->Controller->request->data);
+					if ($this->Controller->Account->validates() && $this->Controller->Account->save()) {
-							// Notify Jeff & Rachel about the new account
+						// Notify Jeff & Rachel about the new account
-							$message = 'New account created: ' . $this->Controller->request->data['Account']['company_name'] . "\n";
+						$message =
+							'New account created: ' .
+							$this->Controller->request->data['Account']['company_name'] .
+							"\n";
-							$message .= 'Subscription type: ';
-							if ($subscription['Subscription']['subscription_type'] == 'R') {
-								$message .= 'Insights ';
-							}
-							$message .= $subscription['Subscription']['name'];
+						$message .= 'Subscription type: ';
+						if ($subscription['Subscription']['subscription_type'] == 'R') {
+							$message .= 'Insights ';
+						}
+						$message .= $subscription['Subscription']['name'];
 
-							$this->Controller->sendEmail(array(
+						$this->Controller->sendEmail(
+							array(
-									'vars'		=> array(
+								'vars'     => array(
-										'message' => $message
-									),
+									'message' => $message
+								),
-									'email'		=> explode(',', ACCOUNT_MANAGERS),
+								'email'    => explode(',', ACCOUNT_MANAGERS),
-									'name'		=> $this->Controller->request->data['Account']['company_name'],
+								'name'     => $this->Controller->request->data['Account']['company_name'],
-									'subject'	=> 'New Account Creation',
+								'subject'  => 'New Account Creation',
-									'template'	=> 'empty'
+								'template' => 'empty'
-								));
+							)
+						);
 
-							// ... and now revert the submitted advertiser_url field back to its original value
-							$this->Controller->request->data['Account']['advertiser_url'] = $advertiser_url;
+						// ... and now revert the submitted advertiser_url field back to its original value
+						$this->Controller->request->data['Account']['advertiser_url'] = $advertiser_url;
 
-							if (!empty($coupon)) {
-								// Attach the submitted coupon to the current new account
-								$this->Controller->Account->AccountsCoupon->create();
+						if (!empty($coupon)) {
+							// Attach the submitted coupon to the current new account
+							$this->Controller->Account->AccountsCoupon->create();
-								$this->Controller->Account->AccountsCoupon->save(array(
+							$this->Controller->Account->AccountsCoupon->save(
+								array(
-										'account_id'	=> $this->Controller->Account->id,
+									'account_id' => $this->Controller->Account->id,
-										'coupon_id'		=> $coupon['Coupon']['id'],
+									'coupon_id'  => $coupon['Coupon']['id'],
-										'date_used'		=> date('Y-m-d H:s:i')
+									'date_used'  => date('Y-m-d H:s:i')
-									));
+								)
+							);
-							}
+						}
 
-							$this->Controller->Session->write('User.Account', $this->Controller->Account->id); // set session id
-							$this->Controller->set('account_id', $this->Controller->Account->id); // Not sure what's this good for...
+						$this->Controller->Session->write(
+							'User.Account',
+							$this->Controller->Account->id
+						); // set session id
+						$this->Controller->set(
+							'account_id',
+							$this->Controller->Account->id
+						); // Not sure what's this good for...
 
-							$this->Controller->AccountComponent->addPluginsbySubscription($this->Controller->request->data['Account']['subscription_id']); // add the plugins for this subscription
+						$this->Controller->AccountComponent->addPluginsbySubscription(
+							$this->Controller->request->data['Account']['subscription_id']
+						); // add the plugins for this subscription
-							$this->Controller->AccountComponent->addSupportUser($this->Controller->Account->id);
+						$this->Controller->AccountComponent->addSupportUser($this->Controller->Account->id);
 
-							$advertiser_response = $this->Controller->TradeDesk->create_advertiser($tradedesk_data); // need to be sure Trade Desk account is created/required before user gets forwarded to billing. This is required
+						$advertiser_response =
+							$this->Controller->TradeDesk->create_advertiser(
+								$tradedesk_data
+							); // need to be sure Trade Desk account is created/required before user gets forwarded to billing. This is required
 
-							if (empty($advertiser_response) || (isset($advertiser_response['success']) && $advertiser_response['success'] != 1)) {
-								$error_message .= 'We were unable to complete your account creation. ' . $advertiser_response['message'] . '<br />';
-
+						if (empty($advertiser_response) ||
+						    (isset($advertiser_response['success']) && $advertiser_response['success'] != 1)
+						) {
+							$this->Controller->freshdeskFlashMessage(
+								'We were unable to complete your account creation. ' .
+								$advertiser_response['message'] .
+								'<br />'
+							);
+							return;
-							} elseif (!empty($advertiser_response['response']['AdvertiserId'])) {
-								// Advertiser successfully created in TTD, so let's generate its
-								// geo locations cache.
-								try {
-									$this->Controller->TradeDesk->cacheGeoLocations(
-										$advertiser_response['response']['AdvertiserId']
-									);
-								} catch (Exception $e) {
-								}
-								
-								// Cache the new account's site lists
+						} elseif (!empty($advertiser_response['response']['AdvertiserId'])) {
+							// Advertiser successfully created in TTD, so let's generate its
+							// geo locations cache.
+							try {
+								$this->Controller->TradeDesk->cacheGeoLocations(
+									$advertiser_response['response']['AdvertiserId']
+								);
+							} catch (Exception $e) {
+							}
+
+							// Cache the new account's site lists
-                				$this->Controller->AccountComponent->cacheSiteLists($this->Controller->Account->id, $advertiser_response['response']['AdvertiserId']);
+							$this->Controller->AccountComponent->cacheSiteLists(
+								$this->Controller->Account->id,
+								$advertiser_response['response']['AdvertiserId']
+							);
-							}
+						}
 
-							if ($error_message == '') {
-								$ib_account_data['url'] = substr((isset($this->Controller->request->data['Account']['rtb_advertiser_url']) ? $this->Controller->request->data['Account']['rtb_advertiser_url'] : $this->Controller->request->data['Account']['advertiser_url']), 0, 256);
-								$ib_advertiser_response = $this->Controller->IBehavior->createIBehaviorAccount($ib_account_data); // need to be sure iBehavior account is created/required before user gets forwarded to billing. This is required
+						$ib_account_data['url'] =
+							substr(
+								(isset($this->Controller->request->data['Account']['rtb_advertiser_url'])
+									? $this->Controller->request->data['Account']['rtb_advertiser_url']
+									: $this->Controller->request->data['Account']['advertiser_url']),
+								0,
+								256
+							);
+						$ib_advertiser_response =
+							$this->Controller->IBehavior->createIBehaviorAccount(
+								$ib_account_data
+							); // need to be sure iBehavior account is created/required before user gets forwarded to billing. This is required
-								if (empty($ib_advertiser_response['success'])) {
+						if (empty($ib_advertiser_response['success'])) {
-									$error_message .= 'We were unable to complete your account creation. ' . $ib_advertiser_response['message'] . '<br />';
+							$this->Controller->freshdeskFlashMessage(
+								'We were unable to complete your account creation. ' .
+								$ib_advertiser_response['message'] . '<br />'
+							);
+							return;
-								}
+						}
-							}
 
+
-							// To be used in the internal sendEmail() method.
+						// To be used in the internal sendEmail() method.
-							$account = $this->Controller->Account->read(null, $this->Controller->Account->id);
+						$account                           =
+							$this->Controller->Account->read(null, $this->Controller->Account->id);
-							$this->Controller->current_account = $account;
+						$this->Controller->current_account = $account;
 
-							// Finally, let's add the submitted URL (if any) as a new account's site
+						// Finally, let's add the submitted URL (if any) as a new account's site
-							if ($error_message == '' && (isset($this->Controller->request->data['Account']['rtb_advertiser_url']) ? $this->Controller->request->data['Account']['rtb_advertiser_url'] : $this->Controller->request->data['Account']['advertiser_url'])) {
-								$site_creation = $this->Controller->AccountComponent->addSite($account, array(
+						$advertiserUrl = (isset($this->Controller->request->data['Account']['rtb_advertiser_url'])
+							? $this->Controller->request->data['Account']['rtb_advertiser_url']
+							: $this->Controller->request->data['Account']['advertiser_url']);
+						if ($advertiserUrl) {
+							$site_creation = $this->Controller->AccountComponent->addSite(
+								$account,
+								array(
-										'site_name'	=> $this->Controller->request->data['Account']['company_name'],
+									'site_name' => $this->Controller->request->data['Account']['company_name'],
-										'site_url'	=> (isset($this->Controller->request->data['Account']['rtb_advertiser_url']) ? $this->Controller->request->data['Account']['rtb_advertiser_url'] : $this->Controller->request->data['Account']['advertiser_url'])
-									));
+									'site_url'  => (isset($this->Controller->request->data['Account']['rtb_advertiser_url'])
+										? $this->Controller->request->data['Account']['rtb_advertiser_url']
+										: $this->Controller->request->data['Account']['advertiser_url'])
+								)
+							);
-								if (empty($site_creation['site'])) {
+							if (empty($site_creation['site'])) {
-									$error_message .= 'There was an error adding your URL to your account.<br />';
+								$this->Controller->freshdeskFlashMessage(
+									'There was an error adding your URL to your account.<br />'
+								);
+								return;
-								}
-							}
-						}
+							}
+						}
+					}
+
-						if (!empty($this->Controller->Account->validationErrors)) {
+					if (!empty($this->Controller->Account->validationErrors)) {
-							$error_message .= $this->Controller->getAllValidationErrors($this->Controller->Account->validationErrors);
+						$this->Controller->freshdeskFlashMessage(
+							$this->Controller->getAllValidationErrors($this->Controller->Account->validationErrors)
+						);
+						return;
-						}
-					}
+					}
+				}
 
-					if ($error_message == '' && $this->Controller->Account->id > 0) {
+				if ($this->Controller->Account->id > 0) {
-						// If there were no problems creating the account or any of the account related profiles
-						// Add the new account's billing info
+					// If there were no problems creating the account or any of the account related profiles
+					// Add the new account's billing info
 
-						// Let's attach this Authorize.Net customer payment profile ID to the current account
-						$this->Controller->Account->AccountsPaymentProfile->create();
+					// Let's attach this Authorize.Net customer payment profile ID to the current account
+					$this->Controller->Account->AccountsPaymentProfile->create();
-						if (!$this->Controller->Account->AccountsPaymentProfile->save(array(
+					$this->Controller->Account->AccountsPaymentProfile->set(
+						array(
-									'account_id'			=> $this->Controller->Account->id,
+							'account_id'         => $this->Controller->Account->id,
-									'payment_profile_id'	=> $paymentProfileId,
+							'payment_profile_id' => $paymentProfileId,
-									'cc_expiration_date'	=> $this->Controller->request->data['BillingInfo']['exp_year'] . '-' . $this->Controller->request->data['BillingInfo']['exp_month'] . '-01',
+							'cc_expiration_date' =>
+								$this->Controller->request->data['BillingInfo']['exp_year'] .
+								'-' .
+								$this->Controller->request->data['BillingInfo']['exp_month'] .
+								'-01',
-									'default'				=> 'Y',
+							'default'            => 'Y',
-									'date_saved'			=> date('Y-m-d H:i:s')
+							'date_saved'         => date('Y-m-d H:i:s')
-								))) {
-
-							$error_message .= 'Unfortunately, there was an error attaching your Authorize.Net customer payment profile ID to your current account.<br />';
-
+						)
+					);
+					if (!$this->Controller->Account->AccountsPaymentProfile->save()) {
+						$this->Controller->freshdeskFlashMessage(
+							'Unfortunately, there was an error attaching your Authorize.Net customer payment profile ID to your current account.<br />'
+						);
+						return;
-						} else {
-							// Now let's try to make a payment for the current account's subscription
-							// (if it costs anything)
+					} else {
+						// Now let's try to make a payment for the current account's subscription
+						// (if it costs anything)
-							if ($charge_amount>0) {
+						if ($charge_amount > 0) {
-								$response = $this->Controller->AuthorizeNet->chargeCard($customerProfileId, $paymentProfileId, array(
+							$response = $this->Controller->AuthorizeNet->chargeCard(
+								$customerProfileId,
+								$paymentProfileId,
-										array(
+								array(
+									array(
-											'id'			=> 'S' . $subscription['Subscription']['id'],
+										'id'          => 'S' . $subscription['Subscription']['id'],
-											'name'			=> $subscription['Subscription']['name'],
+										'name'        => $subscription['Subscription']['name'],
-											'description'	=> 'Subscription monthly tier (v' . $subscription['SubscriptionsVersion']['version'] . ')',
+										'description' =>
+											'Subscription monthly tier (v' .
+											$subscription['SubscriptionsVersion']['version'] .
+											')',
-											'price'			=> $charge_amount
+										'price'       => $charge_amount
-										)
+									)
-									));
+								)
+							);
 
-								if (empty($response['error']) && $charge_amount > 0) { // The card seemed to had been charged, so let's insert the new payment record
+							if (empty($response['error']) && $charge_amount > 0) {
+								// The card seemed to had been charged, so let's insert the new payment record
-									$this->Controller->Account->Payment->create();
+								$this->Controller->Account->Payment->create();
-									$this->Controller->Account->Payment->save(array(
+								$this->Controller->Account->Payment->save(
+									array(
-											'account_id'		=> $this->Controller->Account->id,
+										'account_id'      => $this->Controller->Account->id,
-											'payment_type_id'	=> 2,
+										'payment_type_id' => 2,
-											'description'		=> '"' . $subscription['Subscription']['name'] . '" Subscription Payment',
+										'description'     =>
+											'"' . $subscription['Subscription']['name'] . '" Subscription Payment',
-											'value'				=> $charge_amount,
+										'value'           => $charge_amount,
-											//'web_event_count'	=> (is_numeric($site_creation['pageviews']) ? $site_creation['pageviews'] : 0),
+										//'web_event_count'	=> (is_numeric($site_creation['pageviews']) ? $site_creation['pageviews'] : 0),
-											'transaction_id'	=> $response['transactionID'],
+										'transaction_id'  => $response['transactionID'],
-											'added_date'		=> date('Y-m-d H:i:s')
+										'added_date'      => date('Y-m-d H:i:s')
-										));
+									)
+								);
 
-									// Notify the account's owner
+								// Notify the account's owner
-									$this->Controller->UserAccount->sendEmail(array(
-											'email_vars'	=> array( // Except for the user's and account's names, which are determined and se(n)t automatically
+								$this->Controller->UserAccount->sendEmail(
+									array(
+										'email_vars' => array(
-												//'account_id'  => $account['Account']['id'],
+											//'account_id'  => $account['Account']['id'],
-												'value'		=> ($monthly_price - $discount),
+											'value'   => ($monthly_price - $discount),
-												'service'	=> '"' . $subscription['Subscription']['name'] . '" subscription payment',
+											'service' =>
+												'"' . $subscription['Subscription']['name'] . '" subscription payment',
-											),
+										),
-											'permission'	=> 'credit_card_transaction',
+										'permission' => 'credit_card_transaction',
-											'template'		=> 'payment-receipt',
+										'template'   => 'payment-receipt',
-											'subject'		=> 'Subscription Payment Receipt',
+										'subject'    => 'Subscription Payment Receipt',
-											'bcc'			=> ACCOUNT_MANAGERS
+										'bcc'        => ACCOUNT_MANAGERS
-										));
-
+									)
+								);
-								} else {
-									// There's been an error, let's display a warning message
+							} else {
+								// There's been an error, let's display a warning message
-									$error_message .= 'There\'s been an error charging your default stored CC. Please try again later or notify us about this issue!<br />';
+								$this->Controller->freshdeskFlashMessage(
+									'There\'s been an error charging your default stored CC. Please try again later or notify us about this issue!<br />'
+								);
+								return;
-								}
-							}
-						}
-					}
+							}
+						}
+					}
+				}
 
-					if ($error_message == '') {
-						// Finally let's unlock the account (since there doesn't seem to be any error)
-						$this->Controller->AccountComponent->activateAccount($this->Controller->Account->id, $account);
+				// Finally let's unlock the account (since there doesn't seem to be any error)
+				$this->Controller->AccountComponent->activateAccount($this->Controller->Account->id, $account);
-						return $this->Controller->redirect(array(
+				$this->Controller->redirect(
+					array(
-								'plugin'		=> 'accounts',
+						'plugin'     => 'accounts',
-								'controller'	=> 'accounts',
+						'controller' => 'accounts',
-								'action'		=> 'confirmation'
+						'action'     => 'confirmation'
-							));
-
-					} else {
-						$this->Controller->Session->setFlash($error_message . ' If you continue to receive this error, please visit our <a href="' . FRESHDESK_BASE_URL . '" target="_blank">Support Center</a>.', 'flash_alert');
-					}
-				}
+					)
+				);
+				return;
 			}
 		}
 
Index: app/Controller/AppController.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/Controller/AppController.php	(revision 910dfd7682da8acc8b40dd52d87737fc871111b0)
+++ app/Controller/AppController.php	(revision )
@@ -469,4 +469,12 @@
 		return ($pageviews > $this->current_account['Subscription']['web_events_limit']);
 	}
 
+	public function freshdeskFlashMessage($message, $element = 'flash_alert', array $params = array(), $key = 'flash') {
+		$message = trim($message);
+		$message .=
+			' If you continue to receive this error, please visit our <a href="' .
+			FRESHDESK_BASE_URL .
+			'" target="_blank">Support Center</a>.';
+		$this->Session->setFlash($message, $element, $params, $key);
+	}
 }
Index: app/Plugin/Accounts/Controller/AccountsController.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/Plugin/Accounts/Controller/AccountsController.php	(revision 910dfd7682da8acc8b40dd52d87737fc871111b0)
+++ app/Plugin/Accounts/Controller/AccountsController.php	(revision )
@@ -1,1824 +1,2265 @@
 <?php
-	class AccountsController extends AccountsAppController {
 
+/**
+ * Class AccountsController
+ *
+ * @property \UserAccountComponent UserAccount
+ */
+class AccountsController extends AccountsAppController
+{
+
-		var $uses = array(
+	var    $uses       = array(
-			'Account',
-			'AccountsExternalProviders',
-			'AccountsPlugins',
-			'AccountsUpgradedChart',
-			'Campaign',
-			'Channel',
-			'CMSPage',
-			'Coupon',
-			'Creative',
-			'EmailNotification',
-			'ExcelReport',
-			'ExternalProvider',
-			'IBehaviorDatasource',
-			'Payment',
-			'Plugin',
-			'SimilarWeb',
-			'Site',
-			'Subscription',
-			'TagQueue',
-			'TradeDeskAccount',
-			'UpgradeableChartCategory',
-			'User'
-		);
+		'Account',
+		'AccountsExternalProviders',
+		'AccountsPlugins',
+		'AccountsUpgradedChart',
+		'Campaign',
+		'Channel',
+		'CMSPage',
+		'Coupon',
+		'Creative',
+		'EmailNotification',
+		'ExcelReport',
+		'ExternalProvider',
+		'IBehaviorDatasource',
+		'Payment',
+		'Plugin',
+		'SimilarWeb',
+		'Site',
+		'Subscription',
+		'TagQueue',
+		'TradeDeskAccount',
+		'UpgradeableChartCategory',
+		'User'
+	);
-		public $components = array('AccountComponent' => array('className' => 'Account'), 'IBehavior', 'TradeDesk', 'AuthorizeNet', 'Sendgrid', 'Paginator', 'UserAccount', 'Highcharts', 'Pdf');
+	public $components = array(
+		'AccountComponent' => array('className' => 'Account'),
+		'IBehavior',
+		'TradeDesk',
+		'AuthorizeNet',
+		'Sendgrid',
+		'Paginator',
+		'UserAccount',
+		'Highcharts',
+		'Pdf'
+	);
-		
-		var $account;
-		//var $TradeDeskComponent;
-		var $isAdmin;
-		var $TDCredentials;
-		
+
+	var $account;
+	//var $TradeDeskComponent;
+	var $isAdmin;
+	var $TDCredentials;
+
-		public static $skipTracking = array('subscription_notification_list', 'get_sub_industries', 'get_coupon_details', 'payments_pdf', 'email_payments'); // Store which methods should be skipped by the URL tracking functionality
+	public static $skipTracking = array(
+		'subscription_notification_list',
+		'get_sub_industries',
+		'get_coupon_details',
+		'payments_pdf',
+		'email_payments'
+	); // Store which methods should be skipped by the URL tracking functionality
-		
+
-		function beforeFilter() {
+	function beforeFilter()
+	{
-			parent::beforeFilter();
-			$this->Auth->allow('get_sub_industries');
+		parent::beforeFilter();
+		$this->Auth->allow('get_sub_industries');
 
-	        $account_pages = array(/*'apps','manage_permission','revoke_permission','providers',*/'upgrade', 'download_reports','payments', 'payments_pdf'); // all the ones that require an account id
-	        //$no_account_pages = array('activate_app','disconnect_app','view','index'); // the ones that pass something other than the account id
+		/**
+		 * All the ones that require an account id
+		 *
+		 * @var array $account_pages
+		 */
+		$account_pages = array(
+			'upgrade',
+			'download_reports',
+			'payments',
+			'payments_pdf'
+		);
 
-
-	        if (isset($_GET['static']) && $_GET['static'] == 'true') {
-	        	// Don't do anything, this is just so that the AJAX methods
-	        	// would run freely
+		if (isset($_GET['static']) && $_GET['static'] == 'true') {
+			// Don't do anything, this is just so that the AJAX methods
+			// would run freely
-
-	       	} else if (isset($_GET['create']) && $_GET['create'] == 'true') { // we want to create a new account
+		} elseif (isset($_GET['create']) && $_GET['create'] == 'true') {
+			// we want to create a new account
-				// Remove / unset the potentially set current account value
-		        $this->Session->delete('User.Account');
-		        $this->set('account_id', null);
-		        unset($this->account_menu_items);
-		        // reload current page to be absolutely sure the session is now clear
-		        if (!empty($this->current_account)) {
+			// Remove / unset the potentially set current account value
+			$this->Session->delete('User.Account');
+			$this->set('account_id', null);
+			unset($this->account_menu_items);
+			// reload current page to be absolutely sure the session is now clear
+			if (!empty($this->current_account)) {
-		        	return $this->redirect(array('plugin' => 'accounts', 'controller' => 'accounts', 'action' => 'add', '?' => array('create' => 'true')));
+				$this->redirect(
+					array(
+						'plugin'     => 'accounts',
+						'controller' => 'accounts',
+						'action'     => 'add',
+						'?'          => array('create' => 'true')
+					)
+				);
+				return;
-		        }
+			}
+		} elseif ($this->params['action'] != 'index') {
+			// we're not creating an account, lets get the account info, etc
+			// current account as defined by the app controller
+			$this->Account->id = $this->current_account['Account']['id'];
 
-			} else if($this->params['action'] != 'index') { // we're not creating an account, lets get the account info, etc
-				$this->Account->id = $this->current_account['Account']['id']; // current account as defined by the app controller
-		        
-		        if (!$this->Account->exists() && !isset($_GET['create']) && $this->Auth->loggedIn()) {
-		        	// User is trying to access an invalid account.
-		        	// Do not show this to logged-out users -- they should be sent back to login page, not shown a 404.
-		            throw new NotFoundException(__('Invalid account'));
+			if (!$this->Account->exists() && !isset($_GET['create']) && $this->Auth->loggedIn()) {
+				// User is trying to access an invalid account.
+				// Do not show this to logged-out users -- they should be sent back to login page, not shown a 404.
+				throw new NotFoundException(__('Invalid account'));
-		            return $this->redirect(array('action' => 'view', $this->Account->id));
-		        }
-	        	$this->account = $this->current_account;
-		        if (isset($this->account) && !empty($this->account)) {
-		        	$this->isAdmin = $this->AccountComponent->isAdmin();
-			        $this->set('is_admin', $this->isAdmin);
-					
-			        $this->account_warnings = $this->accountStatusCheck($this->account);
-		        	$this->set('warnings', $this->account_warnings);
-					
-		            // first, is the current account cancelled?
+			}
+			$this->account = $this->current_account;
+			if (isset($this->account) && !empty($this->account)) {
+				$this->isAdmin = $this->AccountComponent->isAdmin();
+				$this->set('is_admin', $this->isAdmin);
+
+				$this->account_warnings = $this->accountStatusCheck($this->account);
+				$this->set('warnings', $this->account_warnings);
+
+				// first, is the current account cancelled?
-		        	if ($this->account['Account']['account_state']=='C' && $this->request->params['action']!='index') {
+				if ($this->account['Account']['account_state'] == 'C' && $this->request->params['action'] != 'index') {
-						$this->Session->setFlash('The account you\'ve just accessed has been ' . ($this->account['Account']['account_state']=='C' ? 'cancelled' : 'paused') . '. If you continue to receive this error, please visit our <a href="' . FRESHDESK_BASE_URL . '" target="_blank">Support Center</a>.', 'flash_alert');
-			        	return $this->redirect(array('action' => 'index'));
-			        	
-					} else if ($this->account['Account']['account_state']=='P' && !$this->is_super_admin && $this->request->params['action']!='index') {
-						return $this->redirect(array(
+					$this->Session->setFlash(
+						'The account you\'ve just accessed has been ' .
+						($this->account['Account']['account_state'] == 'C' ? 'cancelled' : 'paused') .
+						'. If you continue to receive this error, please visit our <a href="' .
+						FRESHDESK_BASE_URL .
+						'" target="_blank">Support Center</a>.',
+						'flash_alert'
+					);
+					$this->redirect(array('action' => 'index'));
+					return;
+				} else if ($this->account['Account']['account_state'] == 'P' &&
+				           !$this->is_super_admin &&
+				           $this->request->params['action'] != 'index'
+				) {
+					$this->redirect(
+						array(
-								'plugin'		=> false, 
+							'plugin'     => false,
-								'controller'	=> 'pages', 
+							'controller' => 'pages',
-								'action' 		=> 'paused_account'
+							'action'     => 'paused_account'
-							));
+						)
+					);
+					return;
-					}
-					
-					// second, does the user have permissions to be here?
-			        $account_pages[] = 'add';
+				}
+
+				// second, does the user have permissions to be here?
+				$account_pages[] = 'add';
-			        if (in_array($this->params['action'], $account_pages) && !$this->isAdmin) { // make sure user has permissions
-			        	$this->Session->setFlash('You do not have permissions to view this page. If you continue to receive this error, please visit our <a href="' . FRESHDESK_BASE_URL . '" target="_blank">Support Center</a>.', 'flash_alert');
-			        	return $this->redirect(array('action' => 'view', $this->Account->id));
+				if (in_array($this->params['action'], $account_pages) &&
+				    !$this->isAdmin
+				) { // make sure user has permissions
+					$this->Session->setFlash(
+						'You do not have permissions to view this page. If you continue to receive this error, please visit our <a href="' .
+						FRESHDESK_BASE_URL .
+						'" target="_blank">Support Center</a>.',
+						'flash_alert'
+					);
+					$this->redirect(array('action' => 'view', $this->Account->id));
+					return;
-					}
-					
-					// third, has the account been inactivated? (and why?) if they've got a subscription set, we need to adjust criteria
+				}
+
+				// third, has the account been inactivated? (and why?) if they've got a subscription set, we need to adjust criteria
-					if (empty($this->account_warnings) && $this->account['Account']['account_state'] == 'I'/*&& 
-						$this->account['Account']['custom_billing'] == 'N'*/) { // check for account warnings
+				if (empty($this->account_warnings) && $this->account['Account']['account_state'] == 'I') {
+					// check for account warnings
-						$this->Account->saveField('account_state', 'A');
-			        	$this->set('account_disabled', false);
-			        }
+					$this->Account->saveField('account_state', 'A');
+					$this->set('account_disabled', false);
+				}
 
-		        	// passed all of the above tests, set this account id to their session
-		        	$this->Session->write('User.Account', $this->Account->id);
+				// passed all of the above tests, set this account id to their session
+				$this->Session->write('User.Account', $this->Account->id);
-		        	$this->set('new_account_id', $this->account['Account']['id']); //$account_id
+				$this->set('new_account_id', $this->account['Account']['id']);
-		        	
-		        } elseif ($this->Auth->loggedIn()) {
+
+			} elseif ($this->Auth->loggedIn()) {
-		        	
-		        	// User is logged in but doesn't have an account selected.
-		        	$this->Session->setFlash('Please select an account.', 'flash_alert');
+				// User is logged in but doesn't have an account selected.
+				$this->Session->setFlash('Please select an account.', 'flash_alert');
-		            return $this->redirect(array('action' => 'index'));
+				$this->redirect(array('action' => 'index'));
+				return;
-		        }
-	        }
-	    }
-		
+			}
+		}
+	}
+
+	public function index()
+	{
-		
+
-	    public function index() {
-	    	
-	    	if (isset($_GET['test_highcharts'])) {
-	    		// Simple test for the new highcharts component's output
-		    	$data = array(
+		if (isset($_GET['test_highcharts'])) {
+			// Simple test for the new highcharts component's output
+			$data = array(
-					array("06.17.2014",121), 
+				array("06.17.2014", 121),
-					array("06.18.2014",107), 
+				array("06.18.2014", 107),
-					array("06.19.2014",135), 
+				array("06.19.2014", 135),
-					array("06.20.2014",103), 
+				array("06.20.2014", 103),
-					array("06.21.2014",65), 
+				array("06.21.2014", 65),
-					array("06.22.2014",46), 
+				array("06.22.2014", 46),
-					array("06.23.2014",109), 
+				array("06.23.2014", 109),
-					array("06.24.2014",119), 
+				array("06.24.2014", 119),
-					array("06.25.2014",127), 
+				array("06.25.2014", 127),
-					array("06.26.2014",108), 
+				array("06.26.2014", 108),
-					array("06.27.2014",88), 
+				array("06.27.2014", 88),
-					array("06.28.2014",49), 
+				array("06.28.2014", 49),
-					array("06.29.2014",57), 
+				array("06.29.2014", 57),
-					array("06.30.2014",124), 
+				array("06.30.2014", 124),
-					array("07.01.2014",90), 
+				array("07.01.2014", 90),
-					array("07.02.2014",94), 
+				array("07.02.2014", 94),
-					array("07.03.2014",98), 
+				array("07.03.2014", 98),
-					array("07.04.2014",43), 
+				array("07.04.2014", 43),
-					array("07.05.2014",47), 
+				array("07.05.2014", 47),
-					array("07.06.2014",53), 
+				array("07.06.2014", 53),
-					array("07.07.2014",97), 
+				array("07.07.2014", 97),
-					array("07.08.2014",101), 
+				array("07.08.2014", 101),
-					array("07.09.2014",132), 
+				array("07.09.2014", 132),
-					array("07.10.2014",123), 
+				array("07.10.2014", 123),
-					array("07.11.2014",107), 
+				array("07.11.2014", 107),
-					array("07.12.2014",43), 
+				array("07.12.2014", 43),
-					array("07.13.2014",45), 
+				array("07.13.2014", 45),
-					array("07.14.2014",97), 
+				array("07.14.2014", 97),
-					array("07.15.2014",92), 
+				array("07.15.2014", 92),
-					array("07.16.2014",99), 
+				array("07.16.2014", 99),
-					array("07.17.2014",0)
+				array("07.17.2014", 0)
-				);
-		    	
+			);
+
-				$chart = $this->Highcharts->generateChart($data, 'area'/*, array(
+			$chart = $this->Highcharts->generateChart(
+				$data,
+				'area'/*, array(
 						'color'		=> '#ffcccc', 
 						'height'	=> 300, 
 						'title'		=> 'Sparkline test', 
 						'width'		=> 400, 
 						'y-title'	=> 'Y axis values'
-					)*/);
+					)*/
+			);
-				if ($chart) {
-					echo '<img src="data:image/png;base64,', base64_encode($chart), '" />';
-				}
-				die();
-	    	}
-	    	
+			if ($chart) {
+				echo '<img src="data:image/png;base64,', base64_encode($chart), '" />';
+			}
+			die();
+		}
+
-	    	
-	    	
-	    	// Remove / unset the potentially set current account value
-	        $this->Session->delete('User.Account');
-	        $this->set('account_id', null);
-	        unset($this->account_menu_items);
+		// Remove / unset the potentially set current account value
+		$this->Session->delete('User.Account');
+		$this->set('account_id', null);
+		unset($this->account_menu_items);
 
-	        $account_ids = $this->Account->AccountsUser->find('list', array(
+		$account_ids = $this->Account->AccountsUser->find(
+			'list',
+			array(
-	                'conditions' => array(
-	                    'AccountsUser.user_id' => $this->Auth->user('id'),
-	                ),
+				'conditions' => array(
+					'AccountsUser.user_id' => $this->Auth->user('id'),
+				),
-	                'fields' => array('AccountsUser.account_id')
+				'fields'     => array('AccountsUser.account_id')
-	            ));
+			)
+		);
 
-	        // Setting the default sort rules for the custom audiences list
-	        if (!@$_GET['sort']) {
-	        	$_GET['sort'] = 'company_name';
-	        }
-	        if (!@$_GET['direction']) {
-	        	$_GET['direction'] = 'asc';
-	        }
-			
+		// Setting the default sort rules for the custom audiences list
+		if (!@$_GET['sort']) {
+			$_GET['sort'] = 'company_name';
+		}
+		if (!@$_GET['direction']) {
+			$_GET['direction'] = 'asc';
+		}
+
-			
-			$conditions = array('OR' => array(
+		$conditions = array(
+			'OR' => array(
-                    'Account.user_id'	=> $this->Auth->user('id'),
+				'Account.user_id' => $this->Auth->user('id'),
-                    'Account.id' 		=> array_values($account_ids)
+				'Account.id'      => array_values($account_ids)
-                ));
+			)
+		);
-   			
-            if (!empty($_GET['filter'])) {
-                $filter = $_GET['filter'];
-                $this->set('filter', $filter);
-				
-                $conditions = array(
-                	'AND' => array(
+
+		if (!empty($_GET['filter'])) {
+			$filter = $_GET['filter'];
+			$this->set('filter', $filter);
+
+			$conditions = array(
+				'AND' => array(
-						array('OR' => array(
+					array(
+						'OR' => array(
-			                    'Account.company_name LIKE'	=> '%' . $filter . '%', 
+							'Account.company_name LIKE' => '%' . $filter . '%',
-			                    'Account.address_1 LIKE' 	=> '%' . $filter . '%', 
+							'Account.address_1 LIKE'    => '%' . $filter . '%',
-			                    'Account.city LIKE' 		=> '%' . $filter . '%', 
+							'Account.city LIKE'         => '%' . $filter . '%',
-			                    'User.first_name LIKE' 		=> '%' . $filter . '%', 
+							'User.first_name LIKE'      => '%' . $filter . '%',
-			                    'User.last_name LIKE' 		=> '%' . $filter . '%'
+							'User.last_name LIKE'       => '%' . $filter . '%'
-			                )), 
-      					array('OR' => array(
+						)
+					),
+					array(
+						'OR' => array(
-			                    'Account.user_id'	=> $this->Auth->user('id'),
+							'Account.user_id' => $this->Auth->user('id'),
-			                    'Account.id' 		=> array_values($account_ids)
+							'Account.id'      => array_values($account_ids)
-			                ))
-					));
+						)
+					)
+				)
+			);
-            }
-			
-			$this->Paginator->settings = array(
+		}
+
+		$this->Paginator->settings = array(
-	            'Account'          => array(
+			'Account' => array(
-	                'conditions'    => array(
+				'conditions' => array(
-	                    $conditions,
-	                    'Account.account_state <> \'C\''
-	                ),
+					$conditions,
+					'Account.account_state <> \'C\''
+				),
-	                'limit'         => 10,
+				'limit'      => 10,
-	                'order'         => array('company_name' => 'asc'),
+				'order'      => array('company_name' => 'asc'),
-	            	'paramType'     => 'querystring'
+				'paramType'  => 'querystring'
-	            )
-	        );
+			)
+		);
-	        $accounts = $this->Paginator->paginate('Account');
+		$accounts                  = $this->Paginator->paginate('Account');
-	        $accounts_formatted = array();
+		$accounts_formatted        = array();
 
-	        foreach ($accounts as $account) {
+		foreach ($accounts as $account) {
-	            $account_formatted['id'] = $account['Account']['id'];
+			$account_formatted['id']                = $account['Account']['id'];
-	            $account_formatted['industry'] = $account['Industry']['name'];
+			$account_formatted['industry']          = $account['Industry']['name'];
-	            $account_formatted['region'] = $account['Region']['region'];
+			$account_formatted['region']            = $account['Region']['region'];
-	            $account_formatted['account_state'] = $account['Account']['account_state'];
+			$account_formatted['account_state']     = $account['Account']['account_state'];
-	            $account_formatted['company_name'] = $account['Account']['company_name'];
+			$account_formatted['company_name']      = $account['Account']['company_name'];
-	            $account_formatted['subscription'] = /*($account['Account']['custom_billing']=='Y' && $account['Account']['custom_subscription_price'] ? '$' . number_format($account['Account']['custom_subscription_price'], 2) : */$account['Subscription']['name']/*)*/;
+			$account_formatted['subscription']      = $account['Subscription']['name'];
-	            $account_formatted['subscription_type'] = $account['Subscription']['subscription_type'];
+			$account_formatted['subscription_type'] = $account['Subscription']['subscription_type'];
-	            $account_formatted['created'] = $account['Account']['created'];
+			$account_formatted['created']           = $account['Account']['created'];
-	            $account_formatted['permission'] = null;
+			$account_formatted['permission']        = null;
-	            $account_formatted['warnings'] = $this->accountStatusCheck($account);
+			$account_formatted['warnings']          = $this->accountStatusCheck($account);
-	            $accounts_formatted[][] = $account_formatted;
+			$accounts_formatted[][]                 = $account_formatted;
-	        }
+		}
 
-	        $this->set('accounts', $accounts_formatted);
+		$this->set('accounts', $accounts_formatted);
 
-	        $release_notes = $this->CMSPage->find('first', array(
+		$release_notes = $this->CMSPage->find(
+			'first',
+			array(
-	                'conditions' => array(
-	                    'id' => 1
-	                )
+				'conditions' => array(
+					'id' => 1
+				)
-	            ));
+			)
+		);
-	        $this->set('release_notes', $release_notes);
+		$this->set('release_notes', $release_notes);
-	        $notes_seen = $this->CMSPage->CMSPagesUsers->find('count', array(
+		$notes_seen = $this->CMSPage->CMSPagesUsers->find(
+			'count',
+			array(
-	                'conditions' => array(
+				'conditions' => array(
-	                    'user_id' => $this->Auth->user('id'),
+					'user_id'       => $this->Auth->user('id'),
-	                    'c_m_s_page_id' => 1,
+					'c_m_s_page_id' => 1,
-	                    'stamp' => $release_notes['CMSPage']['modified']
+					'stamp'         => $release_notes['CMSPage']['modified']
-	                )
+				)
-	            ));
+			)
+		);
-	        $this->set('notes_seen', $notes_seen);
+		$this->set('notes_seen', $notes_seen);
 
-	        if (@$this->Session->read('User.ucb') > 0 || isset($_GET['ucb'])) {
+		if (@$this->Session->read('User.ucb') > 0 || isset($_GET['ucb'])) {
-	        	$custom_css = '/css/whitelabel/' . (isset($_GET['ucb']) ? $_GET['ucb'] : $this->Session->read('User.ucb')) . '.css';
+			$custom_css =
+				'/css/whitelabel/' . (isset($_GET['ucb']) ? $_GET['ucb'] : $this->Session->read('User.ucb')) . '.css';
-	        } else {
-	        	$custom_css = '/css/whitelabel/' . $this->Auth->user('id') . '.css';
-	        }
-	        $this->set('custom_css', $custom_css);
-	    }
+		} else {
+			$custom_css = '/css/whitelabel/' . $this->Auth->user('id') . '.css';
+		}
+		$this->set('custom_css', $custom_css);
+	}
 
-
-		public function add($id = null) {
-			$terms = $this->CMSPage->find('first', array(
+	public function add($id = null)
+	{
+		$terms = $this->CMSPage->find(
+			'first',
+			array(
-					'conditions' => array(
-						'id' => 3 // Terms of Service
-					)
+				'conditions' => array(
+					'id' => 3 // Terms of Service
+				)
-				));
+			)
+		);
 
-	        $this->set('terms', $terms);
+		$this->set('terms', $terms);
 
-			$this->UserAccount->register($this->current_user, @$this->current_account);
+		$this->UserAccount->register($this->current_user, @$this->current_account);
 
-			$this->set('account_details', $this->account);
-	        $this->set('account_status', $this->account_warnings);
+		$this->set('account_details', $this->account);
+		$this->set('account_status', $this->account_warnings);
 
-	        // set variables for this page, to populate dropdowns, etc
+		// set variables for this page, to populate dropdowns, etc
-	        $this->set('industries', ClassRegistry::init('Industry')->find('list', array(
+		$this->set(
+			'industries',
+			ClassRegistry::init('Industry')->find(
+				'list',
+				array(
-		            'conditions'    => array(
+					'conditions' => array(
-		                'parent_id IS NULL'
-		            ),
+						'parent_id IS NULL'
+					),
-		            'order'         => 'name'
+					'order'      => 'name'
-		        )));
+				)
+			)
+		);
-	        $sub_industries = array();
-	        if (!empty($this->account)) {
-	            // Let's get the list of sub-industries for the current account
+		$sub_industries = array();
+		if (!empty($this->account)) {
+			// Let's get the list of sub-industries for the current account
-	            $sub_industries = ClassRegistry::init('Industry')->find('list', array(
+			$sub_industries = ClassRegistry::init('Industry')->find(
+				'list',
+				array(
-		                'conditions'    => array(
+					'conditions' => array(
-		                    'parent_id' => $this->account['Account']['industry_id']
-		                ),
+						'parent_id' => $this->account['Account']['industry_id']
+					),
-		                'order'         => 'name'
+					'order'      => 'name'
-		            ));
+				)
+			);
-	        }
-	        $this->set('sub_industries', $sub_industries);
-	        $this->set('accounts', $this->Account->find('count'));
-			
-			$current_subscription_version_id = $this->AccountComponent->getCurrentSubscriptionVersionId();
+		}
+		$this->set('sub_industries', $sub_industries);
+		$this->set('accounts', $this->Account->find('count'));
+
+		$current_subscription_version_id = $this->AccountComponent->getCurrentSubscriptionVersionId();
-			$subscriptions = $this->Subscription->find('all', array(
+		$subscriptions                   = $this->Subscription->find(
+			'all',
+			array(
-					'conditions'	=> array(
+				'conditions' => array(
-						'Subscription.subscription_type'	=> 'R',
+					'Subscription.subscription_type' => 'R',
-						'Subscription.version_id'			=> $current_subscription_version_id
+					'Subscription.version_id'        => $current_subscription_version_id
-					),
+				),
-					'order'			=> array(
+				'order'      => array(
-						'Subscription.web_events_limit'		=> 'ASC',
+					'Subscription.web_events_limit' => 'ASC',
-						'Subscription.audience_size'		=> 'ASC',
+					'Subscription.audience_size'    => 'ASC',
-					),
+				),
-					'recursive'	=> 0
+				'recursive'  => 0
-				));
+			)
+		);
-			
-			$this->set('subscriptions', $subscriptions);
+
+		$this->set('subscriptions', $subscriptions);
-	        $this->set('regions', $this->Region->find('list', array( 'conditions' => array( 'Region.active' => 'Y' ))));
+		$this->set('regions', $this->Region->find('list', array('conditions' => array('Region.active' => 'Y'))));
-	        $this->set('hide_user', 1);
+		$this->set('hide_user', 1);
 
-
-			// Next let's get the current account's CC details
-			// (based on its payment profile ID)
-			$paymentProfile = null;
-			if (!empty($this->account)) {
-				$defaultPaymentProfile = $this->AuthorizeNet->getDefaultPaymentProfile($this->account);
-				if (!empty($defaultPaymentProfile['payment_profile_id'])) {
-					$response = $this->AuthorizeNet->getCustomerPaymentProfile(
-						$this->account['Account']['profile_id'],
-						$defaultPaymentProfile['payment_profile_id']
-					);
-					
-					if ($response->isOk()) {
-						$paymentProfile = $response->xml->paymentProfile;
-					}
-				}
-			}
-			$this->set('payment_profile', $paymentProfile);
+		// Next let's get the current account's CC details
+		// (based on its payment profile ID)
+		$paymentProfile = null;
+		if (!empty($this->account)) {
+			$defaultPaymentProfile = $this->AuthorizeNet->getDefaultPaymentProfile($this->account);
+			if (!empty($defaultPaymentProfile['payment_profile_id'])) {
+				$response = $this->AuthorizeNet->getCustomerPaymentProfile(
+					$this->account['Account']['profile_id'],
+					$defaultPaymentProfile['payment_profile_id']
+				);
+
+				if ($response->isOk()) {
+					$paymentProfile = $response->xml->paymentProfile;
+				}
+			}
+		}
+		$this->set('payment_profile', $paymentProfile);
 
-			// Next let's get the cheapest regular and RTB subscriptions
-			$cheapestSubscription = null;
-			foreach ($subscriptions as $subscription) {
-				if (empty($cheapestSubscription['Subscription']['monthly_price'])
+		// Next let's get the cheapest regular and RTB subscriptions
+		$cheapestSubscription = null;
+		foreach ($subscriptions as $subscription) {
+			if (empty($cheapestSubscription['Subscription']['monthly_price'])
-					|| $subscription['Subscription']['monthly_price'] < $cheapestSubscription['Subscription']['monthly_price']
+			    ||
+			    $subscription['Subscription']['monthly_price'] < $cheapestSubscription['Subscription']['monthly_price']
-				) {
-					$cheapestSubscription = $subscription;
-				}
-			}
-			$this->set('cheapest_subscription', $cheapestSubscription);
+			) {
+				$cheapestSubscription = $subscription;
+			}
+		}
+		$this->set('cheapest_subscription', $cheapestSubscription);
 
-			$rtbSubscription = $this->Subscription->find('first', array(
+		$rtbSubscription = $this->Subscription->find(
+			'first',
+			array(
-					'conditions'	=> array(
+				'conditions' => array(
-						'Subscription.subscription_type'	=> 'RTB',
+					'Subscription.subscription_type' => 'RTB',
-						'Subscription.version_id'			=> $current_subscription_version_id
+					'Subscription.version_id'        => $current_subscription_version_id
-					)
+				)
-				));
+			)
+		);
-			$this->set('rtb_subscription', $rtbSubscription);
+		$this->set('rtb_subscription', $rtbSubscription);
 
-
-			// Let's get the current account's subscription coupon code, if existent
-			if ($this->current_account['Coupon']) {
-				foreach ($this->current_account['Coupon'] as $coupon) {
-					if (!is_null($coupon['end_date'])) {
-						$isExpired = strtotime($coupon['end_date']) <= time();
-					} else {
-						$isExpired = false;
-					}
-					if (!$isExpired && $coupon['AccountsCoupon']['active'] && $coupon['is_active']) {
-						$this->set('coupon', $coupon);
-						break; // We assume there's only one subscription coupon code per account
-					}
-				}
-			}
+		// Let's get the current account's subscription coupon code, if existent
+		if ($this->current_account['Coupon']) {
+			foreach ($this->current_account['Coupon'] as $coupon) {
+				if (!is_null($coupon['end_date'])) {
+					$isExpired = strtotime($coupon['end_date']) <= time();
+				} else {
+					$isExpired = false;
+				}
+				if (!$isExpired && $coupon['AccountsCoupon']['active'] && $coupon['is_active']) {
+					$this->set('coupon', $coupon);
+					break; // We assume there's only one subscription coupon code per account
+				}
+			}
+		}
 
-			// we also display information about subscription payments on this page
+		// we also display information about subscription payments on this page
-	        $payment = $this->Payment->find('first', array(
+		$payment = $this->Payment->find(
+			'first',
+			array(
-		            'conditions' => array(
+				'conditions' => array(
-		                'Payment.account_id' 		=> $this->Account->id,
+					'Payment.account_id'      => $this->Account->id,
-		                'Payment.payment_type_id'	=> 2
+					'Payment.payment_type_id' => 2
-		            ),
+				),
-		            'order' => array(
+				'order'      => array(
-		                'Payment.added_date DESC'
-		            )
+					'Payment.added_date DESC'
+				)
-		        ));
+			)
+		);
-	        if (isset($payment['Payment'])) {
-	            $subscription_payment = array(
+		if (isset($payment['Payment'])) {
+			$subscription_payment = array(
-	                'date' => strtotime($payment['Payment']['added_date']),
+				'date'       => strtotime($payment['Payment']['added_date']),
-	                'cost' => abs($this->current_account['Subscription']['monthly_price']),
+				'cost'       => abs($this->current_account['Subscription']['monthly_price']),
-	                'web_events' => $payment['Payment']['web_event_count']
-	            );
-	            $this->set('subscription_payment', $subscription_payment);
-	        }
-	    }
+				'web_events' => $payment['Payment']['web_event_count']
+			);
+			$this->set('subscription_payment', $subscription_payment);
+		}
+	}
 
-
-	    public function view($id = null) {
+	public function view($id = null)
+	{
-	        // the view page manages a ton of redirects to specific pages within the account
-	        $func_get_args = func_get_args();
-	        array_shift($func_get_args);
+		// the view page manages a ton of redirects to specific pages within the account
+		$func_get_args = func_get_args();
+		array_shift($func_get_args);
-	        if (count($func_get_args)>0) { // We probably have a path to go to, so let's
+		if (count($func_get_args) > 0) { // We probably have a path to go to, so let's
-	            $redirect_url = array();
+			$redirect_url = array();
-	            for ($i=0; $i<count($func_get_args); $i++) {
+			for ($i = 0; $i < count($func_get_args); $i++) {
-	                if ($i==0) { // This should be the plugin
+				if ($i == 0) { // This should be the plugin
-	                    $redirect_url['plugin'] = $func_get_args[$i];
+					$redirect_url['plugin'] = $func_get_args[$i];
-	                } else if ($i==1) { // This should be the controller
+				} else if ($i == 1) { // This should be the controller
-	                    $redirect_url['controller'] = $func_get_args[$i];
+					$redirect_url['controller'] = $func_get_args[$i];
-	                } else if ($i==2) { // This should be the action
+				} else if ($i == 2) { // This should be the action
-	                    $redirect_url['action'] = $func_get_args[$i];
-	                } else { // These are the rest of the URL's params
-	                    $redirect_url[] = $func_get_args[$i];
-	                }
-	            }
-	            return $this->redirect($redirect_url);
-	            die();
-	        }
-			// not sure what these redirects are for, vs the ones above........ surely there must be some overlap?
-	        $this->AccountComponent->accountRedirects();
+					$redirect_url['action'] = $func_get_args[$i];
+				} else { // These are the rest of the URL's params
+					$redirect_url[] = $func_get_args[$i];
+				}
+			}
+			return $this->redirect($redirect_url);
+			die();
+		}
+		// not sure what these redirects are for, vs the ones above........ surely there must be some overlap?
+		$this->AccountComponent->accountRedirects();
 
-	        // we also display informatino about subscription payments on this page
+		// we also display informatino about subscription payments on this page
-	        $payment = $this->Payment->find('first', array(
+		$payment = $this->Payment->find(
+			'first',
+			array(
-	            'conditions' => array(
+				'conditions' => array(
-	                'Payment.account_id' 		=> $this->Account->id,
+					'Payment.account_id'      => $this->Account->id,
-	                'Payment.payment_type_id'	=> 2
+					'Payment.payment_type_id' => 2
-	            ),
+				),
-	            'order' => array(
+				'order'      => array(
-	                'Payment.added_date DESC'
-	            )
+					'Payment.added_date DESC'
+				)
-	        ));
+			)
+		);
-	        if (isset($payment['Payment'])) {
-	            $subscription_payment = array(
+		if (isset($payment['Payment'])) {
+			$subscription_payment = array(
-	                'date' => strtotime($payment['Payment']['added_date']),
+				'date'       => strtotime($payment['Payment']['added_date']),
-	                'cost' => abs($this->current_account['Subscription']['monthly_price']),
+				'cost'       => abs($this->current_account['Subscription']['monthly_price']),
-	                'web_events' => $payment['Payment']['web_event_count']
-	            );
-	            $this->set('subscription_payment', $subscription_payment);
-	        }
-	    }
+				'web_events' => $payment['Payment']['web_event_count']
+			);
+			$this->set('subscription_payment', $subscription_payment);
+		}
+	}
 
-		public function confirmation() {
+	public function confirmation()
+	{
-			// Calculate the account's subscription cost to submit with Google Analytics'
-			// eCommerce transaction
-			$revenue = $this->current_account['Subscription']['monthly_price'];
+		// Calculate the account's subscription cost to submit with Google Analytics'
+		// eCommerce transaction
+		$revenue = $this->current_account['Subscription']['monthly_price'];
-			$coupon = $this->AccountComponent->get_coupon_for_account($this->current_account);
+		$coupon  = $this->AccountComponent->get_coupon_for_account($this->current_account);
-			if (!empty($coupon)) {
-				if ($coupon['amount_type'] == 1) {
-					$revenue -= $coupon['amount'];
-				} else if ($coupon['amount_type'] == 2) {
-					$revenue *= ((100 - $coupon['amount']) / 100);
-				}
-				if ($revenue < 0) {
-					$revenue = 0;
-				}
-			}
-			$this->set('revenue', number_format($revenue, 2, '.', ""));
-			$this->set('gaEcommerce', true);
-			
-			$this->set('subscription', $this->current_account['Subscription']);
-			
-			$pardot_data = array(
+		if (!empty($coupon)) {
+			if ($coupon['amount_type'] == 1) {
+				$revenue -= $coupon['amount'];
+			} else if ($coupon['amount_type'] == 2) {
+				$revenue *= ((100 - $coupon['amount']) / 100);
+			}
+			if ($revenue < 0) {
+				$revenue = 0;
+			}
+		}
+		$this->set('revenue', number_format($revenue, 2, '.', ""));
+		$this->set('gaEcommerce', true);
+
+		$this->set('subscription', $this->current_account['Subscription']);
+
+		$pardot_data = array(
-			    'first_name'	=> $this->current_user['User']['first_name'],
+			'first_name' => $this->current_user['User']['first_name'],
-			    'last_name'		=> $this->current_user['User']['last_name'],
+			'last_name'  => $this->current_user['User']['last_name'],
-			    'email'			=> $this->current_user['User']['email'],
+			'email'      => $this->current_user['User']['email'],
-			    'company'		=> $this->current_account['Account']['company_name']
+			'company'    => $this->current_account['Account']['company_name']
-			);
-			
-			$query_string = http_build_query($pardot_data);
-			
-			$this->set('pardot_query_string', $query_string);
-		}
+		);
+
+		$query_string = http_build_query($pardot_data);
+
+		$this->set('pardot_query_string', $query_string);
+	}
 
-	    public function invite() {
+	public function invite()
+	{
-	        if ($this->request->is('post')) {
-	            // First let's get the support user (if any)
+		if ($this->request->is('post')) {
+			// First let's get the support user (if any)
-	            $support_user = $this->User->find('first', array(
+			$support_user = $this->User->find(
+				'first',
+				array(
-	                    'conditions' => array(
-	                        'User.email' => SUPPORT_EMAIL_ADDRESS
-	                    )
+					'conditions' => array(
+						'User.email' => SUPPORT_EMAIL_ADDRESS
+					)
-	                ));
+				)
+			);
 
-	            // ... and the list of already invited users and emails
+			// ... and the list of already invited users and emails
-	            $invited_users = $this->Account->AccountsUser->find('all', array(
+			$invited_users = $this->Account->AccountsUser->find(
+				'all',
+				array(
-	                    'conditions' => array(
+					'conditions' => array(
-	                        'account_id'    => $this->account['Account']['id']
+						'account_id' => $this->account['Account']['id']
-	                    )
+					)
-	                ));
+				)
+			);
 
-	            $invited_emails = $this->Account->AccountsEmail->find('all', array(
+			$invited_emails = $this->Account->AccountsEmail->find(
+				'all',
+				array(
-	                    'conditions' => array(
+					'conditions' => array(
-	                        'account_id'    => $this->account['Account']['id']
+						'account_id' => $this->account['Account']['id']
-	                    )
+					)
-	                ));
+				)
+			);
 
-
-	            // Let's check if the currently submitted email address belongs to an existing user
+			// Let's check if the currently submitted email address belongs to an existing user
-	            $user = $this->User->find('first', array(
+			$user = $this->User->find(
+				'first',
+				array(
-	                    'conditions' => array(
-	                        'email' => $this->request->data['AccountsEmail']['email']
-	                    )
+					'conditions' => array(
+						'email' => $this->request->data['AccountsEmail']['email']
+					)
-	                ));
+				)
+			);
 
-	            if ($user) { // It does
-	                if ($user['User']['id'] == $this->Auth->user('id')) { // You cannot invite yourself!
-	                    $this->Session->setFlash('You cannot invite yourself to an account!', 'flash_alert');
+			if ($user) { // It does
+				if ($user['User']['id'] == $this->Auth->user('id')) { // You cannot invite yourself!
+					$this->Session->setFlash('You cannot invite yourself to an account!', 'flash_alert');
-	                    return $this->redirect(array(
+					return $this->redirect(
+						array(
-	                            'action' => 'view',
-	                            $this->account['Account']['id']
+							'action' => 'view',
+							$this->account['Account']['id']
-	                        ));
+						)
+					);
-	                }
+				}
 
-	                // Let's check if the currently submitted user has already been invited to the current account
+				// Let's check if the currently submitted user has already been invited to the current account
-	                $invitation = $this->Account->AccountsUser->find('first', array(
+				$invitation = $this->Account->AccountsUser->find(
+					'first',
+					array(
-	                        'conditions' => array(
+						'conditions' => array(
-	                            'account_id'    => $this->account['Account']['id'],
+							'account_id' => $this->account['Account']['id'],
-	                            'user_id'       => $user['User']['id']
+							'user_id'    => $user['User']['id']
-	                        )
+						)
-	                    ));
+					)
+				);
 
-	                if ($invitation || $this->account['Account']['user_id']==$user['User']['id']) { // It already exists (or the current user is already the account's owner)
+				if ($invitation ||
+				    $this->account['Account']['user_id'] == $user['User']['id']
+				) { // It already exists (or the current user is already the account's owner)
-	                	$this->Session->setFlash('User already invited to this account!', 'flash_alert');
+					$this->Session->setFlash('User already invited to this account!', 'flash_alert');
 
-	                } else {
-	                    // Finally let's check if the current user is the support one, that the account doesn't already have an already existing owner
-	                    // (different than the support one), and that there's no invited email with an "O(wner)" status
-	                    $no_invited_email_owner = true;
-	                    foreach ($invited_emails as $invited_email) {
+				} else {
+					// Finally let's check if the current user is the support one, that the account doesn't already have an already existing owner
+					// (different than the support one), and that there's no invited email with an "O(wner)" status
+					$no_invited_email_owner = true;
+					foreach ($invited_emails as $invited_email) {
-	                        if ($invited_email['AccountsEmail']['permission']=='O') {
+						if ($invited_email['AccountsEmail']['permission'] == 'O') {
-	                            $no_invited_email_owner = false;
-	                        }
-	                    }
+							$no_invited_email_owner = false;
+						}
+					}
 
-	                    // If the current user is the support user and the current account owner is the support user
-	                    // and there aren't any existing users or emails for the account
-	                    // this user becomes the accout owner
+					// If the current user is the support user and the current account owner is the support user
+					// and there aren't any existing users or emails for the account
+					// this user becomes the accout owner
-	                    if ($support_user && $support_user['User']['id']==$this->Auth->user('id') &&
-	                  		$this->account['Account']['user_id']==$support_user['User']['id']/* && empty($invited_users)*/ &&
-							$no_invited_email_owner && $this->request->data['AccountsEmail']['permission']=='A') {
+					if ($support_user &&
+					    $support_user['User']['id'] == $this->Auth->user('id') &&
+					    $this->account['Account']['user_id'] == $support_user['User']['id']
+					    /* && empty($invited_users)*/ &&
+					    $no_invited_email_owner &&
+					    $this->request->data['AccountsEmail']['permission'] == 'A'
+					) {
 
-	                        // We're fine, so we'll just set the currently invited user as the account's owner
+						// We're fine, so we'll just set the currently invited user as the account's owner
-	                        $this->Account->updateAll(array(
+						$this->Account->updateAll(
+							array(
-	                                'user_id' => $user['User']['id']
+								'user_id' => $user['User']['id']
-	                            ), array(
+							),
+							array(
-	                                'Account.id' => $this->account['Account']['id']
+								'Account.id' => $this->account['Account']['id']
-	                            ));
+							)
+						);
 
-	                        // Let's send a confirmation email to this matching user
+						// Let's send a confirmation email to this matching user
-	                        $this->sendEmail(array(
+						$this->sendEmail(
+							array(
-	                                'vars' => array(
+								'vars'     => array(
-	                                    'recipient'     => $user['User']['first_name'] . ' ' . $user['User']['last_name'],
+									'recipient'  => $user['User']['first_name'] . ' ' . $user['User']['last_name'],
-	                                    'permission'    => ($this->request->data['AccountsEmail']['permission'] == 'A' ? 'Admin' : 'Viewer'),
+									'permission' => ($this->request->data['AccountsEmail']['permission'] == 'A'
+										? 'Admin' : 'Viewer'),
-	                                    'account'       => $this->account['Account']['company_name'],
+									'account'    => $this->account['Account']['company_name'],
-	                                    'creator'       => $this->account['User']['first_name'] . ' ' . $this->account['User']['last_name'],
+									'creator'    =>
+										$this->account['User']['first_name'] .
+										' ' .
+										$this->account['User']['last_name'],
-	                                    'link'          => 'https:' . SITE_URL . 'users/login'
+									'link'       => 'https:' . SITE_URL . 'users/login'
-	                                ),
+								),
-	                                'email'     => $user['User']['email'],
+								'email'    => $user['User']['email'],
-	                                'name'      => $user['User']['first_name'] . ' ' . $user['User']['last_name'],
+								'name'     => $user['User']['first_name'] . ' ' . $user['User']['last_name'],
-	                                'subject'   => 'Account Invitation',
+								'subject'  => 'Account Invitation',
-	                                'template'  => 'invitation'
+								'template' => 'invitation'
-	                            ));
+							)
+						);
 
-	                        // ... and add the support user back to the list of account users,
-	                        // as the support one
-	                        $this->Account->AccountsUser->create();
+						// ... and add the support user back to the list of account users,
+						// as the support one
+						$this->Account->AccountsUser->create();
-	                        $this->Account->AccountsUser->save(array(
+						$this->Account->AccountsUser->save(
+							array(
-	                                'AccountsUser' => array(
+								'AccountsUser' => array(
-	                                    'account_id'    => $this->account['Account']['id'],
+									'account_id' => $this->account['Account']['id'],
-	                                    'user_id'       => $support_user['User']['id'],
+									'user_id'    => $support_user['User']['id'],
-	                                    'permission'    => 'S' // Support
+									'permission' => 'S' // Support
-	                                )
+								)
-	                            ));
+							)
+						);
 
-	                        $this->Session->setFlash('The currently invited user has been successfully set as the account\'s owner.', 'flash_success');
+						$this->Session->setFlash(
+							'The currently invited user has been successfully set as the account\'s owner.',
+							'flash_success'
+						);
 
-	                    } else {
-	                        // We don't need to insert the accounts-emails record, since the currently invited user already exists
-	                        unset($this->request->data['AccountsEmail']['email']);
-	                        $this->request->data['AccountsEmail']['user_id'] = $user['User']['id'];
+					} else {
+						// We don't need to insert the accounts-emails record, since the currently invited user already exists
+						unset($this->request->data['AccountsEmail']['email']);
+						$this->request->data['AccountsEmail']['user_id'] = $user['User']['id'];
 
-	                        $this->Account->AccountsUser->create();
-	                        if ($this->Account->AccountsUser->save($this->request->data['AccountsEmail'])) {
+						$this->Account->AccountsUser->create();
+						if ($this->Account->AccountsUser->save($this->request->data['AccountsEmail'])) {
 
-	                            // Let's send a confirmation email to this matching user
+							// Let's send a confirmation email to this matching user
-	                            $this->sendEmail(array(
+							$this->sendEmail(
+								array(
-	                                    'vars' => array(
+									'vars'     => array(
-	                                        'recipient'     => $user['User']['first_name'] . ' ' . $user['User']['last_name'],
+										'recipient'  => $user['User']['first_name'] . ' ' . $user['User']['last_name'],
-	                                        'permission'    => ($this->request->data['AccountsEmail']['permission'] == 'A' ? 'Admin' : 'Viewer'),
+										'permission' => ($this->request->data['AccountsEmail']['permission'] == 'A'
+											? 'Admin' : 'Viewer'),
-	                                        'account'       => $this->account['Account']['company_name'],
+										'account'    => $this->account['Account']['company_name'],
-	                                        'creator'       => $this->account['User']['first_name'] . ' ' . $this->account['User']['last_name'],
+										'creator'    =>
+											$this->account['User']['first_name'] .
+											' ' .
+											$this->account['User']['last_name'],
-	                                        'link'          => 'https:' . SITE_URL . 'users/login'
+										'link'       => 'https:' . SITE_URL . 'users/login'
-	                                    ),
+									),
-	                                    'email'     => $user['User']['email'],
+									'email'    => $user['User']['email'],
-	                                    'name'      => $user['User']['first_name'] . ' ' . $user['User']['last_name'],
+									'name'     => $user['User']['first_name'] . ' ' . $user['User']['last_name'],
-	                                    'subject'   => 'Account Invitation',
+									'subject'  => 'Account Invitation',
-	                                    'template'  => 'invitation'
+									'template' => 'invitation'
-	                                ));
+								)
+							);
 
-	                            $this->Session->setFlash('You have successfully sent the invitation!', 'flash_success');
+							$this->Session->setFlash('You have successfully sent the invitation!', 'flash_success');
 
-	                        } else {
+						} else {
-	                            $this->Session->setFlash('Unfortunately, the invitation could not be sent. If you continue to receive this error, please visit our <a href="' . FRESHDESK_BASE_URL . '" target="_blank">Support Center</a>.', 'flash_alert');
+							$this->Session->setFlash(
+								'Unfortunately, the invitation could not be sent. If you continue to receive this error, please visit our <a href="' .
+								FRESHDESK_BASE_URL .
+								'" target="_blank">Support Center</a>.',
+								'flash_alert'
+							);
-	                        }
-	                    }
-	                }
+						}
+					}
+				}
 
-	            } else { // Let's check if the currently submitted email address has already been invited to the current account
+			} else { // Let's check if the currently submitted email address has already been invited to the current account
-	                $invitation = $this->Account->AccountsEmail->find('first', array(
+				$invitation = $this->Account->AccountsEmail->find(
+					'first',
+					array(
-	                        'conditions' => array(
+						'conditions' => array(
-	                            'account_id'    => $this->account['Account']['id'],
+							'account_id' => $this->account['Account']['id'],
-	                            'email'         => $this->request->data['AccountsEmail']['email']
+							'email'      => $this->request->data['AccountsEmail']['email']
-	                        )
+						)
-	                    ));
+					)
+				);
 
-	                if ($invitation) {
-	                    // It already exists
-	                    $this->Session->setFlash('Email already invited to this account!', 'flash_alert');
+				if ($invitation) {
+					// It already exists
+					$this->Session->setFlash('Email already invited to this account!', 'flash_alert');
 
-	                } else {
-	                    // First let's see if there are any other users or emails (except the support one) attached to the current account
-	                    // If not, we'll insert this new email as the account's owner, after its registration
-	                    $no_invited_email_owner = true;
-	                    foreach ($invited_emails as $invited_email) {
+				} else {
+					// First let's see if there are any other users or emails (except the support one) attached to the current account
+					// If not, we'll insert this new email as the account's owner, after its registration
+					$no_invited_email_owner = true;
+					foreach ($invited_emails as $invited_email) {
-	                        if ($invited_email['AccountsEmail']['permission']=='O') {
+						if ($invited_email['AccountsEmail']['permission'] == 'O') {
-	                            $no_invited_email_owner = false;
-	                        }
-	                    }
+							$no_invited_email_owner = false;
+						}
+					}
 
-	                    if ($support_user && $support_user['User']['id']==$this->Auth->user('id') &&
+					if ($support_user && $support_user['User']['id'] == $this->Auth->user('id') &&
-	                  		$this->account['Account']['user_id']==$support_user['User']['id'] &&
+					    $this->account['Account']['user_id'] == $support_user['User']['id'] &&
-							$no_invited_email_owner && $this->request->data['AccountsEmail']['permission']=='A') {
+					    $no_invited_email_owner && $this->request->data['AccountsEmail']['permission'] == 'A'
+					) {
-	                        // There are no other invited users or emails to this account, and the (currently logged in) support user
-	                        // is the account's owner - so we'll set this new email invitee as the new account's owner,
-	                        // after he/she'll register
-	                        $this->request->data['AccountsEmail']['permission'] = 'O'; // Owner
-	                    }
+						// There are no other invited users or emails to this account, and the (currently logged in) support user
+						// is the account's owner - so we'll set this new email invitee as the new account's owner,
+						// after he/she'll register
+						$this->request->data['AccountsEmail']['permission'] = 'O'; // Owner
+					}
 
-	                    // We need to insert a record in the accounts-emails table, because the currently submitted email address doesn't belong to any existing user
-	                    // As soon as the currently submitted email address would be used by a new registering user, we'll move this record into the accounts-users table
-	                    $hash = md5(uniqid() . time());
+					// We need to insert a record in the accounts-emails table, because the currently submitted email address doesn't belong to any existing user
+					// As soon as the currently submitted email address would be used by a new registering user, we'll move this record into the accounts-users table
+					$hash = md5(uniqid() . time());
 
-	                    $this->request->data['AccountsEmail']['sent_date'] = date('Y-m-d H:i:s');
+					$this->request->data['AccountsEmail']['sent_date']   = date('Y-m-d H:i:s');
-	                    $this->request->data['AccountsEmail']['unique_hash'] = $hash;
+					$this->request->data['AccountsEmail']['unique_hash'] = $hash;
 
-	                    $this->Account->AccountsEmail->create();
-	                    if ($this->Account->AccountsEmail->save($this->request->data)) {
-	                        // Let's send a confirmation email to this email address
+					$this->Account->AccountsEmail->create();
+					if ($this->Account->AccountsEmail->save($this->request->data)) {
+						// Let's send a confirmation email to this email address
 
-	                        $this->sendEmail(array(
+						$this->sendEmail(
+							array(
-	                                'vars' => array(
+								'vars'     => array(
-	                                    'permission'    => ($this->request->data['AccountsEmail']['permission'] == 'A' ? 'Admin' : 'Viewer'),
+									'permission' => ($this->request->data['AccountsEmail']['permission'] == 'A'
+										? 'Admin' : 'Viewer'),
-	                                    'account'       => $this->account['Account']['company_name'],
+									'account'    => $this->account['Account']['company_name'],
-	                                    'creator'       => $this->account['User']['first_name'] . ' ' . $this->account['User']['last_name'],
+									'creator'    =>
+										$this->account['User']['first_name'] .
+										' ' .
+										$this->account['User']['last_name'],
-	                                    'link'          => 'https:' . SITE_URL . 'users/invite?e='.$hash
+									'link'       => 'https:' . SITE_URL . 'users/invite?e=' . $hash
-	                                ),
+								),
-	                                'email'     => $this->request->data['AccountsEmail']['email'],
+								'email'    => $this->request->data['AccountsEmail']['email'],
-	              					'name'      => $this->request->data['AccountsEmail']['email'],
+								'name'     => $this->request->data['AccountsEmail']['email'],
-	                                'subject'   => 'Account Invitation',
+								'subject'  => 'Account Invitation',
-	                                'template'  => 'invitation'
+								'template' => 'invitation'
-	                            ));
+							)
+						);
 
-	                        $this->Session->setFlash('You have successfully sent the invitation!', 'flash_success');
+						$this->Session->setFlash('You have successfully sent the invitation!', 'flash_success');
 
-	                    } else {
+					} else {
-	                        $this->Session->setFlash('Unfortunately, the invitation could not be sent. If you continue to receive this error, please visit our <a href="' . FRESHDESK_BASE_URL . '" target="_blank">Support Center</a>.', 'flash_alert');
+						$this->Session->setFlash(
+							'Unfortunately, the invitation could not be sent. If you continue to receive this error, please visit our <a href="' .
+							FRESHDESK_BASE_URL .
+							'" target="_blank">Support Center</a>.',
+							'flash_alert'
+						);
-	                    }
-	                }
-	            }
+					}
+				}
+			}
 
-	            return $this->redirect(array(
+			return $this->redirect(
+				array(
-	                    'action' => 'view',
-	                    $this->account['Account']['id']
+					'action' => 'view',
+					$this->account['Account']['id']
-	                ));
+				)
+			);
-	        }
-	    }
+		}
+	}
 
-
-	 	// DO WE USE THIS ANYMORE??
+	// DO WE USE THIS ANYMORE??
-	    public function manage_permission() {
+	public function manage_permission()
+	{
-	        if ($this->request->is('post') && $this->isAdmin) {
+		if ($this->request->is('post') && $this->isAdmin) {
-	          if (isset($this->request->data['Account']['revoke_access']) && $this->request->data['Account']['revoke_access'] == 1) {
+			if (isset($this->request->data['Account']['revoke_access']) &&
+			    $this->request->data['Account']['revoke_access'] == 1
+			) {
-	          	if ($this->request->data['Account']['invitation_type'] == 'E') { // user hasn't accepted yet
+				if ($this->request->data['Account']['invitation_type'] == 'E') { // user hasn't accepted yet
-	          		$this->Account->AccountsEmail->deleteAll(array('AccountsEmail.id' => $this->request->data['Account']['invitation_id'],'AccountsEmail.account_id' => $this->request->data['Account']['account_id']), false);
+					$this->Account->AccountsEmail->deleteAll(
+						array(
+							'AccountsEmail.id'         => $this->request->data['Account']['invitation_id'],
+							'AccountsEmail.account_id' => $this->request->data['Account']['account_id']
+						),
+						false
+					);
-	 	} else if ($this->request->data['Account']['invitation_type'] == 'U') { // user has accepted
+				} else if ($this->request->data['Account']['invitation_type'] == 'U') { // user has accepted
-	          		$this->Account->AccountsUser->deleteAll(array('AccountsUser.id' => $this->request->data['Account']['invitation_id'],'AccountsUser.account_id' => $this->request->data['Account']['account_id']), false);
+					$this->Account->AccountsUser->deleteAll(
+						array(
+							'AccountsUser.id'         => $this->request->data['Account']['invitation_id'],
+							'AccountsUser.account_id' => $this->request->data['Account']['account_id']
+						),
+						false
+					);
-	          	}
-	          } else { // update access info
-	          	if ($this->request->data['Account']['invitation_type'] == 'E') { // user hasn't accepted yet
-	          		$this->Account->AccountsEmail->id = $this->request->data['Account']['invitation_id'];
+				}
+			} else { // update access info
+				if ($this->request->data['Account']['invitation_type'] == 'E') { // user hasn't accepted yet
+					$this->Account->AccountsEmail->id = $this->request->data['Account']['invitation_id'];
-	              $this->Account->AccountsEmail->saveField('permission', $this->request->data['Account']['permission']);
+					$this->Account->AccountsEmail->saveField(
+						'permission',
+						$this->request->data['Account']['permission']
+					);
-	          	} else if ($this->request->data['Account']['invitation_type'] == 'U') { // user has accepted
-	          		$this->Account->AccountsUser->id = $this->request->data['Account']['invitation_id'];
+				} else if ($this->request->data['Account']['invitation_type'] == 'U') { // user has accepted
+					$this->Account->AccountsUser->id = $this->request->data['Account']['invitation_id'];
-	              	$this->Account->AccountsUser->saveField('permission', $this->request->data['Account']['permission']);
+					$this->Account->AccountsUser->saveField(
+						'permission',
+						$this->request->data['Account']['permission']
+					);
-	          	}
+				}
 
-	          }
-	        }
-	        return $this->redirect(array('action' => 'view', $this->request->data['Account']['account_id']));
-	    }
+			}
+		}
+		return $this->redirect(array('action' => 'view', $this->request->data['Account']['account_id']));
+	}
 
-
-
-	 	// DO WE USE THIS ANYMORE??
+	// DO WE USE THIS ANYMORE??
-	    public function revoke_permission() {
+	public function revoke_permission()
+	{
-	        if ($this->request->is('post') && $this->isAdmin) {
-	            if ($this->request->data['Account']['invitation_type'] == 'U') {
+		if ($this->request->is('post') && $this->isAdmin) {
+			if ($this->request->data['Account']['invitation_type'] == 'U') {
-	                $this->Account->AccountsUser->delete($this->request->data['Account']['invitation_id']); // User invitation
+				$this->Account->AccountsUser->delete(
+					$this->request->data['Account']['invitation_id']
+				); // User invitation
-	            } else if ($this->request->data['Account']['invitation_type'] == 'E') {
+			} else if ($this->request->data['Account']['invitation_type'] == 'E') {
-	                $this->Account->AccountsEmail->delete($this->request->data['Account']['invitation_id']); // Email invitation
+				$this->Account->AccountsEmail->delete(
+					$this->request->data['Account']['invitation_id']
+				); // Email invitation
-	            }
-	        }
-	        return $this->redirect(array('action' => 'view', $this->request->data['Account']['account_id']));
-	    }
+			}
+		}
+		return $this->redirect(array('action' => 'view', $this->request->data['Account']['account_id']));
+	}
 
-	    public function download_reports($id = null) {
+	public function download_reports($id = null)
+	{
-			// We're no longer allowing users to download their own reports.
-			/*
-	        if(!empty($this->request->data)) {
-	            if(isset($this->request->data['reportType']) && $this->request->data['reportType'] != '') {
-	                $result=array();
-	                $reportType = $this->request->data['reportType'];
-	                $reports = $this->ExcelReport->find('all',array(
-	                    'conditions' => array(
-	                      'account_id' => $this->Session->read('User.Account')
-	                    )
-	                ));
-	                foreach($reports as $report) {
-	                    $unserialized = unserialize($report['ExcelReport']['download_links']);
-	                    //print_r($unserialized);
-	                    if(isset($unserialized[$reportType])) {
-	                        $link = explode('/',$unserialized[$reportType]);
-	                        $result[] = array($unserialized[$reportType], $link[4]);
-	                    }
-	                }
-	                //ob_clean();
-	                echo json_encode($result);die;
-	            }
-	        }
-			*/
-		}
-		
+		// We're no longer allowing users to download their own reports.
+		/*
+		if(!empty($this->request->data)) {
+			if(isset($this->request->data['reportType']) && $this->request->data['reportType'] != '') {
+				$result=array();
+				$reportType = $this->request->data['reportType'];
+				$reports = $this->ExcelReport->find('all',array(
+					'conditions' => array(
+					  'account_id' => $this->Session->read('User.Account')
+					)
+				));
+				foreach($reports as $report) {
+					$unserialized = unserialize($report['ExcelReport']['download_links']);
+					//print_r($unserialized);
+					if(isset($unserialized[$reportType])) {
+						$link = explode('/',$unserialized[$reportType]);
+						$result[] = array($unserialized[$reportType], $link[4]);
+					}
+				}
+				//ob_clean();
+				echo json_encode($result);die;
+			}
+		}
+		*/
+	}
+
-		
-	    public function activate_app($id = null) {
+	public function activate_app($id = null)
+	{
-	        $this->Plugin->id = $id;
-	        if (!$this->Plugin->exists()) {
-	            throw new NotFoundException(__('Invalid app'));
-	        }
+		$this->Plugin->id = $id;
+		if (!$this->Plugin->exists()) {
+			throw new NotFoundException(__('Invalid app'));
+		}
-	        $this->Plugin->query('INSERT INTO `accounts_plugins`
+		$this->Plugin->query(
+			'INSERT INTO `accounts_plugins`
 	            SET `account_id` = \'' . $this->Session->read('User.Account') . '\',
-	            `plugin_id` = \'' . $id . '\';');
+	            `plugin_id` = \'' . $id . '\';'
+		);
 
-	        return $this->redirect(array(
+		return $this->redirect(
+			array(
-	                'action' => 'apps',
-	                $this->Session->read('User.Account')
+				'action' => 'apps',
+				$this->Session->read('User.Account')
-	            ));
+			)
+		);
-	    }
+	}
 
-	    public function disconnect_app($id = null) {
+	public function disconnect_app($id = null)
+	{
-	        $this->Plugin->id = $id;
-	        if (!$this->Plugin->exists()) {
-	            throw new NotFoundException(__('Invalid app'));
-	        }
+		$this->Plugin->id = $id;
+		if (!$this->Plugin->exists()) {
+			throw new NotFoundException(__('Invalid app'));
+		}
-	        $this->AccountsPlugins->deleteAll(array(
+		$this->AccountsPlugins->deleteAll(
+			array(
-	                'account_id' => $this->Session->read('User.Account'),
+				'account_id' => $this->Session->read('User.Account'),
-	                'plugin_id' => $id
+				'plugin_id'  => $id
-	            ), false);
-	        return $this->redirect(array(
+			),
+			false
+		);
+		return $this->redirect(
+			array(
-	                'action' => 'apps',
-	                $this->Session->read('User.Account')
+				'action' => 'apps',
+				$this->Session->read('User.Account')
-	            ));
+			)
+		);
-	    }
+	}
 
-
-		/**
-		 * Used for filling the accounts add / edit form's sub-industries list,
-		 * on selecting a specific industry
-		 *
-		 **/
+	/**
+	 * Used for filling the accounts add / edit form's sub-industries list,
+	 * on selecting a specific industry
+	 *
+	 **/
-	    public function get_sub_industries($industry_id = null) {
+	public function get_sub_industries($industry_id = null)
+	{
-	        $this->autoRender = false;
+		$this->autoRender = false;
-	        $this->layout = false;
+		$this->layout     = false;
 
-	        $response = array();
-	        if ($industry_id && is_numeric($industry_id)) {
+		$response = array();
+		if ($industry_id && is_numeric($industry_id)) {
-	            $sub_industries = ClassRegistry::init('Industry')->find('list', array(
+			$sub_industries = ClassRegistry::init('Industry')->find(
+				'list',
+				array(
-	                    'conditions'    => array(
+					'conditions' => array(
-	                        'parent_id' => $industry_id
-	                    ),
+						'parent_id' => $industry_id
+					),
-	                    'order'         => 'name'
+					'order'      => 'name'
-	            	));
+				)
+			);
 
-	            if ($sub_industries) {
-	                foreach ($sub_industries as $id => $name) {
-	                    $response[] = array(
+			if ($sub_industries) {
+				foreach ($sub_industries as $id => $name) {
+					$response[] = array(
-	                        'id'    => $id,
+						'id'   => $id,
-	                        'name'  => $name
+						'name' => $name
-	                    );
-	                }
-	            }
-	        }
+					);
+				}
+			}
+		}
 
-	        echo json_encode($response);
-	    }
+		echo json_encode($response);
+	}
 
-
-	    /**
-	     * Check if a submitted account ID actually belongs to an account,
-	     * and that account belongs to the currently logged in user
-	     *
-	     * If not, we'll redirect to the accounts list
-	     *
-	     **/
+	/**
+	 * Check if a submitted account ID actually belongs to an account,
+	 * and that account belongs to the currently logged in user
+	 *
+	 * If not, we'll redirect to the accounts list
+	 *
+	 **/
-	    private function checkAccount($id) {
+	private function checkAccount($id)
+	{
 
-	    	$account = $this->Account->find('first', array(
+		$account = $this->Account->find(
+			'first',
+			array(
-					'conditions' => array(
-						'user_id' => $this->Auth->user('id')
-					)
+				'conditions' => array(
+					'user_id' => $this->Auth->user('id')
+				)
-				));
+			)
+		);
 
-			if ($account) {
-				// It does, so let's change the currently selected account
-				$this->Session->write('User.Account', $id);
-				$this->current_account = $account;
+		if ($account) {
+			// It does, so let's change the currently selected account
+			$this->Session->write('User.Account', $id);
+			$this->current_account = $account;
 
-				$this->set('account', $account);
+			$this->set('account', $account);
 
-			} else {
-				// Nope, it doesn't
-				return $this->redirect(array('action' => 'index'));
-			}
-    	}
+		} else {
+			// Nope, it doesn't
+			return $this->redirect(array('action' => 'index'));
+		}
+	}
 
- 		public function upgrade() {
+	public function upgrade()
+	{
-			// We don't use this anymore (for now...)
+		// We don't use this anymore (for now...)
-			$this->redirect(array(
+		$this->redirect(
+			array(
-					'action' => 'add', 
-					$this->current_account['Account']['id']
+				'action' => 'add',
+				$this->current_account['Account']['id']
-				));
+			)
+		);
-			die();
-			
+		die();
+
-						
-			// First let's get the list of already selected upgradable chart categories
-			// for the current account
+		// First let's get the list of already selected upgradable chart categories
+		// for the current account
-			$selected_upgradable_charts = array();
+		$selected_upgradable_charts    = array();
-			$active_upgradable_charts = array();
+		$active_upgradable_charts      = array();
-			$active_upgradable_charts_data = array();
+		$active_upgradable_charts_data = array();
 
-			foreach ($this->account['UpgradeableChartCategory'] as $upgradable_chart_category) {
-				if (empty($upgradable_chart_category['AccountsUpgradedCharts']['turn_off_date'])) {
-					$selected_upgradable_charts[$upgradable_chart_category['id']] = $upgradable_chart_category['category'];
-				}
-				// if there's an end date in the past, this chart technically isn't active
+		foreach ($this->account['UpgradeableChartCategory'] as $upgradable_chart_category) {
+			if (empty($upgradable_chart_category['AccountsUpgradedCharts']['turn_off_date'])) {
+				$selected_upgradable_charts[$upgradable_chart_category['id']] = $upgradable_chart_category['category'];
+			}
+			// if there's an end date in the past, this chart technically isn't active
-				if($upgradable_chart_category['AccountsUpgradedCharts']['turn_off_date'] == NULL || strtotime($upgradable_chart_category['AccountsUpgradedCharts']['turn_off_date']) >= strtotime('now')) {
-					$active_upgradable_charts[$upgradable_chart_category['id']] = $upgradable_chart_category['category'];
-					$active_upgradable_charts_data[$upgradable_chart_category['id']]['turn_off_date'] = $upgradable_chart_category['AccountsUpgradedCharts']['turn_off_date'];
-				} else if (strtotime($upgradable_chart_category['AccountsUpgradedCharts']['turn_off_date']) < strtotime('now')) { // delete this old entry in the db that could cause problems?
+			if ($upgradable_chart_category['AccountsUpgradedCharts']['turn_off_date'] == null ||
+			    strtotime($upgradable_chart_category['AccountsUpgradedCharts']['turn_off_date']) >= strtotime('now')
+			) {
+				$active_upgradable_charts[$upgradable_chart_category['id']]                       =
+					$upgradable_chart_category['category'];
+				$active_upgradable_charts_data[$upgradable_chart_category['id']]['turn_off_date'] =
+					$upgradable_chart_category['AccountsUpgradedCharts']['turn_off_date'];
+			} else if (strtotime($upgradable_chart_category['AccountsUpgradedCharts']['turn_off_date']) <
+			           strtotime('now')
+			) { // delete this old entry in the db that could cause problems?
-					$this->AccountsUpgradedChart->delete($upgradable_chart_category['AccountsUpgradedCharts']['id']);
-				}
-			}
+				$this->AccountsUpgradedChart->delete($upgradable_chart_category['AccountsUpgradedCharts']['id']);
+			}
+		}
 
-			$this->set('selected_upgradable_charts', $selected_upgradable_charts);
-			$this->set('active_upgradable_charts', $active_upgradable_charts);
-			$this->set('active_upgradable_charts_data', $active_upgradable_charts_data);
+		$this->set('selected_upgradable_charts', $selected_upgradable_charts);
+		$this->set('active_upgradable_charts', $active_upgradable_charts);
+		$this->set('active_upgradable_charts_data', $active_upgradable_charts_data);
 
-
-			// Now let's get the next scheduled date that the current account will be charged for
-			// its upgradable chart categories (if any)
-			$next_payment_date = $this->get_next_scheduled_upgradable_charts_payment_date();
-			$this->set('next_payment_date', $next_payment_date);
+		// Now let's get the next scheduled date that the current account will be charged for
+		// its upgradable chart categories (if any)
+		$next_payment_date = $this->get_next_scheduled_upgradable_charts_payment_date();
+		$this->set('next_payment_date', $next_payment_date);
 
-
-			// Let's get the current account's upgrades coupon code, if existent
-			if ($this->current_account['Coupon']) {
-				foreach ($this->current_account['Coupon'] as $coupon_) {
+		// Let's get the current account's upgrades coupon code, if existent
+		if ($this->current_account['Coupon']) {
+			foreach ($this->current_account['Coupon'] as $coupon_) {
-					if ((empty($coupon_['start_date']) || strtotime($coupon_['start_date'])<time()) &&
+				if ((empty($coupon_['start_date']) || strtotime($coupon_['start_date']) < time()) &&
-						(empty($coupon_['end_date']) || strtotime($coupon_['end_date'])>time()) &&
+				    (empty($coupon_['end_date']) || strtotime($coupon_['end_date']) > time()) &&
-						$coupon_['AccountsCoupon']['active'] && $coupon_['is_active']) {
+				    $coupon_['AccountsCoupon']['active'] && $coupon_['is_active']
+				) {
-						
-						$current_upgrades_coupon = $coupon_;
-						$this->set('coupon_code', $coupon_);
-						
-						break; // We assume there's only one upgrades coupon code per account
-					}
-				}
-			}
-			
+
+					$current_upgrades_coupon = $coupon_;
+					$this->set('coupon_code', $coupon_);
+
+					break; // We assume there's only one upgrades coupon code per account
+				}
+			}
+		}
+
-			
-	    	if ($this->request->is('post') && is_array($this->request->data['Insights'])/* && is_array($this->request->data['Insights']['upgrade'])*/) {
+		if ($this->request->is('post') &&
+		    is_array($this->request->data['Insights'])/* && is_array($this->request->data['Insights']['upgrade'])*/
+		) {
-	    		// The user submited an updated selection of upgradable chart categories for his/her current account,
-	    		// so let's handle these chart categories price charge, and update the DB accordingly
+			// The user submited an updated selection of upgradable chart categories for his/her current account,
+			// so let's handle these chart categories price charge, and update the DB accordingly
 
-				// First let's check if there's any coupon code submitted,
-				// and if so, if it's valid
-				if (@$this->request->data['Insights']['coupon_code']) {
-					$error_message = '';
+			// First let's check if there's any coupon code submitted,
+			// and if so, if it's valid
+			if (@$this->request->data['Insights']['coupon_code']) {
+				$error_message = '';
-					$coupon = $this->Coupon->find('first', array(
+				$coupon        = $this->Coupon->find(
+					'first',
+					array(
-							'conditions' => array(
-								'coupon_code' => $this->request->data['Insights']['coupon_code']
-							)
+						'conditions' => array(
+							'coupon_code' => $this->request->data['Insights']['coupon_code']
+						)
-						));
+					)
+				);
 
-					if (!$coupon) {
-						$error_message .= 'Invalid coupon code!<br />';
+				if (!$coupon) {
+					$error_message .= 'Invalid coupon code!<br />';
 
-					} else {
+				} else {
-						if (($coupon['Coupon']['start_date'] && strtotime($coupon['Coupon']['start_date'])>time()) || ($coupon['Coupon']['end_date'] && strtotime($coupon['Coupon']['end_date'])<time())) {
+					if (($coupon['Coupon']['start_date'] && strtotime($coupon['Coupon']['start_date']) > time()) ||
+					    ($coupon['Coupon']['end_date'] && strtotime($coupon['Coupon']['end_date']) < time())
+					) {
-							// The current coupon is either not yet available, or has expired
-							$error_message .= 'The submitted coupon code is outside its validity date range!<br />';
+						// The current coupon is either not yet available, or has expired
+						$error_message .= 'The submitted coupon code is outside its validity date range!<br />';
 
-						} else {
-							// @TODO: Why does this reject a coupon instead of overwriting the active one like in other places?
-							// Let's check if the current account doesn't already have a coupon code attached
-							// (in which case we'll discard the somehow currently submitted one)
-							foreach ($this->current_account['Coupon'] as $coupon_) {
-								if ($coupon_['AccountsCoupon']['active'] && $coupon_['is_active']) {
-									$error_message .= 'Your account already has an attached coupon code, which hasn\'t expired yet!<br />';
-									break;
-								}
-							}
-						}
+					} else {
+						// @TODO: Why does this reject a coupon instead of overwriting the active one like in other places?
+						// Let's check if the current account doesn't already have a coupon code attached
+						// (in which case we'll discard the somehow currently submitted one)
+						foreach ($this->current_account['Coupon'] as $coupon_) {
+							if ($coupon_['AccountsCoupon']['active'] && $coupon_['is_active']) {
+								$error_message .= 'Your account already has an attached coupon code, which hasn\'t expired yet!<br />';
+								break;
+							}
+						}
+					}
 
-						if ($error_message == '' && $coupon['Coupon']['usage_number']) {
-							// Finally, let's check if the current coupon has been already used
-							// as many times as its usage_number value
+					if ($error_message == '' && $coupon['Coupon']['usage_number']) {
+						// Finally, let's check if the current coupon has been already used
+						// as many times as its usage_number value
-							$coupons = $this->Account->AccountsCoupon->find('all', array(
+						$coupons = $this->Account->AccountsCoupon->find(
+							'all',
+							array(
-									'conditions' => array(
-										'coupon_id' => $coupon['Coupon']['id']
-									)
+								'conditions' => array(
+									'coupon_id' => $coupon['Coupon']['id']
+								)
-								));
+							)
+						);
 
-							if (count($coupons)>=$coupon['Coupon']['usage_number']) {
+						if (count($coupons) >= $coupon['Coupon']['usage_number']) {
-								$error_message .= 'The submitted coupon code has been used the maximum number of times it allows!<br />';
-							}
-						}
-					}
-				}
+							$error_message .= 'The submitted coupon code has been used the maximum number of times it allows!<br />';
+						}
+					}
+				}
+			}
 
-
-				if (empty($error_message)) {
-					if (@$coupon) {
-						// Attach the submitted coupon to the current account
-						$this->Account->AccountsCoupon->create();
+			if (empty($error_message)) {
+				if (@$coupon) {
+					// Attach the submitted coupon to the current account
+					$this->Account->AccountsCoupon->create();
-						$this->Account->AccountsCoupon->save(array(
+					$this->Account->AccountsCoupon->save(
+						array(
-								'account_id'	=> $this->current_account['Account']['id'],
+							'account_id' => $this->current_account['Account']['id'],
-								'coupon_id'		=> $coupon['Coupon']['id'],
+							'coupon_id'  => $coupon['Coupon']['id'],
-								'date_used'		=> date('Y-m-d H:s:i')
+							'date_used'  => date('Y-m-d H:s:i')
-							));
+						)
+					);
-					}
+				}
 
-		    		$total_selected_upgradable_charts_price = 0;
+				$total_selected_upgradable_charts_price = 0;
-		    		$newly_selected_chart_categories = array();
+				$newly_selected_chart_categories        = array();
-		    		if (!empty($this->request->data['Insights']['upgrade']) && is_array($this->request->data['Insights']['upgrade'])) {
+				if (!empty($this->request->data['Insights']['upgrade']) &&
+				    is_array($this->request->data['Insights']['upgrade'])
+				) {
-						foreach ($this->request->data['Insights']['upgrade'] as $upgradable_chart) {
-							//$upgradable_chart = explode('|', $upgradable_chart);
-	
-							if ($upgradable_chart && is_numeric($upgradable_chart)) {
+					foreach ($this->request->data['Insights']['upgrade'] as $upgradable_chart) {
+						//$upgradable_chart = explode('|', $upgradable_chart);
+
+						if ($upgradable_chart && is_numeric($upgradable_chart)) {
-								$upgradable_chart = $this->UpgradeableChartCategory->find('first', array(
+							$upgradable_chart = $this->UpgradeableChartCategory->find(
+								'first',
+								array(
-						                'conditions' => array(
-											'UpgradeableChartCategory.id' => $upgradable_chart
-										)
+									'conditions' => array(
+										'UpgradeableChartCategory.id' => $upgradable_chart
+									)
-						            ));
+								)
+							);
-	
+
-								if ($upgradable_chart && !in_array($upgradable_chart['UpgradeableChartCategory']['category'], $active_upgradable_charts)) {
+							if ($upgradable_chart &&
+							    !in_array(
+								    $upgradable_chart['UpgradeableChartCategory']['category'],
+								    $active_upgradable_charts
+							    )
+							) {
-									// This is a newly selected upgradable chart category, so we'll charge money for it
-									$discount = 0;
-									
+								// This is a newly selected upgradable chart category, so we'll charge money for it
+								$discount = 0;
+
-									if (@$coupon && (float)$coupon['Coupon']['amount']>0) {
+								if (@$coupon && (float)$coupon['Coupon']['amount'] > 0) {
-										// There is a coupon matching the currently submitted new upgrade selection,
-										// so let's reduce its value accordingly
+									// There is a coupon matching the currently submitted new upgrade selection,
+									// so let's reduce its value accordingly
-										$discount = ($coupon['Coupon']['amount_type']=='1' ?
-											$coupon['Coupon']['amount'] :
-											round(($coupon['Coupon']['amount'] / 100) * $upgradable_chart['UpgradeableChartCategory']['price'], 2));
+									$discount = ($coupon['Coupon']['amount_type'] == '1'
+										?
+										$coupon['Coupon']['amount']
+										:
+										round(
+											($coupon['Coupon']['amount'] / 100) *
+											$upgradable_chart['UpgradeableChartCategory']['price'],
+											2
+										));
-									}
-	
+								}
+
-									$total_selected_upgradable_charts_price += ($upgradable_chart['UpgradeableChartCategory']['price'] - $discount);
-									$newly_selected_chart_categories[] = $upgradable_chart['UpgradeableChartCategory']['category'];
+								$total_selected_upgradable_charts_price += ($upgradable_chart['UpgradeableChartCategory']['price'] -
+								                                            $discount);
+								$newly_selected_chart_categories[] =
+									$upgradable_chart['UpgradeableChartCategory']['category'];
-								}
-							}
-			    		}
-	    			}
+							}
+						}
+					}
+				}
-		    		if ($total_selected_upgradable_charts_price>0) {
+				if ($total_selected_upgradable_charts_price > 0) {
-		    			// The current selection contains new upgradable chart categories compared to the previous one, saved in the DB
-		    			// for the current account, so let's attempt to charge its CC
-		    			$amount = $total_selected_upgradable_charts_price;
+					// The current selection contains new upgradable chart categories compared to the previous one, saved in the DB
+					// for the current account, so let's attempt to charge its CC
+					$amount = $total_selected_upgradable_charts_price;
 
-						$defaultPaymentProfile = $this->AuthorizeNet->getDefaultPaymentProfile($this->account);
+					$defaultPaymentProfile = $this->AuthorizeNet->getDefaultPaymentProfile($this->account);
-						$payment_response = $this->AuthorizeNet->chargeCard($this->account['Account']['profile_id'], $defaultPaymentProfile['payment_profile_id'], array(
+					$payment_response      = $this->AuthorizeNet->chargeCard(
+						$this->account['Account']['profile_id'],
+						$defaultPaymentProfile['payment_profile_id'],
-		                        array(
+						array(
+							array(
-		                            'id'            => time(),
+								'id'          => time(),
-		                            'name'          => $this->account['Subscription']['name'],
+								'name'        => $this->account['Subscription']['name'],
-		                            'description'   => 'New Upgradable Insights Categor' . (count($newly_selected_chart_categories)==1 ? 'y' : 'ies') . ' Selection',
+								'description' =>
+									'New Upgradable Insights Categor' .
+									(count($newly_selected_chart_categories) == 1 ? 'y' : 'ies') .
+									' Selection',
-		                            'price'         => $amount
+								'price'       => $amount
-		                        )
+							)
-		                    ));
+						)
+					);
-		                //$payment_response['transactionID'] = time(); // For development purposes
+					//$payment_response['transactionID'] = time(); // For development purposes
 
-						if (empty($payment_response['error'])) { // The card seemed to had been charged, so let's insert the new payment record
-		                    $this->Account->Payment->create();
+					if (empty($payment_response['error'])) { // The card seemed to had been charged, so let's insert the new payment record
+						$this->Account->Payment->create();
-		                    $this->Account->Payment->save(array(
+						$this->Account->Payment->save(
+							array(
-		                            'account_id'        => $this->account['Account']['id'],
+								'account_id'      => $this->account['Account']['id'],
-		                            'payment_type_id' 	=> 4,
+								'payment_type_id' => 4,
-		                            'description'       => 'New Upgradable Insights Categor' . (count($newly_selected_chart_categories)==1 ? 'y' : 'ies') . ' Selection',
+								'description'     =>
+									'New Upgradable Insights Categor' .
+									(count($newly_selected_chart_categories) == 1 ? 'y' : 'ies') .
+									' Selection',
-		                            'value'             => -$amount,
+								'value'           => -$amount,
-		                            'transaction_id'    => $payment_response['transactionID'],
+								'transaction_id'  => $payment_response['transactionID'],
-		                            'added_date'        => date('Y-m-d H:i:s')
+								'added_date'      => date('Y-m-d H:i:s')
-		                        ));
+							)
+						);
 
-							$this->UserAccount->sendEmail(array(
+						$this->UserAccount->sendEmail(
+							array(
-									'email_vars'	=> array( // Except for the user's and account's names, which are determined and se(n)t automatically
+								'email_vars' => array( // Except for the user's and account's names, which are determined and se(n)t automatically
-										'account'  		=> $this->current_account['Account']['company_name'],
+								                       'account'    => $this->current_account['Account']['company_name'],
-										'account_id'	=> $this->current_account['Account']['id'],
+								                       'account_id' => $this->current_account['Account']['id'],
-										'value'     	=> $amount,
+								                       'value'      => $amount,
-		                                'service'   	=> 'Upgradable '.implode(",", $newly_selected_chart_categories).' Insights categor' . (count($newly_selected_chart_categories)==1 ? 'y' : 'ies') . ' selection: ' . implode(', ', $newly_selected_chart_categories)
+								                       'service'    =>
+									                       'Upgradable ' .
+									                       implode(",", $newly_selected_chart_categories) .
+									                       ' Insights categor' .
+									                       (count($newly_selected_chart_categories) == 1 ? 'y'
+										                       : 'ies') .
+									                       ' selection: ' .
+									                       implode(', ', $newly_selected_chart_categories)
-									),
+								),
-									'permission'	=> 'credit_card_transaction',
+								'permission' => 'credit_card_transaction',
-									'bcc'     		=> ACCOUNT_MANAGERS,
+								'bcc'        => ACCOUNT_MANAGERS,
-									'template'		=> 'payment-receipt',
+								'template'   => 'payment-receipt',
-									'subject'		=> 'Upgradable '.implode(",", $newly_selected_chart_categories).' Insights Categor' . (count($newly_selected_chart_categories)==1 ? 'y' : 'ies')
-								));
+								'subject'    =>
+									'Upgradable ' .
+									implode(",", $newly_selected_chart_categories) .
+									' Insights Categor' .
+									(count($newly_selected_chart_categories) == 1 ? 'y' : 'ies')
+							)
+						);
 
-		                } else {
-		                    // There's been an error, let's display a warning message
+					} else {
+						// There's been an error, let's display a warning message
-		                    $this->Session->setFlash('There\'s been an error charging your default stored CC. If you continue to receive this error, please visit our <a href="' . FRESHDESK_BASE_URL . '" target="_blank">Support Center</a>.', 'flash_alert');
+						$this->Session->setFlash(
+							'There\'s been an error charging your default stored CC. If you continue to receive this error, please visit our <a href="' .
+							FRESHDESK_BASE_URL .
+							'" target="_blank">Support Center</a>.',
+							'flash_alert'
+						);
-		                    return $this->redirect(array('action' => 'upgrade'));
-		                }
-		    		}
+						return $this->redirect(array('action' => 'upgrade'));
+					}
+				}
 
-
-		    		if ($total_selected_upgradable_charts_price==0 || @$payment_response) {
+				if ($total_selected_upgradable_charts_price == 0 || @$payment_response) {
-		    			// NOW we can store the new selection in the DB
-		    			// (or schedule any existing, but deselected records, for removal at the end of the current month)
-						
+					// NOW we can store the new selection in the DB
+					// (or schedule any existing, but deselected records, for removal at the end of the current month)
+
-						if (!empty($this->request->data['Insights']['upgrade']) && is_array($this->request->data['Insights']['upgrade'])) {
+					if (!empty($this->request->data['Insights']['upgrade']) &&
+					    is_array($this->request->data['Insights']['upgrade'])
+					) {
-							foreach ($this->request->data['Insights']['upgrade'] as $upgradable_chart) {
-								//$upgradable_chart = explode('|', $upgradable_chart);
-	
-								if ($upgradable_chart && is_numeric($upgradable_chart)) {
+						foreach ($this->request->data['Insights']['upgrade'] as $upgradable_chart) {
+							//$upgradable_chart = explode('|', $upgradable_chart);
+
+							if ($upgradable_chart && is_numeric($upgradable_chart)) {
-									$upgradable_chart = $this->UpgradeableChartCategory->find('first', array(
+								$upgradable_chart = $this->UpgradeableChartCategory->find(
+									'first',
+									array(
-							                'conditions' => array(
-												'UpgradeableChartCategory.id' => $upgradable_chart
-											)
+										'conditions' => array(
+											'UpgradeableChartCategory.id' => $upgradable_chart
+										)
-							            ));
+									)
+								);
-	
-									if ($upgradable_chart) {
+
+								if ($upgradable_chart) {
-										$payment = $this->Account->Payment->find('first', array(
+									$payment = $this->Account->Payment->find(
+										'first',
+										array(
-						                        'conditions'    => array(
+											'conditions' => array(
-						                            'Payment.account_id'        => $this->current_account['Account']['id'],
+												'Payment.account_id'      => $this->current_account['Account']['id'],
-						                            'Payment.payment_type_id'	=> 2
+												'Payment.payment_type_id' => 2
-						                        ),
+											),
-						                        'order'         => array(
+											'order'      => array(
-						                            'Payment.added_date DESC'
-						                        )
+												'Payment.added_date DESC'
+											)
-						                    ));
+										)
+									);
-										// Let's check if the currently selected chart category already exists in the account's
-										// list of selected upgradable chart categories
-										// If it does, we'll do nothing (but remove it from the $active_upgradable_charts list)
-										// If it doesn't, we'll insert it
+									// Let's check if the currently selected chart category already exists in the account's
+									// list of selected upgradable chart categories
+									// If it does, we'll do nothing (but remove it from the $active_upgradable_charts list)
+									// If it doesn't, we'll insert it
-										if (key_exists($upgradable_chart['UpgradeableChartCategory']['id'], $active_upgradable_charts) &&
-											key_exists($upgradable_chart['UpgradeableChartCategory']['id'], $selected_upgradable_charts)) {
+									if (key_exists(
+										    $upgradable_chart['UpgradeableChartCategory']['id'],
+										    $active_upgradable_charts
+									    ) &&
+									    key_exists(
+										    $upgradable_chart['UpgradeableChartCategory']['id'],
+										    $selected_upgradable_charts
+									    )
+									) {
-											unset($active_upgradable_charts[$upgradable_chart['UpgradeableChartCategory']['id']]);
-	
-										} else {
+										unset($active_upgradable_charts[$upgradable_chart['UpgradeableChartCategory']['id']]);
+
+									} else {
-											if (key_exists($upgradable_chart['UpgradeableChartCategory']['id'], $active_upgradable_charts)) {
+										if (key_exists(
+											$upgradable_chart['UpgradeableChartCategory']['id'],
+											$active_upgradable_charts
+										)) {
-												// This must be an existing, though turned off chart category,
-												// so let's just turn it on again
-									            if (empty($payment)) {
-									            	$off_date = array(
+											// This must be an existing, though turned off chart category,
+											// so let's just turn it on again
+											if (empty($payment)) {
+												$off_date = array(
-										                'turn_off_date'		=> '"' . date('Y-m-d H:i:s',strtotime('+ 1 month')) . '"'
+													'turn_off_date' =>
+														'"' .
+														date('Y-m-d H:i:s', strtotime('+ 1 month')) .
+														'"'
-										            );
-									            } else {
-									            	$off_date = array(
+												);
+											} else {
+												$off_date = array(
-										                'turn_off_date'		=> null
+													'turn_off_date' => null
-										            );
-									            }
-	
+												);
+											}
+
-							     				$this->AccountsUpgradedChart->updateAll($off_date, array(
+											$this->AccountsUpgradedChart->updateAll(
+												$off_date,
+												array(
-										            	'account_id'		=> $this->Session->read('User.Account'),
+													'account_id'        => $this->Session->read('User.Account'),
-														'chart_category_id'	=> $upgradable_chart['UpgradeableChartCategory']['id']
+													'chart_category_id' => $upgradable_chart['UpgradeableChartCategory']['id']
-													));
+												)
+											);
-	
-												// We don't need it listed in the $active_upgradable_charts array anymore,
-												// since we don't want it to get its just-updated turn_off_date value re-set
-												unset($active_upgradable_charts[$upgradable_chart['UpgradeableChartCategory']['id']]);
-	
-											} else {
-												// Insert the newly selected upgradable chart
-												$discount = 0;
-												
+
+											// We don't need it listed in the $active_upgradable_charts array anymore,
+											// since we don't want it to get its just-updated turn_off_date value re-set
+											unset($active_upgradable_charts[$upgradable_chart['UpgradeableChartCategory']['id']]);
+
+										} else {
+											// Insert the newly selected upgradable chart
+											$discount = 0;
+
-												if (@$coupon && (float)$coupon['Coupon']['amount']>0) {
+											if (@$coupon && (float)$coupon['Coupon']['amount'] > 0) {
-													// There is a coupon matching the currently submitted new upgrade selection,
-													// so let's reduce its value accordingly
+												// There is a coupon matching the currently submitted new upgrade selection,
+												// so let's reduce its value accordingly
-													$discount = ($coupon['Coupon']['amount_type']=='1' ?
-														$coupon['Coupon']['amount'] :
-														round(($coupon['Coupon']['amount'] / 100) * $upgradable_chart['UpgradeableChartCategory']['price'], 2));
+												$discount = ($coupon['Coupon']['amount_type'] == '1'
+													?
+													$coupon['Coupon']['amount']
+													:
+													round(
+														($coupon['Coupon']['amount'] / 100) *
+														$upgradable_chart['UpgradeableChartCategory']['price'],
+														2
+													));
-												}
-												
-												$data = array(
+											}
+
+											$data = array(
-									                'account_id' 			=> $this->Session->read('User.Account'),
+												'account_id'           => $this->Session->read('User.Account'),
-									                'chart_category_id'		=> $upgradable_chart['UpgradeableChartCategory']['id'],
+												'chart_category_id'    => $upgradable_chart['UpgradeableChartCategory']['id'],
-									                'chart_category_price'	=> ($upgradable_chart['UpgradeableChartCategory']['price'] - $discount),
+												'chart_category_price' => ($upgradable_chart['UpgradeableChartCategory']['price'] -
+												                           $discount),
-									                'turn_on_date'			=> date('Y-m-d H:i:s')
+												'turn_on_date'         => date('Y-m-d H:i:s')
-									            );
-	
-									            // if an account has a zero balance, and they haven't paid before we can't know for sure when their subscription will run
-									            // so we have to automatically set an end date if there isn't a prior payment.
-									            if (empty($payment)) {
+											);
+
+											// if an account has a zero balance, and they haven't paid before we can't know for sure when their subscription will run
+											// so we have to automatically set an end date if there isn't a prior payment.
+											if (empty($payment)) {
-									            	$data['turn_off_date'] = date('Y-m-d H:i:s',strtotime('+ 1 month'));
+												$data['turn_off_date'] = date('Y-m-d H:i:s', strtotime('+ 1 month'));
-									            }
-	
-												$this->AccountsUpgradedChart->create();
-							     				$this->AccountsUpgradedChart->save($data);
-				     						}
-				    					}
-									}
-								}
-							}
-						}
+											}
+
+											$this->AccountsUpgradedChart->create();
+											$this->AccountsUpgradedChart->save($data);
+										}
+									}
+								}
+							}
+						}
+					}
 
-						if (!empty($active_upgradable_charts)) {
-							// There are still upgradable chart categories assigned to the current account,
-							// that haven't been selected anymore, so we'll mark them for being disabled
-							// within the current month
+					if (!empty($active_upgradable_charts)) {
+						// There are still upgradable chart categories assigned to the current account,
+						// that haven't been selected anymore, so we'll mark them for being disabled
+						// within the current month
 
-							if (!$next_payment_date) {
-								// There is definitely a new scheduled payment date for these
-								// upgradable chart categories now!
-								$next_payment_date = $this->get_next_scheduled_upgradable_charts_payment_date();
-							}
-							//echo $next_payment_date;
+						if (!$next_payment_date) {
+							// There is definitely a new scheduled payment date for these
+							// upgradable chart categories now!
+							$next_payment_date = $this->get_next_scheduled_upgradable_charts_payment_date();
+						}
+						//echo $next_payment_date;
-							if ($next_payment_date != 'none') { // we're on a no-subscription account that won't ever have renewal capability
+						if ($next_payment_date !=
+						    'none'
+						) { // we're on a no-subscription account that won't ever have renewal capability
-								foreach ($active_upgradable_charts as $id => $selected_upgradable_chart) {
+							foreach ($active_upgradable_charts as $id => $selected_upgradable_chart) {
-				     				$this->AccountsUpgradedChart->updateAll(array(
+								$this->AccountsUpgradedChart->updateAll(
+									array(
-							                'turn_off_date'		=> '\'' . $next_payment_date . '\''
+										'turn_off_date' => '\'' . $next_payment_date . '\''
-							            ), array(
+									),
+									array(
-							            	'account_id'		=> $this->Session->read('User.Account'),
+										'account_id'        => $this->Session->read('User.Account'),
-											'chart_category_id'	=> $id
+										'chart_category_id' => $id
-										));
+									)
+								);
-			    				}
-							}
-						}
+							}
+						}
+					}
 
+					$this->Session->setFlash(
+						'Your Insights categories selection has been successfully updated' .
+						(@$payment_response ? ', and your account\'s credit card has been charged for their value'
+							: '') .
+						'.',
+						'flash_success'
+					);
 
-						$this->Session->setFlash('Your Insights categories selection has been successfully updated' .
-							(@$payment_response ? ', and your account\'s credit card has been charged for their value' : '') .
-							'.', 'flash_success');
-
-						if ($this->request->data['Insights']['referrer']) {
-							header('Location: ' . $this->request->data['Insights']['referrer']);
-							die();
+					if ($this->request->data['Insights']['referrer']) {
+						header('Location: ' . $this->request->data['Insights']['referrer']);
+						die();
 
-						} else {
-							return $this->redirect(array('action' => 'upgrade'));
-						}
-					}
+					} else {
+						return $this->redirect(array('action' => 'upgrade'));
+					}
+				}
 
-				} else {
-		            $this->Session->setFlash($error_message, 'flash_alert');
-				}
-			}
+			} else {
+				$this->Session->setFlash($error_message, 'flash_alert');
+			}
+		}
 
-
-	    	// Now let's generate the list of chart categories / pages that contain upgradable charts,
-			// and their list of such upgradable charts
-			$audience_taxonomies = Cache::read('Us.IbTaxonomies', 'insights');
+		// Now let's generate the list of chart categories / pages that contain upgradable charts,
+		// and their list of such upgradable charts
+		$audience_taxonomies = Cache::read('Us.IbTaxonomies', 'insights');
 
-			$page_names = array();
-			foreach ($audience_taxonomies as $page_name => $pages) {
-				foreach ($pages as $chart_name => $chart) {
-					if (in_array($chart['package'], array('upgrade', 'upgraded')) && !isset($page_names[$page_name])) {
-						$page_names[$page_name] = array();
-					}
+		$page_names = array();
+		foreach ($audience_taxonomies as $page_name => $pages) {
+			foreach ($pages as $chart_name => $chart) {
+				if (in_array($chart['package'], array('upgrade', 'upgraded')) && !isset($page_names[$page_name])) {
+					$page_names[$page_name] = array();
+				}
 
-					if (isset($page_names[$page_name]) && in_array($chart['package'], array('upgrade', 'upgraded'))) {
-						$page_names[$page_name][] = $chart_name;
-					}
-				}
-			}
+				if (isset($page_names[$page_name]) && in_array($chart['package'], array('upgrade', 'upgraded'))) {
+					$page_names[$page_name][] = $chart_name;
+				}
+			}
+		}
 
-			// Next, let's get the upgradable chart categories for which we've defined a price in the DB
-			$conditions = array(
-				// THERE'S NO SUBSCRIPTION ID PER UPGRADABLE CHART CATEGORIES!
+		// Next, let's get the upgradable chart categories for which we've defined a price in the DB
+		$conditions = array(
+			// THERE'S NO SUBSCRIPTION ID PER UPGRADABLE CHART CATEGORIES!
-				'subscription_id' => ($this->current_account['Account']['subscription_id'] >=3/* && $this->current_account['Account']['custom_billing'] == 'N'*/ ?
-					$this->current_account['Account']['subscription_id'] :
-					/*($this->current_account['Account']['custom_billing'] == 'Y' ? 9 : */1/*)*/)
+			'subscription_id' => ($this->current_account['Account']['subscription_id'] >= 3
+				/* && $this->current_account['Account']['custom_billing'] == 'N'*/
+				?
+				$this->current_account['Account']['subscription_id']
+				:
+				/*($this->current_account['Account']['custom_billing'] == 'Y' ? 9 : */
+				1/*)*/)
-			);
-			foreach ($page_names as $page_name => $charts) {
-				$conditions['OR'][] = array(
+		);
+		foreach ($page_names as $page_name => $charts) {
+			$conditions['OR'][] = array(
-					'category'	=> $page_name,
+				'category' => $page_name,
-					'charts'	=> json_encode($charts)
+				'charts'   => json_encode($charts)
-				);
-			}
-			if ($conditions) {
+			);
+		}
+		if ($conditions) {
-		        $upgradable_charts = $this->UpgradeableChartCategory->find('all', array(
+			$upgradable_charts = $this->UpgradeableChartCategory->find(
+				'all',
+				array(
-		                'conditions' => $conditions
+					'conditions' => $conditions
-		            ));
+				)
+			);
-			}
+		}
 
-			// Finally, let's re-build the list of pages and charts, based on the DB's output
-			$page_names = array();
-			if ($upgradable_charts) {
-				foreach ($upgradable_charts as $upgradable_chart) {
-					if (!key_exists($upgradable_chart['UpgradeableChartCategory']['category'], $page_names)) {
-						$page_names[$upgradable_chart['UpgradeableChartCategory']['category']] = array(
+		// Finally, let's re-build the list of pages and charts, based on the DB's output
+		$page_names = array();
+		if ($upgradable_charts) {
+			foreach ($upgradable_charts as $upgradable_chart) {
+				if (!key_exists($upgradable_chart['UpgradeableChartCategory']['category'], $page_names)) {
+					$page_names[$upgradable_chart['UpgradeableChartCategory']['category']] = array(
-							'id'		=> $upgradable_chart['UpgradeableChartCategory']['id'],
+						'id'     => $upgradable_chart['UpgradeableChartCategory']['id'],
-							'price' 	=> $upgradable_chart['UpgradeableChartCategory']['price'],
+						'price'  => $upgradable_chart['UpgradeableChartCategory']['price'],
-							'charts'	=> array()
+						'charts' => array()
-						);
-					}
+					);
+				}
 
-					$page_names[$upgradable_chart['UpgradeableChartCategory']['category']]['charts'] = json_decode($upgradable_chart['UpgradeableChartCategory']['charts']);
+				$page_names[$upgradable_chart['UpgradeableChartCategory']['category']]['charts'] =
+					json_decode($upgradable_chart['UpgradeableChartCategory']['charts']);
-				}
-			}
+			}
+		}
 
-			$this->set('page_names', $page_names);
-	    }
+		$this->set('page_names', $page_names);
+	}
 
+	public function upgrade_rtb()
+	{
 
-	   	public function upgrade_rtb() {
-			
-			// All subscription types can be upgraded. But the only thing that can be upgraded to is a regular subscription type
+		// All subscription types can be upgraded. But the only thing that can be upgraded to is a regular subscription type
-	    	$sites = $this->Site->find('all', array(
+		$sites     = $this->Site->find(
+			'all',
+			array(
-	    			'conditions' => array(
-						'Site.account_id' => $this->current_account['Account']['id']
-					)
+				'conditions' => array(
+					'Site.account_id' => $this->current_account['Account']['id']
+				)
-				));
+			)
+		);
-			$pageviews = 0;
+		$pageviews = 0;
-			foreach($sites as $site) {
+		foreach ($sites as $site) {
-				$pageviews += $site['Site']['monthly_pageviews'];
-			}
-			
-			// Let's check if the current account needs an upgrade, based on its sites pageviews count
-			$needs_upgrade = ($pageviews > $this->current_account['Subscription']['web_events_limit']
-								|| $this->current_account['Subscription']['subscription_type'] == 'RTB');
-			
-			if ($needs_upgrade) {
-				// Now let's determine the right subscription type for the current account's pageviews total count
-				$users_current_subscription_version_id = $this->current_account['Subscription']['version_id'];
+			$pageviews += $site['Site']['monthly_pageviews'];
+		}
+
+		// Let's check if the current account needs an upgrade, based on its sites pageviews count
+		$needs_upgrade = ($pageviews > $this->current_account['Subscription']['web_events_limit']
+		                  || $this->current_account['Subscription']['subscription_type'] == 'RTB');
+
+		if ($needs_upgrade) {
+			// Now let's determine the right subscription type for the current account's pageviews total count
+			$users_current_subscription_version_id = $this->current_account['Subscription']['version_id'];
-				$subscriptions = $this->Subscription->find('all', array(
+			$subscriptions                         = $this->Subscription->find(
+				'all',
+				array(
-						'conditions'	=> array(
+					'conditions' => array(
-							'Subscription.subscription_type'	=> 'R',
+						'Subscription.subscription_type' => 'R',
-							'Subscription.version_id'			=> $users_current_subscription_version_id
+						'Subscription.version_id'        => $users_current_subscription_version_id
-						),
+					),
-						'order'			=> array(
+					'order'      => array(
-							'Subscription.web_events_limit'		=> 'ASC',
+						'Subscription.web_events_limit' => 'ASC',
-							'Subscription.audience_size'		=> 'ASC',
+						'Subscription.audience_size'    => 'ASC',
-						),
+					),
-						'recursive'	=> 0
+					'recursive'  => 0
-					));
+				)
+			);
-				
+
-				foreach($subscriptions as $subscription) {
+			foreach ($subscriptions as $subscription) {
-					if ($subscription['Subscription']['web_events_limit'] >= $pageviews) {
-						$upgraded_subscription = $subscription;
-						break;
-					}
-				}
-				if (empty($upgraded_subscription)) {
-					// Default to enterprise.
-					$upgraded_subscription = end($subscriptions);
-				}
-				
-				$this->set('subscription', $upgraded_subscription['Subscription']);
-				
-				// Now let's get the price difference the user has to pay for his/her new subscription level
-				$upgradeCost = $upgraded_subscription['Subscription']['monthly_price'];
-				$currentCost = $this->current_account['Subscription']['monthly_price'];
+				if ($subscription['Subscription']['web_events_limit'] >= $pageviews) {
+					$upgraded_subscription = $subscription;
+					break;
+				}
+			}
+			if (empty($upgraded_subscription)) {
+				// Default to enterprise.
+				$upgraded_subscription = end($subscriptions);
+			}
+
+			$this->set('subscription', $upgraded_subscription['Subscription']);
+
+			// Now let's get the price difference the user has to pay for his/her new subscription level
+			$upgradeCost = $upgraded_subscription['Subscription']['monthly_price'];
+			$currentCost = $this->current_account['Subscription']['monthly_price'];
 
-				$coupon = false;
-				foreach ($this->current_account['Coupon'] as $current) {
-					// Check for active coupon
-					$currentTime = time();
-					if ($current['is_active'] && $current['AccountsCoupon']['active'] &&
-					    (empty($current['start_date']) || strtotime($current['start_date']) <= $currentTime) &&
-					    (empty($current['end_date']) || strtotime($current['end_date']) > $currentTime)
-					) {
-						$coupon = $current;
-						break;
-					}
-				}
+			$coupon = false;
+			foreach ($this->current_account['Coupon'] as $current) {
+				// Check for active coupon
+				$currentTime = time();
+				if ($current['is_active'] && $current['AccountsCoupon']['active'] &&
+				    (empty($current['start_date']) || strtotime($current['start_date']) <= $currentTime) &&
+				    (empty($current['end_date']) || strtotime($current['end_date']) > $currentTime)
+				) {
+					$coupon = $current;
+					break;
+				}
+			}
 
-				if ($coupon) {
-					// Apply coupon
-					if ($coupon['amount_type'] == Coupon::TYPE_DOLLARS) {
-						// Flat dollar amount
-						$upgradeCost = max(0.0, $upgradeCost - $coupon['amount']);
-						$currentCost = max(0.0, $currentCost - $coupon['amount']);
-					} elseif ($coupon['amount_type'] == Coupon::TYPE_PERCENT) {
-						// Percentage off
-						$upgradeCost = max(0.0, $upgradeCost * ((100 - $coupon['amount']) / 100));
-						$currentCost = max(0.0, $currentCost * ((100 - $coupon['amount']) / 100));
-					}
-				}
-				$price_difference = $upgradeCost - $currentCost;
-				
+			if ($coupon) {
+				// Apply coupon
+				if ($coupon['amount_type'] == Coupon::TYPE_DOLLARS) {
+					// Flat dollar amount
+					$upgradeCost = max(0.0, $upgradeCost - $coupon['amount']);
+					$currentCost = max(0.0, $currentCost - $coupon['amount']);
+				} elseif ($coupon['amount_type'] == Coupon::TYPE_PERCENT) {
+					// Percentage off
+					$upgradeCost = max(0.0, $upgradeCost * ((100 - $coupon['amount']) / 100));
+					$currentCost = max(0.0, $currentCost * ((100 - $coupon['amount']) / 100));
+				}
+			}
+			$price_difference = $upgradeCost - $currentCost;
+
-				$last_payment = $this->Account->Payment->find('first', array(
+			$last_payment = $this->Account->Payment->find(
+				'first',
+				array(
-						'conditions'	=> array(
+					'conditions' => array(
-							'Payment.account_id'		=> $this->current_account['Account']['id'],
+						'Payment.account_id'      => $this->current_account['Account']['id'],
-							'Payment.added_date >='		=> date('Y-m-d', strtotime('-1 month')),
+						'Payment.added_date >='   => date('Y-m-d', strtotime('-1 month')),
-							'Payment.payment_type_id'	=> 2
+						'Payment.payment_type_id' => 2
-						),
+					),
-						'order'			=> array(
+					'order'      => array(
-							'Payment.added_date DESC'
-						)
+						'Payment.added_date DESC'
+					)
-					));
+				)
+			);
-				
-				if ($last_payment) {
+
+			if ($last_payment) {
-					$days_difference = floor((strtotime('now') - strtotime($last_payment['Payment']['added_date'])) / 60 / 60 / 24);
+				$days_difference =
+					floor((strtotime('now') - strtotime($last_payment['Payment']['added_date'])) / 60 / 60 / 24);
-					if ($days_difference > 0) { // if it's not the same day, calculate the day factor
-						$price_difference = round(($price_difference * (30.5 - $days_difference)) / 30.5, 2);
-					}
-				}
-				$price_difference = max(0.0, $price_difference);
-				$this->set('price_difference', $price_difference);
-			}
-			
+				if ($days_difference > 0) { // if it's not the same day, calculate the day factor
+					$price_difference = round(($price_difference * (30.5 - $days_difference)) / 30.5, 2);
+				}
+			}
+			$price_difference = max(0.0, $price_difference);
+			$this->set('price_difference', $price_difference);
+		}
+
-			
-			if ($this->request->is('post')) { // selecting an upgrade
-				$error = "";
-				
-				// Upgrade approved or cancelled?
-				if (isset($this->request->data['cancel'])) {
-					// Cancelled upgrade, so remove the site and tags that were marked inactive.
+		if ($this->request->is('post')) { // selecting an upgrade
+			$error = "";
+
+			// Upgrade approved or cancelled?
+			if (isset($this->request->data['cancel'])) {
+				// Cancelled upgrade, so remove the site and tags that were marked inactive.
-					foreach($sites as $site) {
+				foreach ($sites as $site) {
-						if ($site['Site']['visible'] == 'N') {
-							// delete site and queue entry
-							$this->Site->delete($site['Site']['id']);
-							$this->TagQueue->delete($site['TagQueue']['id']);
-						}
-					}
-					if ($this->current_account['Subscription']['subscription_type'] != 'RTB') {
+					if ($site['Site']['visible'] == 'N') {
+						// delete site and queue entry
+						$this->Site->delete($site['Site']['id']);
+						$this->TagQueue->delete($site['TagQueue']['id']);
+					}
+				}
+				if ($this->current_account['Subscription']['subscription_type'] != 'RTB') {
-						$this->Session->setFlash('Your site has not been added because you did not agree to the account upgrade.', 'flash_alert');
+					$this->Session->setFlash(
+						'Your site has not been added because you did not agree to the account upgrade.',
+						'flash_alert'
+					);
-					}
-					
-				} else if (isset($this->request->data['approve'])) {
-					// Approved upgrade, so charge their CC & update any sites set to inactive.
-					
-					if ($this->current_account['ExternalProvider']) {
+				}
+
+			} else if (isset($this->request->data['approve'])) {
+				// Approved upgrade, so charge their CC & update any sites set to inactive.
+
+				if ($this->current_account['ExternalProvider']) {
-						foreach($this->current_account['ExternalProvider'] as $provider) {
+					foreach ($this->current_account['ExternalProvider'] as $provider) {
-							if ($provider['id'] == 2) {
+						if ($provider['id'] == 2) {
-								$IBehaviorCredentials = json_decode($provider['AccountsExternalProviders']['connection_data']);
+							$IBehaviorCredentials =
+								json_decode($provider['AccountsExternalProviders']['connection_data']);
-							}
-							if ($provider['id'] == 4) {
+						}
+						if ($provider['id'] == 4) {
-								$this->TDCredentials = json_decode($provider['AccountsExternalProviders']['connection_data']);
+							$this->TDCredentials =
+								json_decode($provider['AccountsExternalProviders']['connection_data']);
-							}
-						}
-					}
-					
-					if (!empty($IBehaviorCredentials) && !empty($this->TDCredentials)) {
+						}
+					}
+				}
+
+				if (!empty($IBehaviorCredentials) && !empty($this->TDCredentials)) {
-						$updatedSiteIDs = array(); // Will store all updated site IDs, in case we need to roll back their update (if an error happens)
+					$updatedSiteIDs =
+						array(); // Will store all updated site IDs, in case we need to roll back their update (if an error happens)
-					
+
-						foreach($sites as $site) {
+					foreach ($sites as $site) {
-							if ($site['Site']['visible'] == 'N') {
-								// Update the site's visibility and TTD / IB tag IDs
-								$site_name = $site['Site']['name'];
+						if ($site['Site']['visible'] == 'N') {
+							// Update the site's visibility and TTD / IB tag IDs
+							$site_name = $site['Site']['name'];
-								$tags = $this->AccountComponent->createSiteTags($this->current_account, $site_name, $IBehaviorCredentials);
+							$tags      =
+								$this->AccountComponent->createSiteTags(
+									$this->current_account,
+									$site_name,
+									$IBehaviorCredentials
+								);
-								
-								$trade_desk_tag = $tags['trade_desk_tag'];
+
+							$trade_desk_tag = $tags['trade_desk_tag'];
-								$cdid_response = $tags['cdid_response'];
+							$cdid_response  = $tags['cdid_response'];
-								
-								if ($trade_desk_tag['success'] == true && $cdid_response['success'] == true) {
+
+							if ($trade_desk_tag['success'] == true && $cdid_response['success'] == true) {
-									$html_code = (!empty($trade_desk_tag['data']['TrackingTagId']) ? '<iframe width="0" height="0" name="Choozle Insights - ' . $site_name . '" frameborder="0" scrolling="no" src="' . TAG_DOMAIN . 'tags/' . $this->TDCredentials->advertiser_id . '/' . $trade_desk_tag['data']['TrackingTagId'] . '/iframe"></iframe>' : '');
-									$img_code = (!empty($trade_desk_tag['data']['TrackingTagId']) ? '<img alt="" height="1" width="1" style="border-style:none" src="' . TAG_DOMAIN . 'track/imp/?adv=' . $this->TDCredentials->advertiser_id . '&ct=0:' . $trade_desk_tag['data']['TrackingTagId'] . '&fmt=3"/>' : '');
+								$html_code =
+									(!empty($trade_desk_tag['data']['TrackingTagId']) ?
+										'<iframe width="0" height="0" name="Choozle Insights - ' .
+										$site_name .
+										'" frameborder="0" scrolling="no" src="' .
+										TAG_DOMAIN .
+										'tags/' .
+										$this->TDCredentials->advertiser_id .
+										'/' .
+										$trade_desk_tag['data']['TrackingTagId'] .
+										'/iframe"></iframe>' : '');
+								$img_code  =
+									(!empty($trade_desk_tag['data']['TrackingTagId']) ?
+										'<img alt="" height="1" width="1" style="border-style:none" src="' .
+										TAG_DOMAIN .
+										'track/imp/?adv=' .
+										$this->TDCredentials->advertiser_id .
+										'&ct=0:' .
+										$trade_desk_tag['data']['TrackingTagId'] .
+										'&fmt=3"/>' : '');
-									
+
-									$this->Site->updateAll(array(
-											'td_id'					=> '\'' . (!empty($trade_desk_tag['data']['TrackingTagId']) ? $trade_desk_tag['data']['TrackingTagId'] : '0') . '\'', 
-											'ib_cid'				=> '\'' . (!empty($cdid_response['data']['cid']) ? $cdid_response['data']['cid'] : '0') . '\'', 
-											'ib_cdid'				=> '\'' . (!empty($cdid_response['data']['cdid']) ? $cdid_response['data']['cdid'] : '0') . '\'', 
+								$this->Site->updateAll(
+									array(
+										'td_id'              =>
+											'\'' .
+											(!empty($trade_desk_tag['data']['TrackingTagId'])
+												? $trade_desk_tag['data']['TrackingTagId'] : '0') .
+											'\'',
+										'ib_cid'             =>
+											'\'' .
+											(!empty($cdid_response['data']['cid']) ? $cdid_response['data']['cid']
+												: '0') .
+											'\'',
+										'ib_cdid'            =>
+											'\'' .
+											(!empty($cdid_response['data']['cdid']) ? $cdid_response['data']['cdid']
+												: '0') .
+											'\'',
-											'html_tracking_code'	=> '\'' . $html_code . '\'', 
+										'html_tracking_code' => '\'' . $html_code . '\'',
-											'img_tracking_code'		=> '\'' . $img_code . '\'', 
+										'img_tracking_code'  => '\'' . $img_code . '\'',
-											'visible'				=> '\'Y\''
+										'visible'            => '\'Y\''
-										), array(
+									),
+									array(
-											'Site.id' => $site['Site']['id']
+										'Site.id' => $site['Site']['id']
-										));
+									)
+								);
-									
-									$updatedSiteIDs[] = $site['Site']['id'];
-									
-								} else {
-									// Ooops... an error
-									// Let's roll back any potential previously updated sites, before setting
-									// the error's message and breaking out of this loop
-									foreach ($updatedSiteIDs as $updatedSiteID) {
+
+								$updatedSiteIDs[] = $site['Site']['id'];
+
+							} else {
+								// Ooops... an error
+								// Let's roll back any potential previously updated sites, before setting
+								// the error's message and breaking out of this loop
+								foreach ($updatedSiteIDs as $updatedSiteID) {
-										$this->Site->updateAll(array(
+									$this->Site->updateAll(
+										array(
-												'td_id'					=> '0',
+											'td_id'              => '0',
-												'ib_cid'				=> '0',
+											'ib_cid'             => '0',
-												'ib_cdid'				=> '0',
+											'ib_cdid'            => '0',
-												'html_tracking_code'	=> '',
+											'html_tracking_code' => '',
-												'img_tracking_code'		=> '',
+											'img_tracking_code'  => '',
-												'visible'				=> 'N'
+											'visible'            => 'N'
-											), array(
+										),
+										array(
-												'id' => $site['Site']['id']
+											'id' => $site['Site']['id']
-											));
+										)
+									);
-									}
-									
+								}
+
-									$error = 'We\'ve encountered an error while updating your sites tags. Please contact us to report this error!';
+								$error =
+									'We\'ve encountered an error while updating your sites tags. Please contact us to report this error!';
-									break;
-								}
-							}
-						}
-						
+								break;
+							}
+						}
+					}
+
-						if ($error=='') {
+					if ($error == '') {
-						 	// Need to add profile id and payment id
-							if ($price_difference > 0) {
-								// Charge the card
-								$defaultPaymentProfile = $this->AuthorizeNet->getDefaultPaymentProfile($this->account);
-								$response              = $this->AuthorizeNet->chargeCard(
-									$this->account['Account']['profile_id'],
-									$defaultPaymentProfile['payment_profile_id'],
-									array(
-										array(
-											'id'          => 'S' . $upgraded_subscription['Subscription']['id'],
-											'name'        => $upgraded_subscription['Subscription']['name'],
-											'description' =>
-												'Subscription monthly tier - Pro-Rated (v' .
-												$upgraded_subscription['SubscriptionsVersion']['version'] .
-												')',
-											'price'       => $price_difference
-										)
-									)
-								);
-							}
-							
-							if (0 == $price_difference || empty($response['error'])) {
-								// Success
-								$this->Account->saveField('subscription_id', $upgraded_subscription['Subscription']['id']);
+						// Need to add profile id and payment id
+						if ($price_difference > 0) {
+							// Charge the card
+							$defaultPaymentProfile = $this->AuthorizeNet->getDefaultPaymentProfile($this->account);
+							$response              = $this->AuthorizeNet->chargeCard(
+								$this->account['Account']['profile_id'],
+								$defaultPaymentProfile['payment_profile_id'],
+								array(
+									array(
+										'id'          => 'S' . $upgraded_subscription['Subscription']['id'],
+										'name'        => $upgraded_subscription['Subscription']['name'],
+										'description' =>
+											'Subscription monthly tier - Pro-Rated (v' .
+											$upgraded_subscription['SubscriptionsVersion']['version'] .
+											')',
+										'price'       => $price_difference
+									)
+								)
+							);
+						}
+
+						if (0 == $price_difference || empty($response['error'])) {
+							// Success
+							$this->Account->saveField('subscription_id', $upgraded_subscription['Subscription']['id']);
 
-								if ($price_difference > 0) {
-									// The card seemed to have been charged, so let's insert the new payment record
-									$this->Account->Payment->create();
-									$this->Account->Payment->save(
-										array(
-											'account_id'      => $this->Account->id,
-											'payment_type_id' => 2,
-											'description'     =>
-												'"' .
-												$upgraded_subscription['Subscription']['name'] .
-												'" Subscription Payment',
-											'value'           => $price_difference,
-											'web_event_count' => ($pageviews ? $pageviews : 0),
-											'transaction_id'  => $response['transactionID'],
-											'added_date'      => date('Y-m-d H:i:s')
-										)
-									);
-								}
+							if ($price_difference > 0) {
+								// The card seemed to have been charged, so let's insert the new payment record
+								$this->Account->Payment->create();
+								$this->Account->Payment->save(
+									array(
+										'account_id'      => $this->Account->id,
+										'payment_type_id' => 2,
+										'description'     =>
+											'"' .
+											$upgraded_subscription['Subscription']['name'] .
+											'" Subscription Payment',
+										'value'           => $price_difference,
+										'web_event_count' => ($pageviews ? $pageviews : 0),
+										'transaction_id'  => $response['transactionID'],
+										'added_date'      => date('Y-m-d H:i:s')
+									)
+								);
+							}
 
-								$this->Session->setFlash('Your account has been successfully upgraded.', 'flash_success');
+							$this->Session->setFlash('Your account has been successfully upgraded.', 'flash_success');
 
-								// Send the user a receipt email.
+							// Send the user a receipt email.
-								$this->UserAccount->sendEmail(array(
+							$this->UserAccount->sendEmail(
+								array(
-										'email_vars'	=> array( // Except for the user's and account's names, which are determined and se(n)t automatically
+									'email_vars' => array( // Except for the user's and account's names, which are determined and se(n)t automatically
-											'account'		=> $this->current_account['Account']['company_name'],
+									                       'account'    => $this->current_account['Account']['company_name'],
-											'account_id'	=> $this->current_account['Account']['id'],
+									                       'account_id' => $this->current_account['Account']['id'],
-											'value'			=> $price_difference,
+									                       'value'      => $price_difference,
-											'service'		=> '"' . $upgraded_subscription['Subscription']['name'] . '" subscription upgrade payment'
+									                       'service'    =>
+										                       '"' .
+										                       $upgraded_subscription['Subscription']['name'] .
+										                       '" subscription upgrade payment'
-										),
+									),
-										'permission'	=> 'credit_card_transaction',
+									'permission' => 'credit_card_transaction',
-										'bcc'     		=> ACCOUNT_MANAGERS,
+									'bcc'        => ACCOUNT_MANAGERS,
-										'template'		=> 'payment-receipt',
+									'template'   => 'payment-receipt',
-										'subject'		=> 'Subscription Payment Receipt'
+									'subject'    => 'Subscription Payment Receipt'
-									));
+								)
+							);
 
-								// Add account to Tag Queue with a status of "Upgraded".
+							// Add account to Tag Queue with a status of "Upgraded".
-								if ($this->current_account['Subscription']['subscription_type'] == 'RTB' && $upgraded_subscription['Subscription']['subscription_type'] == 'R') {
-									$this->TagQueue->updateAll(array(
+							if ($this->current_account['Subscription']['subscription_type'] == 'RTB' &&
+							    $upgraded_subscription['Subscription']['subscription_type'] == 'R'
+							) {
+								$this->TagQueue->updateAll(
+									array(
-											'TagQueue.status'	=> '\'G\'',
+										'TagQueue.status' => '\'G\'',
-											'TagQueue.placed'	=> null
+										'TagQueue.placed' => null
-										), array(
+									),
+									array(
-											'TagQueue.account_id' => $this->current_account['Account']['id'], 
-											'TagQueue.status <> \'R\''
+										'TagQueue.account_id' => $this->current_account['Account']['id'],
+										'TagQueue.status <> \'R\''
-										));
+									)
+								);
-								}
-								
-								// If the new subscription is "Enterprise" level, let an admin know.
-								if ($upgraded_subscription['Subscription']['no_limit'] == true) {
-									// Awww man, they are enterprise level now!
+							}
+
+							// If the new subscription is "Enterprise" level, let an admin know.
+							if ($upgraded_subscription['Subscription']['no_limit'] == true) {
+								// Awww man, they are enterprise level now!
-									$this->sendEmail(array(
+								$this->sendEmail(
+									array(
-						                    'vars'      => array(
+										'vars'     => array(
-						                        'message' => 'The "' . $this->current_account['Account']['company_name'] . '" account has upgraded to an Enterprise subscription (v' . $upgraded_subscription['SubscriptionsVersion']['version'] . ') based on their sites\' total pageviews count (' . number_format($pageviews) . ').' . "\n" .
+											'message' =>
+												'The "' .
+												$this->current_account['Account']['company_name'] .
+												'" account has upgraded to an Enterprise subscription (v' .
+												$upgraded_subscription['SubscriptionsVersion']['version'] .
+												') based on their sites\' total pageviews count (' .
+												number_format($pageviews) .
+												').' .
+												"\n" .
-						                        	'Please contact the account owner about their Enterprise subscription and pricing.'
-						                    ),
+												'Please contact the account owner about their Enterprise subscription and pricing.'
+										),
-						                    'email'     => explode(',', ACCOUNT_MANAGERS),
+										'email'    => explode(',', ACCOUNT_MANAGERS),
-						                    'name'     	=> 'Account Manager',
+										'name'     => 'Account Manager',
-						                    'subject'   => 'Enterprise Pageviews Count',
+										'subject'  => 'Enterprise Pageviews Count',
-						                    'template'  => 'empty'
+										'template' => 'empty'
-						                ));
+									)
+								);
-									//$this->set('enterprise', 'enterprise');
-								}
-								
-							} else {
+								//$this->set('enterprise', 'enterprise');
+							}
+
+						} else {
-								$error = 'There was a problem processing your upgrade. If you continue to receive this message, please visit our <a href="' . FRESHDESK_BASE_URL . '" target="_blank">Support Center</a>.' . $response['error'];
+							$error =
+								'There was a problem processing your upgrade. If you continue to receive this message, please visit our <a href="' .
+								FRESHDESK_BASE_URL .
+								'" target="_blank">Support Center</a>.' .
+								$response['error'];
-							}
-						}
-						
-					} else {
+						}
+					}
+
+				} else {
-						$error = 'There was a problem with your account\'s credentials. Please contact us to report this error!';
+					$error =
+						'There was a problem with your account\'s credentials. Please contact us to report this error!';
-					}
-				}
-				
-				// Either way, return them to the sites page
+				}
+			}
+
+			// Either way, return them to the sites page
-				if ($error=='') {
+			if ($error == '') {
-					$this->redirect(array(
+				$this->redirect(
+					array(
-							'plugin'		=> 'choozle_insights',
+						'plugin'     => 'choozle_insights',
-							'controller'	=> 'audience',
+						'controller' => 'audience',
-							'action'		=> 'manage'
+						'action'     => 'manage'
-						));
+					)
+				);
-				
-				} else {
-					$this->Session->setFlash($error, 'flash_alert');
-				}
-			}
-			
-			$this->set('needs_upgrade', $needs_upgrade);
-			$this->set('current_type', $this->current_account['Subscription']['subscription_type']);
-		}
-		
+
+			} else {
+				$this->Session->setFlash($error, 'flash_alert');
+			}
+		}
+
+		$this->set('needs_upgrade', $needs_upgrade);
+		$this->set('current_type', $this->current_account['Subscription']['subscription_type']);
+	}
+
-		
-	    public function get_coupon_details() {
+	public function get_coupon_details()
+	{
-	        $this->autoRender = false;
+		$this->autoRender = false;
-	        $this->layout = false;
+		$this->layout     = false;
-			
-			if (!empty($_POST['coupon'])) {
+
+		if (!empty($_POST['coupon'])) {
-				$coupon = $this->Coupon->find('first', array(
+			$coupon = $this->Coupon->find(
+				'first',
+				array(
-						'conditions' => array(
-							'coupon_code' => $_POST['coupon']
-						)
+					'conditions' => array(
+						'coupon_code' => $_POST['coupon']
+					)
-					));
+				)
+			);
-				
-				if ($coupon) {
-					// Next let's check if the current coupon is valid
+
+			if ($coupon) {
+				// Next let's check if the current coupon is valid
-					if ($coupon['Coupon']['start_date'] && strtotime($coupon['Coupon']['start_date'])>time()) {
+				if ($coupon['Coupon']['start_date'] && strtotime($coupon['Coupon']['start_date']) > time()) {
-						echo json_encode(array(
+					echo json_encode(
+						array(
-								'message' => 'The submitted coupon code is not valid yet'
+							'message' => 'The submitted coupon code is not valid yet'
-							));
+						)
+					);
-						die();
-					}
-					
+					die();
+				}
+
-					if ($coupon['Coupon']['end_date'] && strtotime($coupon['Coupon']['end_date'])<time()) {
+				if ($coupon['Coupon']['end_date'] && strtotime($coupon['Coupon']['end_date']) < time()) {
-						echo json_encode(array(
+					echo json_encode(
+						array(
-								'message' => 'The submitted coupon code is no longer valid'
+							'message' => 'The submitted coupon code is no longer valid'
-							));
+						)
+					);
-						die();
-					}
-					
-					if (!empty($coupon['Coupon']['usage_number'])) {
-						// Let's check how many times the current coupon has already been used
-						$conditions = array(
-							'coupon_id' => $coupon['Coupon']['id']
-						);
+					die();
+				}
+
+				if (!empty($coupon['Coupon']['usage_number'])) {
+					// Let's check how many times the current coupon has already been used
+					$conditions = array(
+						'coupon_id' => $coupon['Coupon']['id']
+					);
 
-						$coupons = $this->Account->AccountsCoupon->find('all', array(
+					$coupons = $this->Account->AccountsCoupon->find(
+						'all',
+						array(
-									'conditions' => $conditions
+							'conditions' => $conditions
-								));
+						)
+					);
 
-						if (count($coupons)>=$coupon['Coupon']['usage_number']) {
+					if (count($coupons) >= $coupon['Coupon']['usage_number']) {
-							echo json_encode(array(
+						echo json_encode(
+							array(
-									'message' => 'The submitted coupon code has reached its maximum number of usages and can no longer be used'
+								'message' => 'The submitted coupon code has reached its maximum number of usages and can no longer be used'
-								));
+							)
+						);
-							die();
-						}
-					}
+						die();
+					}
+				}
 
-					if ($coupon['Coupon']['is_active']!='1') {
+				if ($coupon['Coupon']['is_active'] != '1') {
-						echo json_encode(array(
+					echo json_encode(
+						array(
-								'message' => 'The submitted coupon code is not active'
+							'message' => 'The submitted coupon code is not active'
-							));
+						)
+					);
-						die();
-					}
-					
-					// If we've reached this far, everything's good,
-					// so let's return the coupon's value and type
+					die();
+				}
+
+				// If we've reached this far, everything's good,
+				// so let's return the coupon's value and type
-					echo json_encode(array(
+				echo json_encode(
+					array(
-							'coupon' => array(
+						'coupon' => array(
-								'value'		=> $coupon['Coupon']['amount'],
+							'value' => $coupon['Coupon']['amount'],
-								'type'		=> str_replace('1', '$',
-									str_replace('2', '%', $coupon['Coupon']['amount_type'])),
+							'type'  => str_replace(
+								'1',
+								'$',
+								str_replace('2', '%', $coupon['Coupon']['amount_type'])
+							),
-							)
+						)
-						));
+					)
+				);
-					
-				} else {
+
+			} else {
-					echo json_encode(array(
+				echo json_encode(
+					array(
-							'message' => 'Invalid coupon code'
+						'message' => 'Invalid coupon code'
-						));
+					)
+				);
-				}
-				
-				die();
-			}
-			
-			echo json_encode(array());
-		}
-		
+			}
+
+			die();
+		}
+
+		echo json_encode(array());
+	}
+
-		
-	    private function get_next_scheduled_upgradable_charts_payment_date() {
-	    	usort($this->current_account['Payment'], function ($x, $y) {
+	private function get_next_scheduled_upgradable_charts_payment_date()
+	{
+		usort(
+			$this->current_account['Payment'],
+			function ($x, $y) {
-				    return strtotime($y['added_date']) - strtotime($x['added_date']);
+				return strtotime($y['added_date']) - strtotime($x['added_date']);
-				});
+			}
+		);
-			
+
-	    	foreach($this->current_account['Payment'] as $payment) { // have they made a subscription payment ever?
+		foreach ($this->current_account['Payment'] as $payment) { // have they made a subscription payment ever?
-	    		if ($payment['payment_type_id'] == 2) { // they've made a subscription payment before!
-	    			$last_payment_date = $payment['added_date'];
-	    			break;
-	    		}
-	    	}
-	    	
-			// check last payment date and add one month
-	    	if (!isset($last_payment_date)) { // could find a prior payment
-				/*
-	    		if ($this->current_account['Account']['custom_billing'] == 'Y') {
-					$next_date = date('Y-m-d H:i:s',strtotime($this->current_account['Account']['custom_subscription_start']));
-	    		} else {
-	    			*/
-	    			// well, now what? they aren't set up to be billed for anything
-	    			// what if we make it just so it's only turned on for 30 days, nothing renews? That should be a good enough solution for now, right???
-	    			$next_date = 'none';
-	    		//}
-	    	} else {
+			if ($payment['payment_type_id'] == 2) { // they've made a subscription payment before!
+				$last_payment_date = $payment['added_date'];
+				break;
+			}
+		}
+
+		// check last payment date and add one month
+		if (!isset($last_payment_date)) { // could find a prior payment
+			/*
+			if ($this->current_account['Account']['custom_billing'] == 'Y') {
+				$next_date = date('Y-m-d H:i:s',strtotime($this->current_account['Account']['custom_subscription_start']));
+			} else {
+				*/
+			// well, now what? they aren't set up to be billed for anything
+			// what if we make it just so it's only turned on for 30 days, nothing renews? That should be a good enough solution for now, right???
+			$next_date = 'none';
+			//}
+		} else {
-	    		$next_date = date('Y-m-d H:i:s',strtotime($last_payment_date.' + 1 month'));
+			$next_date = date('Y-m-d H:i:s', strtotime($last_payment_date . ' + 1 month'));
-	    	}
+		}
 
-	    	return $next_date;
-	    }
+		return $next_date;
+	}
 
-		/**
-		 * Displays a list of all payments for an account. Defaults to showing
-		 * payments from the last month.
-		 */
+	/**
+	 * Displays a list of all payments for an account. Defaults to showing
+	 * payments from the last month.
+	 */
-		public function payments() {
+	public function payments()
+	{
-			$fund_label = 'funds';
-			if ($this->current_account['Account']['invoice_billing'] == 'Y') {
-				$fund_label = 'spend';
-			}
-			$this->set('fund_label', $fund_label);
-			
+		$fund_label = 'funds';
+		if ($this->current_account['Account']['invoice_billing'] == 'Y') {
+			$fund_label = 'spend';
+		}
+		$this->set('fund_label', $fund_label);
+
-			
-			$payment_types = $this->Payment->find('all', array(
+		$payment_types = $this->Payment->find(
+			'all',
+			array(
-					'conditions'	=> array(
+				'conditions' => array(
-						'Payment.account_id' => $this->account['Account']['id']
-					), 
+					'Payment.account_id' => $this->account['Account']['id']
+				),
-					'fields'		=> 'DISTINCT Payment.payment_type_id, PaymentType.type', 
+				'fields'     => 'DISTINCT Payment.payment_type_id, PaymentType.type',
-					'joins'			=> array(
+				'joins'      => array(
-						array(
+					array(
-							'alias' 		=> 'PaymentType', 
+						'alias'      => 'PaymentType',
-							'conditions'	=> array(
+						'conditions' => array(
-								'Payment.payment_type_id = PaymentType.id'
-							), 
+							'Payment.payment_type_id = PaymentType.id'
+						),
-							'table' 		=> 'payment_types'
+						'table'      => 'payment_types'
-						)
-					)
+					)
+				)
-				));
+			)
+		);
-			$this->set('payment_types', $payment_types);
-			
+		$this->set('payment_types', $payment_types);
+
-			
-			$type = $this->_set_payment_type();
+		$type     = $this->_set_payment_type();
-			$dates = $this->_set_payment_dates();
+		$dates    = $this->_set_payment_dates();
-			$payments = $this->AccountComponent->getPayments($this->account['Account']['id'], $dates['from'], $dates['to'], $type);
+		$payments =
+			$this->AccountComponent->getPayments($this->account['Account']['id'], $dates['from'], $dates['to'], $type);
-			$this->set('payments', $payments);
-		}
-		
+		$this->set('payments', $payments);
+	}
+
-		
-	    /**
-		 * Displays payments report PDF.
-		 */
+	/**
+	 * Displays payments report PDF.
+	 */
-		public function payments_pdf($id = null) {
+	public function payments_pdf($id = null)
+	{
-			$type = $this->_set_payment_type();
+		$type  = $this->_set_payment_type();
-			$dates = $this->_set_payment_dates();
-			
+		$dates = $this->_set_payment_dates();
+
-			$payments = $this->AccountComponent->getPayments($this->account['Account']['id'], $dates['from'], $dates['to'], $type);
+		$payments =
+			$this->AccountComponent->getPayments($this->account['Account']['id'], $dates['from'], $dates['to'], $type);
-			$this->set('payments', $payments);
-			
+		$this->set('payments', $payments);
+
-			
-			$download = false;
-			// Check if a print dialog should be automatically triggered.
+		$download = false;
+		// Check if a print dialog should be automatically triggered.
-			if(isset($this->request->query['print'])) {
+		if (isset($this->request->query['print'])) {
-				$this->set('print', true);
-			} else {
-				$this->set('print', false);
-				
-				// Now check if a download dialog should be automatically triggered.
+			$this->set('print', true);
+		} else {
+			$this->set('print', false);
+
+			// Now check if a download dialog should be automatically triggered.
-				if(isset($this->request->query['download'])) {
+			if (isset($this->request->query['download'])) {
-					$download = true;
-				}
-			}
-			
-			$filename = 'account-payments.pdf';
-			
-			// Make sure controller doesn't automatically show view.
-			$this->autoRender = false;
-			Configure::write('Asset.timestamp', false);
-			
-			// Get stripped down PDF view HTML.
+				$download = true;
+			}
+		}
+
+		$filename = 'account-payments.pdf';
+
+		// Make sure controller doesn't automatically show view.
+		$this->autoRender = false;
+		Configure::write('Asset.timestamp', false);
+
+		// Get stripped down PDF view HTML.
-			$view = new View($this);
+		$view         = new View($this);
-			$view->layout = 'pdf';
-			$view->viewPath .= DS . 'pdf';
-			$html = $view->render();
-			
-			// Create the PDF and, either send it to the browser or trigger a download,
-			// depending on the $download param.
-			$this->Pdf->create($html, $filename, $download);
-		}
-		
+		$view->layout = 'pdf';
+		$view->viewPath .= DS . 'pdf';
+		$html = $view->render();
+
+		// Create the PDF and, either send it to the browser or trigger a download,
+		// depending on the $download param.
+		$this->Pdf->create($html, $filename, $download);
+	}
+
-		
-		/**
-		 * Emails payments report PDF.
-		 */
+	/**
+	 * Emails payments report PDF.
+	 */
-		public function email_payments() {
+	public function email_payments()
+	{
-			$type = $this->_set_payment_type();
+		$type  = $this->_set_payment_type();
-			$dates = $this->_set_payment_dates();
-			
+		$dates = $this->_set_payment_dates();
+
-			$payments = $this->AccountComponent->getPayments($this->account['Account']['id'], $dates['from'], $dates['to'], $type);
+		$payments =
+			$this->AccountComponent->getPayments($this->account['Account']['id'], $dates['from'], $dates['to'], $type);
-			$this->set('payments', $payments);
-			
+		$this->set('payments', $payments);
+
-			$filename_nice = 'account-payments.pdf';
+		$filename_nice   = 'account-payments.pdf';
-			$filename_unique = 'account-payments.' . mt_rand() . '.pdf';
+		$filename_unique = 'account-payments.' . mt_rand() . '.pdf';
-			$filepath = TMP . 'report_pdfs' . DS;
+		$filepath        = TMP . 'report_pdfs' . DS;
-			
-			// Make sure controller doesn't automatically show view.
-			$this->autoRender = false;
-			Configure::write('Asset.timestamp', false);
-			
-			// Get stripped down PDF view HTML.
+
+		// Make sure controller doesn't automatically show view.
+		$this->autoRender = false;
+		Configure::write('Asset.timestamp', false);
+
+		// Get stripped down PDF view HTML.
-			$view = new View($this);
+		$view         = new View($this);
-			$view->layout = 'pdf';
-			$view->viewPath .= DS . 'pdf';
-			$html = $view->render('payments_pdf');
-			
-			// Create the PDF and save it.
-			$pdf_filepath = $this->Pdf->save($html, $filepath . $filename_unique, false);
-			
-			if (!file_exists($filepath . $filename_unique)) {
-				// This should never happen. Account for it just in case.
-				echo json_encode(array('error' => 'Error creating file.'));
-				exit;
-			}
-			
+		$view->layout = 'pdf';
+		$view->viewPath .= DS . 'pdf';
+		$html = $view->render('payments_pdf');
+
+		// Create the PDF and save it.
+		$pdf_filepath = $this->Pdf->save($html, $filepath . $filename_unique, false);
+
+		if (!file_exists($filepath . $filename_unique)) {
+			// This should never happen. Account for it just in case.
+			echo json_encode(array('error' => 'Error creating file.'));
+			exit;
+		}
+
-			
-			$content = 'Attached is a PDF containing all payments for the ' . $this->account['Account']['company_name'] . ' account';
+		$content =
+			'Attached is a PDF containing all payments for the ' .
+			$this->account['Account']['company_name'] .
+			' account';
-			if ($dates['from'] && $dates['to']) {
-				$content .= ' from ' . $dates['from'] . ' to ' . $dates['to'] . '.';
-			} elseif ($dates['from']) {
-				$content .= ' since ' . $dates['from'] . '.';
-			} elseif ($dates['to']) {
-				$content .= ' thru ' . $dates['to'] . '.';
-			} else {
-				$content .= '.';
-			}
-			
-			// Send email.
+		if ($dates['from'] && $dates['to']) {
+			$content .= ' from ' . $dates['from'] . ' to ' . $dates['to'] . '.';
+		} elseif ($dates['from']) {
+			$content .= ' since ' . $dates['from'] . '.';
+		} elseif ($dates['to']) {
+			$content .= ' thru ' . $dates['to'] . '.';
+		} else {
+			$content .= '.';
+		}
+
+		// Send email.
-			$user_email = $this->UserAccount->sendEmail(array(
+		$user_email = $this->UserAccount->sendEmail(
+			array(
-					'email_vars'	=> array(
+				'email_vars'  => array(
-						'content' => $content,
-					),
+					'content' => $content,
+				),
-					'template'		=> 'default',
+				'template'    => 'default',
-					'subject'		=> 'Campaign Report',
+				'subject'     => 'Campaign Report',
-					'attachments'	=> array($filename_nice => $filepath . $filename_unique)
+				'attachments' => array($filename_nice => $filepath . $filename_unique)
-				));
-			echo json_encode(array(
+			)
+		);
+		echo json_encode(
+			array(
-				'success' 	=> 'true',
+				'success' => 'true',
-				'email' 	=> $user_email
+				'email'   => $user_email
-			));
+			)
+		);
-			
-			// Get rid of temporary PDF file.
-			unlink($filepath . $filename_unique);
-			exit;
-		}
-		
-		/**
-		 * Sets the "type" payment value from a GET parameter.
-		 * Used for payment actions.
-		 * 
-		 */
+
+		// Get rid of temporary PDF file.
+		unlink($filepath . $filename_unique);
+		exit;
+	}
+
+	/**
+	 * Sets the "type" payment value from a GET parameter.
+	 * Used for payment actions.
+	 *
+	 */
-		private function _set_payment_type() {
+	private function _set_payment_type()
+	{
-			$type = null;
-			
-			if (!empty($_GET['type']) && is_numeric($_GET['type'])) {
+		$type = null;
+
+		if (!empty($_GET['type']) && is_numeric($_GET['type'])) {
-				if ($payment_type = $this->Payment->find('first', array(
+			if ($payment_type = $this->Payment->find(
+				'first',
+				array(
-						'conditions'	=> array(
+					'conditions' => array(
-							'Payment.account_id'		=> $this->account['Account']['id'], 
+						'Payment.account_id'      => $this->account['Account']['id'],
-							'Payment.payment_type_id'	=> $_GET['type']
+						'Payment.payment_type_id' => $_GET['type']
-						)
+					)
-					))) {
+				)
+			)
+			) {
-					$type = $_GET['type'];
-					
-				} else {
-					unset($_GET['type']);
-				}
-			}
-			$this->set('type', $type);
-			
-			return $type;
-		}
-		
-		/**
-		 * Sets "from" and "to" dates from GET parameters. Used for payment actions.
-		 */
+				$type = $_GET['type'];
+
+			} else {
+				unset($_GET['type']);
+			}
+		}
+		$this->set('type', $type);
+
+		return $type;
+	}
+
+	/**
+	 * Sets "from" and "to" dates from GET parameters. Used for payment actions.
+	 */
-		private function _set_payment_dates() {
+	private function _set_payment_dates()
+	{
-			if (isset($this->params->query['from']) && strtotime($this->params->query['from']) > 0) {
-				// User explicitly requested a valid date.
-				$from = date('d M Y', strtotime($this->params->query['from']));
-			} elseif (isset($this->params->query['from']) && empty($this->params->query['from'])) {
-				// User explicitly requested no beginning date.
-				$from = null;
-			} else {
-				// User either requested an invalid date, or no date was specified.
-				// Default to the 1st of the current month.
-				$first_of_month = '1 ' . date('M') . ' ' . date('Y');
+		if (isset($this->params->query['from']) && strtotime($this->params->query['from']) > 0) {
+			// User explicitly requested a valid date.
+			$from = date('d M Y', strtotime($this->params->query['from']));
+		} elseif (isset($this->params->query['from']) && empty($this->params->query['from'])) {
+			// User explicitly requested no beginning date.
+			$from = null;
+		} else {
+			// User either requested an invalid date, or no date was specified.
+			// Default to the 1st of the current month.
+			$first_of_month = '1 ' . date('M') . ' ' . date('Y');
-				$from = date('d M Y', strtotime($first_of_month));
+			$from           = date('d M Y', strtotime($first_of_month));
-			}
-			
-			if (isset($this->params->query['to']) && strtotime($this->params->query['to']) > 0) {
-				// User explicitly requested a valid date.
-				$to = date('d M Y', strtotime($this->params->query['to']));
-			} elseif (isset($this->params->query['to']) && empty($this->params->query['to'])) {
-				// User explicitly requested no end date.
-				$to = null;
-			} else {
-				// User either requested an invalid date, or no date was specified.
-				// Default to today.
-				$to = date('d M Y');
-			}
-			
-			$this->set('from', $from);
-			$this->set('to', $to);
-			
-			return array(
+		}
+
+		if (isset($this->params->query['to']) && strtotime($this->params->query['to']) > 0) {
+			// User explicitly requested a valid date.
+			$to = date('d M Y', strtotime($this->params->query['to']));
+		} elseif (isset($this->params->query['to']) && empty($this->params->query['to'])) {
+			// User explicitly requested no end date.
+			$to = null;
+		} else {
+			// User either requested an invalid date, or no date was specified.
+			// Default to today.
+			$to = date('d M Y');
+		}
+
+		$this->set('from', $from);
+		$this->set('to', $to);
+
+		return array(
-				'from'	=> $from,
+			'from' => $from,
-				'to'	=> $to
+			'to'   => $to
-			);
-		}
-	}
+		);
+	}
+}
